name: GeoMop - Build installations
# Build:
# - GeoMop images
# - GeoMop Linux installation
# - GeoMop Windows installation

on:
  push:
#    branches:
#      - release*

env:
  DOCKER_USER: ${{secrets.DOCKER_HUB_FLOW123D_USERNAME}}
  DOCKER_PASSWORD: ${{secrets.DOCKER_HUB_FLOW123D_TOKEN}}
  #environment: gnu
  #build_type: release
  #build_container: contgnurelease
  #FLOW: /opt/flow123d/flow123d
  
      
jobs:
  build-images:
    name: build GeoMop docker images
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 2
      matrix:
        environment: ['gnu'] #, 'intel']
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Login
      #uses: docker/login-action@v1
      # docker/* provides various actions provided by docker, but that requires learning their approach of CI/CD
      run: |
        echo $DOCKER_PASSWORD | docker login -u $DOCKER_USER --password-stdin
    - name: Build
      run: |
        geomop_version=$(sed -n "/^version: */p" version.yml | sed "s/version: //")
        flow123d_version=$(sed -n "/^flow123d_version: */p" version.yml | sed "s/flow123d_version: //")
        result_image=flow123d/geomop-${{ matrix.environment }}:${geomop_version}
        docker build \
        	 --build-arg base_image=flow123d/flow123d-${{ matrix.environment }}:${flow123d_version} \
             --tag ${result_image} \
             build/dockerfiles
        docker push ${result_image}

        make flow-dev-${{ matrix.environment }}
        make img-install-${{ matrix.environment }}
        make push-${{ matrix.environment }}

    - name: Read images_version file
      id: getversion
      run: echo "::set-output name=version::$(cat images_version)"
    - name: Release
      uses: avakar/tag-and-release@v1
      with:
          tag_name: v${{ steps.getversion.outputs.version }}
          release_name: release_${{ steps.getversion.outputs.version }}
      env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}

  build-linux:
    name: build GeoMop Debian installaion
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Initialize submodules
        run: |
          submodules/initialize.sh
      - name: Install packages
        run: |
          sudo apt-get update
          sudo apt-get install -y debhelper devscripts
      - name: Create debian package
        run: |
          mkdir -p dist
          export VERSION=$(sed -n "/^version: */p" version.yml | sed "s/version: //")
          cd build
          make debian
      - uses: actions/upload-artifact@v1
        with:
          name: lin_install
          path: dist

  build-windows:
    name: build GeoMop Windows installaion
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Initialize submodules
      run: |
        submodules/initialize.sh
    - name: Download prerequisites
      run: |
        wget -r -np -nd -nv -R "index.html*" -e robots=off -P build/win_x86 https://geomop.nti.tul.cz/prerequisites/
        cd build/win_x86
        unzip gmsh-4.9.1-Windows64.zip
        mv gmsh-4.9.1-Windows64 gmsh
    - name: Create Windows installer
      run: |
        mkdir -p dist
        docker pull flow123d/nsis-3.05-1:latest
        docker run -i -u $(id -u):$(id -u) -v $(pwd):/nsis-project flow123d/nsis-3.05-1 /nsis-project/build/windows/win_x86.nsi
        # Use an NSIS Docker image, no sources available

    - uses: actions/upload-artifact@v1
      with:
        name: win_install
        path: dist
