name: GeoMop - Build installations
# Build:
# - GeoMop images
# - GeoMop Linux installation
# - GeoMop Windows installation

on:
  [push]
  #push:
    #branches:
      #- master
      #Release branches
      #- "[0-9]+.[0-9]+.X"  
  #pull_request:
    #branches:
      #- master
      #- "[0-9]+.[0-9]+.X"
env:
  DOCKER_USER: ${{secrets.DOCKER_HUB_FLOW123D_USERNAME}}
  DOCKER_PASSWORD: ${{secrets.DOCKER_HUB_FLOW123D_TOKEN}}
  #environment: gnu
  #build_type: release
  #build_container: contgnurelease
  #FLOW: /opt/flow123d/flow123d
  
      
jobs:
  build-images:
    name: build GeoMop docker images and upload to DockerHub
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 2
      matrix:
        environment: ['gnu'] #, 'intel']
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Login
      #uses: docker/login-action@v1
      # docker/* provides various actions provided by docker, but that requires learning their approach of CI/CD
      run: |
        echo $DOCKER_PASSWORD | docker login -u $DOCKER_USER --password-stdin
    - name: Build
      run: |
        geomop_version=$(sed -n "/^version: */p" version.yml | sed "s/version: //")
        flow123d_version=$(sed -n "/^flow123d_version: */p" version.yml | sed "s/flow123d_version: //")
        result_image=flow123d/geomop-${{ matrix.environment }}:${geomop_version}
        cp version.yml build/dockerfiles
        docker build \
        	 --build-arg base_image=flow123d/flow123d-${{ matrix.environment }}:${flow123d_version} \
             --tag ${result_image} \
             build/dockerfiles
        docker push ${result_image}
        

    - name: Read images_version file
      id: getversion
      run: echo "::set-output name=version::$(cat images_version)"
    #- name: Release
      #uses: avakar/tag-and-release@v1
      #with:
          #tag_name: v${{ steps.getversion.outputs.version }}
          #release_name: release_${{ steps.getversion.outputs.version }}
      #env:
          #GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}

  build-linux:
    name: build GeoMop Debian installaion
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Initialize submodules
        run: |
          submodules/initialize.sh
      - name: Install packages
        run: |
          sudo apt-get update
          sudo apt-get install -y debhelper devscripts build-essential lintian
      - name: Set up Python
        uses: actions/setup-python@v1
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruamel.yaml
      - name: Create debian package
        continue-on-error: True
        run: |
          mkdir -p dist
          export VERSION=$(sed -n "/^version: */p" version.yml | sed "s/version: //")
          cd build
          make debian
      - uses: actions/upload-artifact@v3
        with:         
          name: version
          path: version.yml
      - uses: actions/upload-artifact@v3
        continue-on-error: True
        with:
          name: lin_install
          path: dist/*

  build-windows:
    name: build GeoMop Windows installaion
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Initialize submodules
      run: |
        cp .gitmodules_https .gitmodules
        submodules/initialize.sh
    - name: Download prerequisites
      run: |
        wget -nv -P build/win_x86 https://geomop.nti.tul.cz/prerequisites/python-3.9.13-amd64.exe
        wget -nv -P build/win_x86 http://flow.nti.tul.cz/packages/3.9.0/flow123d_3.9.0_windows_install.exe
    - name: Create Windows installer
      run: |
        mkdir -p dist
        docker pull flow123d/nsis-3.05-1:latest
        export VERSION=$(sed -n "/^version: */p" version.yml | sed "s/version: //")
        docker run -i -u $(id -u):$(id -u) -v $(pwd):/nsis-project flow123d/nsis-3.05-1 -DVERSION=$VERSION /nsis-project/build/windows/win_x86.nsi
        # Use an NSIS Docker image, no sources available
        ls -l dist
    - uses: actions/upload-artifact@v3
      with:
        name: geomop_2.0.0_x86_64.exe
        path: dist/geomop_2.0.0_x86_64.exe
        
  build-doc:
    name: build generated HTML documentation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Initialize submodules
      run: |
        submodules/initialize.sh
    - name: Set up Python
      uses: actions/setup-python@v1
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: sphinx build
      run: |
        cd doc && make html
    - uses: actions/upload-artifact@v3
      with:  
        name: html
        path: doc/_build/html/

  upload:
    needs: [build-linux, build-windows, build-doc]
    name: upload packages and doc to astra storage
    runs-on: ubuntu-latest
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: html
        path: dist/html
    - uses: actions/download-artifact@v3
      with:
        name: geomop_2.0.0_x86_64.exe
        path: dist
#    - uses: actions/download-artifact@v3
#      with:
#        name: linux_install
#        path: dist
    - uses: actions/download-artifact@v3
      with:
        name: version
    - id: vars
      run: |
        ls -l
        ls -l dist
        geomop_version=$(sed -n "/^version: */p" version.yml | sed "s/version: //")
        echo "::set-output name=relver::${geomop_version}"    

    - name: SCP upload to Share        
      run: |
          ls -l
          #cd ${{ steps.vars.outputs.pubdir }}
          relver=${{ steps.vars.outputs.relver }}
          sshpass -p ${{ secrets.SSH_STORAGE_PASS }} scp -r  \
            dist/geomop_${relver}_x86_64.exe \
            dist/html \
            ${{ secrets.SSH_STORAGE_USER }}@${{ secrets.SSH_STORAGE_HOST }}:geomop_packages/${relver}
        
    #- name: SSH
      #uses: appleboy/scp-action@master
      #with:
        #host: ${{ secrets.SSH_STORAGE_HOST }}
        #username: ${{ secrets.SSH_STORAGE_USER }}
        #key: ${{ secrets.PUBLISH_KEY }}
        #password: ${{ secrets.SSH_STORAGE_PASS }}
        #passphrase: ${{ secrets.PUBLISH_PASSPHRASE }}
        #port: 22
        #source: "publish_${environment}/doxygen, 
                 #publish_${environment}/flow123d_3.9.0_doc.pdf,
                 #publish_${environment}/flow123d_3.9.0_linux_install.json,
                 #publish_${environment}/flow123d_3.9.0_linux_install.tar.gz,
                 #publish_${environment}/flow123d_3.9.0_windows_install.exe,
                 #publish_${environment}/flow123d_3.9.0_windows_install.json,
                 #publish_${environment}/htmldoc,
                 #publish_${environment}/imagename"
        #source: |
           #dist/geomop_${{ steps.vars.outputs.relver }}_x86_64.exe
           #html
           
        
        #target: "~/geomop_packages/${{ steps.vars.outputs.relver }}"
        #strip_components: 1
