{ "version" :{
"flow123d_commit" : "release_1.8.2-1141-g68a548f",
"flow123d_version" : "1.8.master",
"date" : "Feb  2 2016, 22:02:23"
},
"ist_nodes" : [
{
"id" : "ed0b3ed40e2f3985",
"input_type" : "Record",
"name" : "Root",
"attributes" : {

},
"description" : "Root record of JSON input for Flow123d.",
"keys" : [
{ "key" : "flow123d_version",
"description" : "Version of Flow123d for which the input file was created.Flow123d only warn about version incompatibility. However, external tools may use this information to provide conversion of the input file to the structure required by another version of Flow123d.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f"
},
{ "key" : "problem",
"description" : "Simulation problem to be solved.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "50fc8b890e3fd90b"
},
{ "key" : "pause_after_run",
"description" : "If true, the program will wait for key press before it terminates.",
"default" : { "type" : "value at declaration",
"value" : false },
"type" : "282546d52edd4"
}]
},{
"id" : "29b5533100b6f60f",
"input_type" : "String",
"name" : "String",
"attributes" : {

}},{
"id" : "50fc8b890e3fd90b",
"input_type" : "Abstract",
"name" : "Problem",
"attributes" : {

},
"description" : "The root record of description of particular the problem to solve.",
"implementations" : [
"c62189979034f42b"]},{
"id" : "c62189979034f42b",
"input_type" : "Record",
"name" : "SequentialCoupling",
"attributes" : {

},
"description" : "Record with data for a general sequential coupling.\n",
"implements" : [ "50fc8b890e3fd90b" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "SequentialCoupling" },
"type" : "29b5533100b6f60f"
},
{ "key" : "description",
"description" : "Short description of the solved problem.\nIs displayed in the main log, and possibly in other text output files.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "29b5533100b6f60f"
},
{ "key" : "mesh",
"description" : "Computational mesh common to all equations.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "e48c6f4952c4ab40"
},
{ "key" : "time",
"description" : "Simulation time frame and time step.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "d8574f6af69c7e1f"
},
{ "key" : "primary_equation",
"description" : "Primary equation, have all data given.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "9e2b1d73b07f2f11"
},
{ "key" : "secondary_equation",
"description" : "The equation that depends (the velocity field) on the result of the primary equation.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "7f723e0b439bd7dc"
}]
},{
"id" : "e48c6f4952c4ab40",
"input_type" : "Record",
"name" : "Mesh",
"attributes" : {

},
"description" : "Record with mesh related data.",
"reducible_to_key" : "mesh_file",
"keys" : [
{ "key" : "mesh_file",
"description" : "Input file with mesh description.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "89a808b8e9515bf8"
},
{ "key" : "regions",
"description" : "List of additional region definitions not contained in the mesh.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "5985ba73963f9447"
},
{ "key" : "sets",
"description" : "List of region set definitions. There are three region sets implicitly defined:\n\n - ALL (all regions of the mesh)\n - BOUNDARY (all boundary regions)\n - and BULK (all bulk regions)",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "ed43a6296093cd75"
},
{ "key" : "partitioning",
"description" : "Parameters of mesh partitioning algorithms.\n",
"default" : { "type" : "value at declaration",
"value" : "any_neighboring" },
"type" : "b8ecfd26afbea6a"
}]
},{
"id" : "89a808b8e9515bf8",
"input_type" : "FileName",
"name" : "FileName_input",
"attributes" : {

},
"input_type" : "FileName",
"file_mode" : "input"
},{
"id" : "5985ba73963f9447",
"input_type" : "Array",
"name" : "array_of_Region",
"attributes" : {

},
"range" : [0, 4294967295],
"subtype" : "b9614d55a6c3462e"
},
{
"id" : "b9614d55a6c3462e",
"input_type" : "Record",
"name" : "Region",
"attributes" : {

},
"description" : "Definition of region of elements.",
"keys" : [
{ "key" : "name",
"description" : "Label (name) of the region. Has to be unique in one mesh.\n",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f"
},
{ "key" : "id",
"description" : "The ID of the region to which you assign label.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "151ce92d5201d44f"
},
{ "key" : "element_list",
"description" : "Specification of the region by the list of elements. This is not recomended",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "ccc88a2172d23cc3"
}]
},{
"id" : "151ce92d5201d44f",
"input_type" : "Integer",
"name" : "Integer",
"attributes" : {

},
"range" : [0, 2147483647]
},{
"id" : "ccc88a2172d23cc3",
"input_type" : "Array",
"name" : "array_of_Integer",
"attributes" : {

},
"range" : [0, 4294967295],
"subtype" : "151ce92d5201d44f"
},
{
"id" : "ed43a6296093cd75",
"input_type" : "Array",
"name" : "array_of_RegionSet",
"attributes" : {

},
"range" : [0, 4294967295],
"subtype" : "b9f7de6b7bbc0cdb"
},
{
"id" : "b9f7de6b7bbc0cdb",
"input_type" : "Record",
"name" : "RegionSet",
"attributes" : {

},
"description" : "Definition of one region set.",
"keys" : [
{ "key" : "name",
"description" : "Unique name of the region set.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f"
},
{ "key" : "region_ids",
"description" : "List of region ID numbers that has to be added to the region set.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "ccc88a2172d23cc3"
},
{ "key" : "region_labels",
"description" : "List of labels of the regions that has to be added to the region set.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "eee303f526b982ce"
},
{ "key" : "union",
"description" : "Defines region set as a union of given pair of sets. Overrides previous keys.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "eee3033466b9ffa2"
},
{ "key" : "intersection",
"description" : "Defines region set as an intersection of given pair of sets. Overrides previous keys.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "eee3033466b9ffa2"
},
{ "key" : "difference",
"description" : "Defines region set as a difference of given pair of sets. Overrides previous keys.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "eee3033466b9ffa2"
}]
},{
"id" : "eee303f526b982ce",
"input_type" : "Array",
"name" : "array_of_String",
"attributes" : {

},
"range" : [0, 4294967295],
"subtype" : "29b5533100b6f60f"
},
{
"id" : "eee3033466b9ffa2",
"input_type" : "Array",
"name" : "array_of_String",
"attributes" : {

},
"range" : [2, 2],
"subtype" : "29b5533100b6f60f"
},
{
"id" : "b8ecfd26afbea6a",
"input_type" : "Record",
"name" : "Partition",
"attributes" : {

},
"description" : "Setting for various types of mesh partitioning.",
"reducible_to_key" : "graph_type",
"keys" : [
{ "key" : "tool",
"description" : "Software package used for partitioning. See corresponding selection.",
"default" : { "type" : "value at declaration",
"value" : "METIS" },
"type" : "f9756fb2f66076a1"
},
{ "key" : "graph_type",
"description" : "Algorithm for generating graph and its weights from a multidimensional mesh.",
"default" : { "type" : "value at declaration",
"value" : "any_neighboring" },
"type" : "23a812d749635ca0"
}]
},{
"id" : "f9756fb2f66076a1",
"input_type" : "Selection",
"name" : "PartTool",
"attributes" : {

},
"description" : "Select the partitioning tool to use.",
"values" : [
{ "name" : "PETSc",
"description" : "Use PETSc interface to various partitioning tools." },
{ "name" : "METIS",
"description" : "Use direct interface to Metis." }]
},{
"id" : "23a812d749635ca0",
"input_type" : "Selection",
"name" : "GraphType",
"attributes" : {

},
"description" : "Different algorithms to make the sparse graph with weighted edges\nfrom the multidimensional mesh. Main difference is dealing with \nneighborings of elements of different dimension.",
"values" : [
{ "name" : "any_neighboring",
"description" : "Add edge for any pair of neighboring elements." },
{ "name" : "any_wight_lower_dim_cuts",
"description" : "Same as before and assign higher weight to cuts of lower dimension in order to make them stick to one face." },
{ "name" : "same_dimension_neghboring",
"description" : "Add edge for any pair of neighboring elements of same dimension (bad for matrix multiply)." }]
},{
"id" : "d8574f6af69c7e1f",
"input_type" : "Record",
"name" : "TimeGovernor",
"attributes" : {

},
"description" : "Setting of the simulation time. (can be specific to one equation)",
"reducible_to_key" : "max_dt",
"keys" : [
{ "key" : "start_time",
"description" : "Start time of the simulation.",
"default" : { "type" : "value at declaration",
"value" : 0.0 },
"type" : "47484ede475775e6"
},
{ "key" : "end_time",
"description" : "End time of the simulation.",
"default" : { "type" : "value at read time",
"value" : "Infinite end time." },
"type" : "47484ede475775e6"
},
{ "key" : "init_dt",
"description" : "Initial guess for the time step.\nOnly useful for equations that use adaptive time stepping.If set to 0.0, the time step is determined in fully autonomous way if the equation supports it.",
"default" : { "type" : "value at declaration",
"value" : 0.0 },
"type" : "6b1c4ede475775aa"
},
{ "key" : "min_dt",
"description" : "Soft lower limit for the time step. Equation using adaptive time stepping can notsuggest smaller time step, but actual time step could be smaller in order to match prescribed input or output times.",
"default" : { "type" : "value at read time",
"value" : "Machine precision." },
"type" : "6b1c4ede475775aa"
},
{ "key" : "max_dt",
"description" : "Hard upper limit for the time step. Actual length of the time step is also limitedby input and output times.",
"default" : { "type" : "value at read time",
"value" : "Whole time of the simulation if specified, infinity else." },
"type" : "6b1c4ede475775aa"
}]
},{
"id" : "47484ede475775e6",
"input_type" : "Double",
"name" : "Double",
"attributes" : {

},
"range" : [-1.79769e+308, 1.79769e+308]
},{
"id" : "6b1c4ede475775aa",
"input_type" : "Double",
"name" : "Double",
"attributes" : {

},
"range" : [0, 1.79769e+308]
},{
"id" : "9e2b1d73b07f2f11",
"input_type" : "Abstract",
"name" : "DarcyFlow",
"attributes" : {

},
"description" : "Darcy flow model. Abstraction of various porous media flow models.",
"implementations" : [
"17f6c8de8ff7f8ba",

"f807e470e85d8ff6",

"71f02a18e4a48229"]},{
"id" : "17f6c8de8ff7f8ba",
"input_type" : "Record",
"name" : "SteadyDarcy_MH",
"attributes" : {

},
"description" : "Mixed-Hybrid  solver for STEADY saturated Darcy flow.",
"implements" : [ "9e2b1d73b07f2f11" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "SteadyDarcy_MH" },
"type" : "29b5533100b6f60f"
},
{ "key" : "n_schurs",
"description" : "Number of Schur complements to perform when solving MH system.",
"default" : { "type" : "value at declaration",
"value" : 2 },
"type" : "151ce92dd201d44a"
},
{ "key" : "solver",
"description" : "Linear solver for MH problem.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "c1a4c8dc7000af80"
},
{ "key" : "output",
"description" : "Parameters of output form MH module.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "6d7801455eff08eb"
},
{ "key" : "mortar_method",
"description" : "Method for coupling Darcy flow between dimensions.",
"default" : { "type" : "value at declaration",
"value" : "None" },
"type" : "77e8d459d5c35386"
},
{ "key" : "balance",
"description" : "Settings for computing mass balance.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "7f74618c0b28d9cd"
},
{ "key" : "bc_piezo_head",
"description" : "Boundary condition for pressure as piezometric head.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "14425403876d6513"
},
{ "key" : "init_piezo_head",
"description" : "Initial condition for pressure as piezometric head.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "14425403876d6513"
},
{ "key" : "input_fields",
"description" : "",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "edac93c91d064bf6"
}]
},{
"id" : "151ce92dd201d44a",
"input_type" : "Integer",
"name" : "Integer",
"attributes" : {

},
"range" : [0, 2]
},{
"id" : "c1a4c8dc7000af80",
"input_type" : "Abstract",
"name" : "LinSys",
"attributes" : {

},
"description" : "Linear solver setting.",
"implementations" : [
"1463da0b439328b7",

"18cbaa6d264d2006"]},{
"id" : "1463da0b439328b7",
"input_type" : "Record",
"name" : "Petsc",
"attributes" : {

},
"description" : "Solver setting.",
"implements" : [ "c1a4c8dc7000af80" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "Petsc" },
"type" : "29b5533100b6f60f"
},
{ "key" : "r_tol",
"description" : "Relative residual tolerance (to initial error).",
"default" : { "type" : "value at declaration",
"value" : 1.0e-7 },
"type" : "ab1c4ede475775a9"
},
{ "key" : "max_it",
"description" : "Maximum number of outer iterations of the linear solver.",
"default" : { "type" : "value at declaration",
"value" : 10000 },
"type" : "151ce92d5201d44f"
},
{ "key" : "a_tol",
"description" : "Absolute residual tolerance.",
"default" : { "type" : "value at declaration",
"value" : 1.0e-9 },
"type" : "6b1c4ede475775aa"
},
{ "key" : "options",
"description" : "Options passed to PETSC before creating KSP instead of default setting.",
"default" : { "type" : "value at declaration",
"value" : "" },
"type" : "29b5533100b6f60f"
}]
},{
"id" : "ab1c4ede475775a9",
"input_type" : "Double",
"name" : "Double",
"attributes" : {

},
"range" : [0, 1]
},{
"id" : "18cbaa6d264d2006",
"input_type" : "Record",
"name" : "Bddc",
"attributes" : {

},
"description" : "Solver setting.",
"implements" : [ "c1a4c8dc7000af80" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "Bddc" },
"type" : "29b5533100b6f60f"
},
{ "key" : "r_tol",
"description" : "Relative residual tolerance (to initial error).",
"default" : { "type" : "value at declaration",
"value" : 1.0e-7 },
"type" : "ab1c4ede475775a9"
},
{ "key" : "max_it",
"description" : "Maximum number of outer iterations of the linear solver.",
"default" : { "type" : "value at declaration",
"value" : 10000 },
"type" : "151ce92d5201d44f"
},
{ "key" : "max_nondecr_it",
"description" : "Maximum number of iterations of the linear solver with non-decreasing residual.",
"default" : { "type" : "value at declaration",
"value" : 30 },
"type" : "151ce92d5201d44f"
},
{ "key" : "number_of_levels",
"description" : "Number of levels in the multilevel method (=2 for the standard BDDC).",
"default" : { "type" : "value at declaration",
"value" : 2 },
"type" : "151ce92d5201d44f"
},
{ "key" : "use_adaptive_bddc",
"description" : "Use adaptive selection of constraints in BDDCML.",
"default" : { "type" : "value at declaration",
"value" : false },
"type" : "282546d52edd4"
},
{ "key" : "bddcml_verbosity_level",
"description" : "Level of verbosity of the BDDCML library:\n\n - 0 - no output\n - 1 - mild output\n - 2 - detailed output.",
"default" : { "type" : "value at declaration",
"value" : 0 },
"type" : "151ce92dd201d44a"
}]
},{
"id" : "282546d52edd4",
"input_type" : "Bool",
"name" : "Bool",
"attributes" : {

}},{
"id" : "6d7801455eff08eb",
"input_type" : "Record",
"name" : "DarcyMHOutput",
"attributes" : {

},
"description" : "Parameters of MH output.",
"keys" : [
{ "key" : "output_stream",
"description" : "Parameters of output stream.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "7f7b2caffb3e4eb6"
},
{ "key" : "output_fields",
"description" : "List of fields to write to output file.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "f53507a11c4fcf3c"
},
{ "key" : "compute_errors",
"description" : "SPECIAL PURPOSE. Computing errors pro non-compatible coupling.",
"default" : { "type" : "value at declaration",
"value" : false },
"type" : "282546d52edd4"
},
{ "key" : "raw_flow_output",
"description" : "Output file with raw data form MH module.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "5c42d5b72cb92ff"
}]
},{
"id" : "7f7b2caffb3e4eb6",
"input_type" : "Record",
"name" : "OutputStream",
"attributes" : {

},
"description" : "Parameters of output.",
"keys" : [
{ "key" : "file",
"description" : "File path to the connected output file.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "5c42d5b72cb92ff"
},
{ "key" : "format",
"description" : "Format of output stream and possible parameters.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "b5bab0602a8c014a"
},
{ "key" : "time_step",
"description" : "Time interval between outputs.\nRegular grid of output time points starts at the initial time of the equation and ends at the end time which must be specified.\nThe start time and the end time are always added. ",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "6b1c4ede475775aa"
},
{ "key" : "time_list",
"description" : "Explicit array of output time points (can be combined with 'time_step'.",
"default" : { "type" : "value at read time",
"value" : "List containing the initial time of the equation. \n You can prescribe an empty list to override this behavior." },
"type" : "ae4d15413e119e57"
},
{ "key" : "add_input_times",
"description" : "Add all input time points of the equation, mentioned in the 'input_fields' list, also as the output points.",
"default" : { "type" : "value at declaration",
"value" : false },
"type" : "282546d52edd4"
}]
},{
"id" : "5c42d5b72cb92ff",
"input_type" : "FileName",
"name" : "FileName_output",
"attributes" : {

},
"input_type" : "FileName",
"file_mode" : "output"
},{
"id" : "b5bab0602a8c014a",
"input_type" : "Abstract",
"name" : "OutputTime",
"attributes" : {

},
"description" : "Format of output stream and possible parameters.",
"implementations" : [
"1009656f0fdba064",

"16dc0497b993cc8"]},{
"id" : "1009656f0fdba064",
"input_type" : "Record",
"name" : "vtk",
"attributes" : {

},
"description" : "Parameters of vtk output format.",
"implements" : [ "b5bab0602a8c014a" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "vtk" },
"type" : "29b5533100b6f60f"
},
{ "key" : "variant",
"description" : "Variant of output stream file format.",
"default" : { "type" : "value at declaration",
"value" : "ascii" },
"type" : "1b5802ce6b78beab"
},
{ "key" : "parallel",
"description" : "Parallel or serial version of file format.",
"default" : { "type" : "value at declaration",
"value" : false },
"type" : "282546d52edd4"
},
{ "key" : "compression",
"description" : "Compression used in output stream file format.",
"default" : { "type" : "value at declaration",
"value" : "none" },
"type" : "7127cbcf4491394b"
}]
},{
"id" : "1b5802ce6b78beab",
"input_type" : "Selection",
"name" : "VTK variant (ascii or binary)",
"attributes" : {

},
"description" : "",
"values" : [
{ "name" : "ascii",
"description" : "ASCII variant of VTK file format" },
{ "name" : "binary",
"description" : "Binary variant of VTK file format (not supported yet)" }]
},{
"id" : "7127cbcf4491394b",
"input_type" : "Selection",
"name" : "Type of compression of VTK file format",
"attributes" : {

},
"description" : "",
"values" : [
{ "name" : "none",
"description" : "Data in VTK file format are not compressed" },
{ "name" : "zlib",
"description" : "Data in VTK file format are compressed using zlib (not supported yet)" }]
},{
"id" : "16dc0497b993cc8",
"input_type" : "Record",
"name" : "gmsh",
"attributes" : {

},
"description" : "Parameters of gmsh output format.",
"implements" : [ "b5bab0602a8c014a" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "gmsh" },
"type" : "29b5533100b6f60f"
}]
},{
"id" : "ae4d15413e119e57",
"input_type" : "Array",
"name" : "array_of_Double",
"attributes" : {

},
"range" : [0, 4294967295],
"subtype" : "6b1c4ede475775aa"
},
{
"id" : "f53507a11c4fcf3c",
"input_type" : "Array",
"name" : "array_of_DarcyFlowMH_output_fields",
"attributes" : {

},
"range" : [0, 4294967295],
"subtype" : "810957a0854161be"
},
{
"id" : "810957a0854161be",
"input_type" : "Selection",
"name" : "DarcyFlowMH_output_fields",
"attributes" : {

},
"description" : "Selection of output fields for Darcy Flow MH model.",
"values" : [
{ "name" : "anisotropy",
"description" : "Output of the field anisotropy (($[-]$)) (Anisotropy of the conductivity tensor.)." },
{ "name" : "cross_section",
"description" : "Output of the field cross_section (($[m^{3-d}]$)) (Complement dimension parameter (cross section for 1D, thickness for 2D).)." },
{ "name" : "conductivity",
"description" : "Output of the field conductivity (($[ms^{-1}]$)) (Isotropic conductivity scalar.)." },
{ "name" : "sigma",
"description" : "Output of the field sigma (($[-]$)) (Transition coefficient between dimensions.)." },
{ "name" : "water_source_density",
"description" : "Output of the field water_source_density (($[s^{-1}]$)) (Water source density.)." },
{ "name" : "init_pressure",
"description" : "Output of the field init_pressure (($[m]$)) (Initial condition as pressure)." },
{ "name" : "storativity",
"description" : "Output of the field storativity (($[m^{-1}]$)) (Storativity.)." },
{ "name" : "pressure_p0",
"description" : "Output of the field pressure_p0 (($[m]$))." },
{ "name" : "pressure_p1",
"description" : "Output of the field pressure_p1 (($[m]$))." },
{ "name" : "piezo_head_p0",
"description" : "Output of the field piezo_head_p0 (($[m]$))." },
{ "name" : "velocity_p0",
"description" : "Output of the field velocity_p0 (($[ms^{-1}]$))." },
{ "name" : "subdomain",
"description" : "Output of the field subdomain (($[-]$))." },
{ "name" : "region_id",
"description" : "Output of the field region_id (($[-]$))." },
{ "name" : "pressure_diff",
"description" : "Output of the field pressure_diff (($[m]$))." },
{ "name" : "velocity_diff",
"description" : "Output of the field velocity_diff (($[ms^{-1}]$))." },
{ "name" : "div_diff",
"description" : "Output of the field div_diff (($[s^{-1}]$))." }]
},{
"id" : "77e8d459d5c35386",
"input_type" : "Selection",
"name" : "MH_MortarMethod",
"attributes" : {

},
"description" : "",
"values" : [
{ "name" : "None",
"description" : "Mortar space: P0 on elements of lower dimension." },
{ "name" : "P0",
"description" : "Mortar space: P0 on elements of lower dimension." },
{ "name" : "P1",
"description" : "Mortar space: P1 on intersections, using non-conforming pressures." }]
},{
"id" : "7f74618c0b28d9cd",
"input_type" : "Record",
"name" : "Balance",
"attributes" : {

},
"description" : "Balance of a conservative quantity, boundary fluxes and sources.",
"reducible_to_key" : "balance_on",
"keys" : [
{ "key" : "balance_on",
"description" : "Balance is computed if the value is true.",
"default" : { "type" : "value at declaration",
"value" : true },
"type" : "282546d52edd4"
},
{ "key" : "format",
"description" : "Format of output file.",
"default" : { "type" : "value at declaration",
"value" : "txt" },
"type" : "c4f9fd44881c5c15"
},
{ "key" : "cumulative",
"description" : "Compute cumulative balance over time. If true, then balance is calculated at each computational time step, which can slow down the program.",
"default" : { "type" : "value at declaration",
"value" : false },
"type" : "282546d52edd4"
},
{ "key" : "file",
"description" : "File name for output of balance.",
"default" : { "type" : "value at read time",
"value" : "FileName balance.*" },
"type" : "5c42d5b72cb92ff"
}]
},{
"id" : "c4f9fd44881c5c15",
"input_type" : "Selection",
"name" : "Balance_output_format",
"attributes" : {

},
"description" : "Format of output file for balance.",
"values" : [
{ "name" : "legacy",
"description" : "Legacy format used by previous program versions." },
{ "name" : "txt",
"description" : "Excel format with tab delimiter." },
{ "name" : "gnuplot",
"description" : "Format compatible with GnuPlot datafile with fixed column width." }]
},{
"id" : "14425403876d6513",
"input_type" : "Abstract",
"name" : "Field:R3 -> R",
"attributes" : {
"generic_type" : "6f02db21b62f8e72",
"parameters" : [{ "element_input_type" : "47484ede475775e6" }]
},
"description" : "Abstract for all time-space functions.",
"default_descendant" : "a761e63ec568f3bc",
"implementations" : [
"a761e63ec568f3bc",

"17c6c451301625df",

"70e526eeecea0442",

"d054fa5ea25a415c",

"c5d114a5b2bd5198"]},{
"id" : "a761e63ec568f3bc",
"input_type" : "Record",
"name" : "FieldConstant",
"attributes" : {
"generic_type" : "9fcdfb05285769ac",
"parameters" : [{ "element_input_type" : "47484ede475775e6" }]
},
"description" : "R3 -> R Field constant in space.",
"implements" : [ "14425403876d6513" ],
"reducible_to_key" : "value",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldConstant" },
"type" : "29b5533100b6f60f"
},
{ "key" : "value",
"description" : "Value of the constant field.\nFor vector values, you can use scalar value to enter constant vector.\nFor square (($N\\times N$))-matrix values, you can use:\n - vector of size (($N$)) to enter diagonal matrix\n\n - vector of size (($\\frac12N(N+1)$)) to enter symmetric matrix (upper triangle, row by row)\n - scalar to enter multiple of the unit matrix.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "47484ede475775e6"
}]
},{
"id" : "17c6c451301625df",
"input_type" : "Record",
"name" : "FieldPython",
"attributes" : {
"generic_type" : "934ea47ec9ed8e72",
"parameters" : []
},
"description" : "R3 -> R Field given by a Python script.",
"implements" : [ "14425403876d6513", "d6568d45437d9649", "5d19ae274ffe7bdc" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldPython" },
"type" : "29b5533100b6f60f"
},
{ "key" : "script_string",
"description" : "Python script given as in place string",
"default" : { "type" : "value at read time",
"value" : "Obligatory if 'script_file' is not given." },
"type" : "29b5533100b6f60f"
},
{ "key" : "script_file",
"description" : "Python script given as external file",
"default" : { "type" : "value at read time",
"value" : "Obligatory if 'script_striong' is not given." },
"type" : "89a808b8e9515bf8"
},
{ "key" : "function",
"description" : "Function in the given script that returns tuple containing components of the return type.\nFor NxM tensor values: tensor(row,col) = tuple( M*row + col ).",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f"
}]
},{
"id" : "70e526eeecea0442",
"input_type" : "Record",
"name" : "FieldFormula",
"attributes" : {
"generic_type" : "e2a681acf463efa4",
"parameters" : []
},
"description" : "R3 -> R Field given by runtime interpreted formula.",
"implements" : [ "14425403876d6513", "d6568d45437d9649", "5d19ae274ffe7bdc" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldFormula" },
"type" : "29b5533100b6f60f"
},
{ "key" : "value",
"description" : "String, array of strings, or matrix of strings with formulas for individual entries of scalar, vector, or tensor value respectively.\nFor vector values, you can use just one string to enter homogeneous vector.\nFor square (($N\\times N$))-matrix values, you can use:\n\n - array of strings of size (($N$)) to enter diagonal matrix\n - array of strings of size (($\\frac12N(N+1)$)) to enter symmetric matrix (upper triangle, row by row)\n - just one string to enter (spatially variable) multiple of the unit matrix.\nFormula can contain variables ```x,y,z,t``` and usual operators and functions.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f"
}]
},{
"id" : "d054fa5ea25a415c",
"input_type" : "Record",
"name" : "FieldElementwise",
"attributes" : {
"generic_type" : "93768943588374c9",
"parameters" : []
},
"description" : "R3 -> R Field constant in space.",
"implements" : [ "14425403876d6513", "d6568d45437d9649", "5d19ae274ffe7bdc" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldElementwise" },
"type" : "29b5533100b6f60f"
},
{ "key" : "gmsh_file",
"description" : "Input file with ASCII GMSH file format.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "89a808b8e9515bf8"
},
{ "key" : "field_name",
"description" : "The values of the Field are read from the ```$ElementData``` section with field name given by this key.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f"
}]
},{
"id" : "c5d114a5b2bd5198",
"input_type" : "Record",
"name" : "FieldInterpolatedP0",
"attributes" : {
"generic_type" : "523b5fc3fc537355",
"parameters" : []
},
"description" : "R3 -> R Field constant in space.",
"implements" : [ "14425403876d6513", "d6568d45437d9649", "5d19ae274ffe7bdc" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldInterpolatedP0" },
"type" : "29b5533100b6f60f"
},
{ "key" : "gmsh_file",
"description" : "Input file with ASCII GMSH file format.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "89a808b8e9515bf8"
},
{ "key" : "field_name",
"description" : "The values of the Field are read from the ```$ElementData``` section with field name given by this key.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f"
}]
},{
"id" : "edac93c91d064bf6",
"input_type" : "Array",
"name" : "array_of_DarcyFlowMH_Data",
"attributes" : {

},
"range" : [0, 4294967295],
"subtype" : "dea1cea4f264f2"
},
{
"id" : "dea1cea4f264f2",
"input_type" : "Record",
"name" : "DarcyFlowMH_Data",
"attributes" : {

},
"description" : "Record to set fields of the equation.\nThe fields are set only on the domain specified by one of the keys: 'region', 'rid'\nand after the time given by the key 'time'. The field setting can be overridden by\n any DarcyFlowMH_Data record that comes later in the boundary data array.",
"keys" : [
{ "key" : "region",
"description" : "Label of the region where to set fields. ",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "29b5533100b6f60f"
},
{ "key" : "rid",
"description" : "ID of the region where to set fields.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "151ce92d5201d44f"
},
{ "key" : "time",
"description" : "Apply field setting in this record after this time.\nThese times have to form an increasing sequence.",
"default" : { "type" : "value at declaration",
"value" : 0.0 },
"type" : "6b1c4ede475775aa"
},
{ "key" : "anisotropy",
"description" : "Anisotropy of the conductivity tensor. (($[-]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "84c4aca1a18d8fef"
},
{ "key" : "cross_section",
"description" : "Complement dimension parameter (cross section for 1D, thickness for 2D). (($[m^{3-d}]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "14425403876d6513"
},
{ "key" : "conductivity",
"description" : "Isotropic conductivity scalar. (($[ms^{-1}]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "14425403876d6513"
},
{ "key" : "sigma",
"description" : "Transition coefficient between dimensions. (($[-]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "14425403876d6513"
},
{ "key" : "water_source_density",
"description" : "Water source density. (($[s^{-1}]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "14425403876d6513"
},
{ "key" : "bc_type",
"description" : "Boundary condition type, possible values: (($[-]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "d6568d45437d9649"
},
{ "key" : "bc_pressure",
"description" : "Prescribed pressure value for bc_type=\"dirichlet\" or reference pressure for bc_type=\"total_flux\". (($[m]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "14425403876d6513"
},
{ "key" : "bc_flux",
"description" : "Incoming flux in total flux boundary condition. (($[m^{4-d}s^{-1}]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "14425403876d6513"
},
{ "key" : "bc_robin_sigma",
"description" : "Conductivity coefficient in total flux boundary condition. (($[m^{3-d}s^{-1}]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "14425403876d6513"
},
{ "key" : "init_pressure",
"description" : "Initial condition as pressure (($[m]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "14425403876d6513"
},
{ "key" : "storativity",
"description" : "Storativity. (($[m^{-1}]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "14425403876d6513"
},
{ "key" : "bc_piezo_head",
"description" : "Boundary condition for pressure as piezometric head.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "14425403876d6513"
},
{ "key" : "init_piezo_head",
"description" : "Initial condition for pressure as piezometric head.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "14425403876d6513"
}]
},{
"id" : "84c4aca1a18d8fef",
"input_type" : "Abstract",
"name" : "Field:R3 -> R[3,3]",
"attributes" : {
"generic_type" : "f335e92baa7337c2",
"parameters" : [{ "element_input_type" : "47484ede475775e6" }]
},
"description" : "Abstract for all time-space functions.",
"default_descendant" : "47207c0cbbc6a079",
"implementations" : [
"47207c0cbbc6a079",

"54ee01183de0167a",

"2190772c0f39e2ec",

"1fd06b2902227dd5",

"76ca8894b9991790"]},{
"id" : "47207c0cbbc6a079",
"input_type" : "Record",
"name" : "FieldConstant",
"attributes" : {
"generic_type" : "1c38f891cb73ab4a",
"parameters" : [{ "element_input_type" : "47484ede475775e6" }]
},
"description" : "R3 -> R[3,3] Field constant in space.",
"implements" : [ "84c4aca1a18d8fef" ],
"reducible_to_key" : "value",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldConstant" },
"type" : "29b5533100b6f60f"
},
{ "key" : "value",
"description" : "Value of the constant field.\nFor vector values, you can use scalar value to enter constant vector.\nFor square (($N\\times N$))-matrix values, you can use:\n - vector of size (($N$)) to enter diagonal matrix\n\n - vector of size (($\\frac12N(N+1)$)) to enter symmetric matrix (upper triangle, row by row)\n - scalar to enter multiple of the unit matrix.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "10b698e6b5346dc5"
}]
},{
"id" : "10b698e6b5346dc5",
"input_type" : "Array",
"name" : "array_of_array_of_Double",
"attributes" : {
"generic_type" : "9bfa4bcd4482892d",
"parameters" : [{ "element_input_type" : "47484ede475775e6" }]
},
"range" : [1, 4294967295],
"subtype" : "a2222959b05d21d7"
},
{
"id" : "a2222959b05d21d7",
"input_type" : "Array",
"name" : "array_of_Double",
"attributes" : {
"generic_type" : "f6b8a797184314b0",
"parameters" : [{ "element_input_type" : "47484ede475775e6" }]
},
"range" : [1, 4294967295],
"subtype" : "47484ede475775e6"
},
{
"id" : "54ee01183de0167a",
"input_type" : "Record",
"name" : "FieldPython",
"attributes" : {
"generic_type" : "cae1d1e8ecf835dd",
"parameters" : []
},
"description" : "R3 -> R[3,3] Field given by a Python script.",
"implements" : [ "84c4aca1a18d8fef" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldPython" },
"type" : "29b5533100b6f60f"
},
{ "key" : "script_string",
"description" : "Python script given as in place string",
"default" : { "type" : "value at read time",
"value" : "Obligatory if 'script_file' is not given." },
"type" : "29b5533100b6f60f"
},
{ "key" : "script_file",
"description" : "Python script given as external file",
"default" : { "type" : "value at read time",
"value" : "Obligatory if 'script_striong' is not given." },
"type" : "89a808b8e9515bf8"
},
{ "key" : "function",
"description" : "Function in the given script that returns tuple containing components of the return type.\nFor NxM tensor values: tensor(row,col) = tuple( M*row + col ).",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f"
}]
},{
"id" : "2190772c0f39e2ec",
"input_type" : "Record",
"name" : "FieldFormula",
"attributes" : {
"generic_type" : "112f175739e3d939",
"parameters" : []
},
"description" : "R3 -> R[3,3] Field given by runtime interpreted formula.",
"implements" : [ "84c4aca1a18d8fef" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldFormula" },
"type" : "29b5533100b6f60f"
},
{ "key" : "value",
"description" : "String, array of strings, or matrix of strings with formulas for individual entries of scalar, vector, or tensor value respectively.\nFor vector values, you can use just one string to enter homogeneous vector.\nFor square (($N\\times N$))-matrix values, you can use:\n\n - array of strings of size (($N$)) to enter diagonal matrix\n - array of strings of size (($\\frac12N(N+1)$)) to enter symmetric matrix (upper triangle, row by row)\n - just one string to enter (spatially variable) multiple of the unit matrix.\nFormula can contain variables ```x,y,z,t``` and usual operators and functions.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "6f683e0e03a3033f"
}]
},{
"id" : "6f683e0e03a3033f",
"input_type" : "Array",
"name" : "array_of_array_of_String",
"attributes" : {
"generic_type" : "9c087d0fc10f3910",
"parameters" : []
},
"range" : [1, 4294967295],
"subtype" : "d19be81bbf578686"
},
{
"id" : "d19be81bbf578686",
"input_type" : "Array",
"name" : "array_of_String",
"attributes" : {
"generic_type" : "ee2d78fdcbf9fa6a",
"parameters" : []
},
"range" : [1, 4294967295],
"subtype" : "29b5533100b6f60f"
},
{
"id" : "1fd06b2902227dd5",
"input_type" : "Record",
"name" : "FieldElementwise",
"attributes" : {
"generic_type" : "eca02c9b2026bd24",
"parameters" : []
},
"description" : "R3 -> R[3,3] Field constant in space.",
"implements" : [ "84c4aca1a18d8fef" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldElementwise" },
"type" : "29b5533100b6f60f"
},
{ "key" : "gmsh_file",
"description" : "Input file with ASCII GMSH file format.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "89a808b8e9515bf8"
},
{ "key" : "field_name",
"description" : "The values of the Field are read from the ```$ElementData``` section with field name given by this key.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f"
}]
},{
"id" : "76ca8894b9991790",
"input_type" : "Record",
"name" : "FieldInterpolatedP0",
"attributes" : {
"generic_type" : "21a34060aca62e47",
"parameters" : []
},
"description" : "R3 -> R[3,3] Field constant in space.",
"implements" : [ "84c4aca1a18d8fef" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldInterpolatedP0" },
"type" : "29b5533100b6f60f"
},
{ "key" : "gmsh_file",
"description" : "Input file with ASCII GMSH file format.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "89a808b8e9515bf8"
},
{ "key" : "field_name",
"description" : "The values of the Field are read from the ```$ElementData``` section with field name given by this key.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f"
}]
},{
"id" : "d6568d45437d9649",
"input_type" : "Abstract",
"name" : "Field:R3 -> R",
"attributes" : {
"generic_type" : "6f02db21b62f8e72",
"parameters" : [{ "element_input_type" : "42de0250b002ffa1" }]
},
"description" : "Abstract for all time-space functions.",
"default_descendant" : "27833e890df4c02d",
"implementations" : [
"27833e890df4c02d",

"17c6c451301625df",

"70e526eeecea0442",

"d054fa5ea25a415c",

"c5d114a5b2bd5198"]},{
"id" : "27833e890df4c02d",
"input_type" : "Record",
"name" : "FieldConstant",
"attributes" : {
"generic_type" : "9fcdfb05285769ac",
"parameters" : [{ "element_input_type" : "42de0250b002ffa1" }]
},
"description" : "R3 -> R Field constant in space.",
"implements" : [ "d6568d45437d9649" ],
"reducible_to_key" : "value",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldConstant" },
"type" : "29b5533100b6f60f"
},
{ "key" : "value",
"description" : "Value of the constant field.\nFor vector values, you can use scalar value to enter constant vector.\nFor square (($N\\times N$))-matrix values, you can use:\n - vector of size (($N$)) to enter diagonal matrix\n\n - vector of size (($\\frac12N(N+1)$)) to enter symmetric matrix (upper triangle, row by row)\n - scalar to enter multiple of the unit matrix.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "42de0250b002ffa1"
}]
},{
"id" : "42de0250b002ffa1",
"input_type" : "Selection",
"name" : "DarcyFlow_BC_Type",
"attributes" : {

},
"description" : "",
"values" : [
{ "name" : "none",
"description" : "Homogeneous Neumann boundary condition. Zero flux" },
{ "name" : "dirichlet",
"description" : "Dirichlet boundary condition. Specify the pressure head through the 'bc_pressure' field or the piezometric head through the 'bc_piezo_head' field." },
{ "name" : "total_flux",
"description" : "Flux boundary condition (combines Neumann and Robin type). Water inflow equal to (($q^N + \\sigma (h^R - h)$)). Specify the water inflow by the 'bc_flux' field, the transition coefficient by 'bc_robin_sigma' and the reference pressure head or pieozmetric head through 'bc_pressure' or 'bc_piezo_head' respectively." }]
},{
"id" : "f807e470e85d8ff6",
"input_type" : "Record",
"name" : "UnsteadyDarcy_MH",
"attributes" : {

},
"description" : "Mixed-Hybrid solver for unsteady saturated Darcy flow.",
"implements" : [ "9e2b1d73b07f2f11" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "UnsteadyDarcy_MH" },
"type" : "29b5533100b6f60f"
},
{ "key" : "n_schurs",
"description" : "Number of Schur complements to perform when solving MH system.",
"default" : { "type" : "value at declaration",
"value" : 2 },
"type" : "151ce92dd201d44a"
},
{ "key" : "solver",
"description" : "Linear solver for MH problem.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "c1a4c8dc7000af80"
},
{ "key" : "output",
"description" : "Parameters of output form MH module.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "6d7801455eff08eb"
},
{ "key" : "mortar_method",
"description" : "Method for coupling Darcy flow between dimensions.",
"default" : { "type" : "value at declaration",
"value" : "None" },
"type" : "77e8d459d5c35386"
},
{ "key" : "balance",
"description" : "Settings for computing mass balance.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "7f74618c0b28d9cd"
},
{ "key" : "bc_piezo_head",
"description" : "Boundary condition for pressure as piezometric head.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "14425403876d6513"
},
{ "key" : "init_piezo_head",
"description" : "Initial condition for pressure as piezometric head.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "14425403876d6513"
},
{ "key" : "input_fields",
"description" : "",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "edac93c91d064bf6"
},
{ "key" : "time",
"description" : "Time governor setting for the unsteady Darcy flow model.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "d8574f6af69c7e1f"
}]
},{
"id" : "71f02a18e4a48229",
"input_type" : "Record",
"name" : "UnsteadyDarcy_LMH",
"attributes" : {

},
"description" : "Lumped Mixed-Hybrid solver for unsteady saturated Darcy flow.",
"implements" : [ "9e2b1d73b07f2f11" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "UnsteadyDarcy_LMH" },
"type" : "29b5533100b6f60f"
},
{ "key" : "n_schurs",
"description" : "Number of Schur complements to perform when solving MH system.",
"default" : { "type" : "value at declaration",
"value" : 2 },
"type" : "151ce92dd201d44a"
},
{ "key" : "solver",
"description" : "Linear solver for MH problem.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "c1a4c8dc7000af80"
},
{ "key" : "output",
"description" : "Parameters of output form MH module.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "6d7801455eff08eb"
},
{ "key" : "mortar_method",
"description" : "Method for coupling Darcy flow between dimensions.",
"default" : { "type" : "value at declaration",
"value" : "None" },
"type" : "77e8d459d5c35386"
},
{ "key" : "balance",
"description" : "Settings for computing mass balance.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "7f74618c0b28d9cd"
},
{ "key" : "bc_piezo_head",
"description" : "Boundary condition for pressure as piezometric head.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "14425403876d6513"
},
{ "key" : "init_piezo_head",
"description" : "Initial condition for pressure as piezometric head.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "14425403876d6513"
},
{ "key" : "input_fields",
"description" : "",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "edac93c91d064bf6"
},
{ "key" : "time",
"description" : "Time governor setting for the unsteady Darcy flow model.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "d8574f6af69c7e1f"
}]
},{
"id" : "7f723e0b439bd7dc",
"input_type" : "Abstract",
"name" : "Transport",
"attributes" : {

},
"description" : "Secondary equation for transport of substances or heat transfer.",
"implementations" : [
"6c910bc5e72edf65",

"110fbca2b90f4c59"]},{
"id" : "6c910bc5e72edf65",
"input_type" : "Record",
"name" : "Transport_OS",
"attributes" : {

},
"description" : "Transport by convection and/or diffusion\ncoupled with reaction and adsorption model (ODE per element)\n via operator splitting.",
"implements" : [ "7f723e0b439bd7dc" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "Transport_OS" },
"type" : "29b5533100b6f60f"
},
{ "key" : "time",
"description" : "Time governor setting for the secondary equation.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "d8574f6af69c7e1f"
},
{ "key" : "balance",
"description" : "Settings for computing balance.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "7f74618c0b28d9cd"
},
{ "key" : "output_stream",
"description" : "Parameters of output stream.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "7f7b2caffb3e4eb6"
},
{ "key" : "substances",
"description" : "Specification of transported substances.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "57a7a5e1a86f46b8"
},
{ "key" : "transport",
"description" : "Type of numerical method for solute transport.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "805ff9f323a046c"
},
{ "key" : "reaction_term",
"description" : "Reaction model involved in transport.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "5572a5ae3e4d7aa6"
}]
},{
"id" : "57a7a5e1a86f46b8",
"input_type" : "Array",
"name" : "array_of_Substance",
"attributes" : {

},
"range" : [1, 4294967295],
"subtype" : "bb8ed616e3e5a7f6"
},
{
"id" : "bb8ed616e3e5a7f6",
"input_type" : "Record",
"name" : "Substance",
"attributes" : {

},
"description" : "Chemical substance.",
"reducible_to_key" : "name",
"keys" : [
{ "key" : "name",
"description" : "Name of the substance.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f"
},
{ "key" : "molar_mass",
"description" : "Molar mass of the substance [kg/mol].",
"default" : { "type" : "value at declaration",
"value" : 1 },
"type" : "6b1c4ede475775aa"
}]
},{
"id" : "805ff9f323a046c",
"input_type" : "Abstract",
"name" : "Transport",
"attributes" : {

},
"description" : "Transport of substances.",
"implementations" : [
"573f79f5bb93957d",

"1cef21bcdf79098"]},{
"id" : "573f79f5bb93957d",
"input_type" : "Record",
"name" : "Convection_FV",
"attributes" : {

},
"description" : "Explicit in time finite volume method for solute transport.",
"implements" : [ "805ff9f323a046c" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "Convection_FV" },
"type" : "29b5533100b6f60f"
},
{ "key" : "input_fields",
"description" : "",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "c8fb16d26a9a8e71"
},
{ "key" : "output_fields",
"description" : "List of fields to write to output file.",
"default" : { "type" : "value at declaration",
"value" : "conc" },
"type" : "fef8ccd368465268"
}]
},{
"id" : "c8fb16d26a9a8e71",
"input_type" : "Array",
"name" : "array_of_Convection_FV_Data",
"attributes" : {

},
"range" : [0, 4294967295],
"subtype" : "bfc8ed8983b3552a"
},
{
"id" : "bfc8ed8983b3552a",
"input_type" : "Record",
"name" : "Convection_FV_Data",
"attributes" : {

},
"description" : "Record to set fields of the equation.\nThe fields are set only on the domain specified by one of the keys: 'region', 'rid'\nand after the time given by the key 'time'. The field setting can be overridden by\n any Convection_FV_Data record that comes later in the boundary data array.",
"keys" : [
{ "key" : "region",
"description" : "Label of the region where to set fields. ",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "29b5533100b6f60f"
},
{ "key" : "rid",
"description" : "ID of the region where to set fields.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "151ce92d5201d44f"
},
{ "key" : "time",
"description" : "Apply field setting in this record after this time.\nThese times have to form an increasing sequence.",
"default" : { "type" : "value at declaration",
"value" : 0.0 },
"type" : "6b1c4ede475775aa"
},
{ "key" : "porosity",
"description" : "Mobile porosity (($[-]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "14425403876d6513"
},
{ "key" : "sources_density",
"description" : "Density of concentration sources. (($[m^{-3}kgs^{-1}]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "74d76bcb360d5504"
},
{ "key" : "sources_sigma",
"description" : "Concentration flux. (($[s^{-1}]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "74d76bcb360d5504"
},
{ "key" : "sources_conc",
"description" : "Concentration sources threshold. (($[m^{-3}kg]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "74d76bcb360d5504"
},
{ "key" : "bc_conc",
"description" : "Boundary conditions for concentrations. (($[m^{-3}kg]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "74d76bcb360d5504"
},
{ "key" : "init_conc",
"description" : "Initial concentrations. (($[m^{-3}kg]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "f5861df409aa8b44"
}]
},{
"id" : "74d76bcb360d5504",
"input_type" : "Abstract",
"name" : "Field:R3 -> R[n]",
"attributes" : {
"generic_type" : "d21385d6b7068e57",
"parameters" : [{ "element_input_type" : "47484ede475775e6" }]
},
"description" : "Abstract for all time-space functions.",
"default_descendant" : "28b482431d324436",
"implementations" : [
"28b482431d324436",

"43e93e573c8b4de7",

"88b875766a38f97b",

"dba72848e2628853",

"71c61a5bf9d819fd"]},{
"id" : "28b482431d324436",
"input_type" : "Record",
"name" : "FieldConstant",
"attributes" : {
"generic_type" : "e3c18513384f1891",
"parameters" : [{ "element_input_type" : "47484ede475775e6" }]
},
"description" : "R3 -> R[n] Field constant in space.",
"implements" : [ "74d76bcb360d5504" ],
"reducible_to_key" : "value",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldConstant" },
"type" : "29b5533100b6f60f"
},
{ "key" : "value",
"description" : "Value of the constant field.\nFor vector values, you can use scalar value to enter constant vector.\nFor square (($N\\times N$))-matrix values, you can use:\n - vector of size (($N$)) to enter diagonal matrix\n\n - vector of size (($\\frac12N(N+1)$)) to enter symmetric matrix (upper triangle, row by row)\n - scalar to enter multiple of the unit matrix.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "a2222959b05d21d7"
}]
},{
"id" : "43e93e573c8b4de7",
"input_type" : "Record",
"name" : "FieldPython",
"attributes" : {
"generic_type" : "d2deec5b353d1ae",
"parameters" : []
},
"description" : "R3 -> R[n] Field given by a Python script.",
"implements" : [ "74d76bcb360d5504", "bc019add3460f774", "ac30b9b4e73cad12" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldPython" },
"type" : "29b5533100b6f60f"
},
{ "key" : "script_string",
"description" : "Python script given as in place string",
"default" : { "type" : "value at read time",
"value" : "Obligatory if 'script_file' is not given." },
"type" : "29b5533100b6f60f"
},
{ "key" : "script_file",
"description" : "Python script given as external file",
"default" : { "type" : "value at read time",
"value" : "Obligatory if 'script_striong' is not given." },
"type" : "89a808b8e9515bf8"
},
{ "key" : "function",
"description" : "Function in the given script that returns tuple containing components of the return type.\nFor NxM tensor values: tensor(row,col) = tuple( M*row + col ).",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f"
}]
},{
"id" : "88b875766a38f97b",
"input_type" : "Record",
"name" : "FieldFormula",
"attributes" : {
"generic_type" : "bbc24b85ba97509",
"parameters" : []
},
"description" : "R3 -> R[n] Field given by runtime interpreted formula.",
"implements" : [ "74d76bcb360d5504", "bc019add3460f774", "ac30b9b4e73cad12" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldFormula" },
"type" : "29b5533100b6f60f"
},
{ "key" : "value",
"description" : "String, array of strings, or matrix of strings with formulas for individual entries of scalar, vector, or tensor value respectively.\nFor vector values, you can use just one string to enter homogeneous vector.\nFor square (($N\\times N$))-matrix values, you can use:\n\n - array of strings of size (($N$)) to enter diagonal matrix\n - array of strings of size (($\\frac12N(N+1)$)) to enter symmetric matrix (upper triangle, row by row)\n - just one string to enter (spatially variable) multiple of the unit matrix.\nFormula can contain variables ```x,y,z,t``` and usual operators and functions.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "d19be81bbf578686"
}]
},{
"id" : "dba72848e2628853",
"input_type" : "Record",
"name" : "FieldElementwise",
"attributes" : {
"generic_type" : "c83a3add96a2ac81",
"parameters" : []
},
"description" : "R3 -> R[n] Field constant in space.",
"implements" : [ "74d76bcb360d5504", "bc019add3460f774", "ac30b9b4e73cad12" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldElementwise" },
"type" : "29b5533100b6f60f"
},
{ "key" : "gmsh_file",
"description" : "Input file with ASCII GMSH file format.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "89a808b8e9515bf8"
},
{ "key" : "field_name",
"description" : "The values of the Field are read from the ```$ElementData``` section with field name given by this key.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f"
}]
},{
"id" : "71c61a5bf9d819fd",
"input_type" : "Record",
"name" : "FieldInterpolatedP0",
"attributes" : {
"generic_type" : "c1cf6b0899f12cd8",
"parameters" : []
},
"description" : "R3 -> R[n] Field constant in space.",
"implements" : [ "74d76bcb360d5504", "bc019add3460f774", "ac30b9b4e73cad12" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldInterpolatedP0" },
"type" : "29b5533100b6f60f"
},
{ "key" : "gmsh_file",
"description" : "Input file with ASCII GMSH file format.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "89a808b8e9515bf8"
},
{ "key" : "field_name",
"description" : "The values of the Field are read from the ```$ElementData``` section with field name given by this key.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f"
}]
},{
"id" : "f5861df409aa8b44",
"input_type" : "Array",
"name" : "array_of_Field:R3 -> R",
"attributes" : {

},
"range" : [1, 4294967295],
"subtype" : "14425403876d6513"
},
{
"id" : "fef8ccd368465268",
"input_type" : "Array",
"name" : "array_of_ConvectionTransport_output_fields",
"attributes" : {

},
"range" : [0, 4294967295],
"subtype" : "ed800db9bf9b86fb"
},
{
"id" : "ed800db9bf9b86fb",
"input_type" : "Selection",
"name" : "ConvectionTransport_output_fields",
"attributes" : {

},
"description" : "Selection of output fields for Convection Solute Transport model.",
"values" : [
{ "name" : "porosity",
"description" : "Output of the field porosity (($[-]$)) (Mobile porosity)." },
{ "name" : "sources_density",
"description" : "Output of the field sources_density (($[m^{-3}kgs^{-1}]$)) (Density of concentration sources.)." },
{ "name" : "sources_sigma",
"description" : "Output of the field sources_sigma (($[s^{-1}]$)) (Concentration flux.)." },
{ "name" : "sources_conc",
"description" : "Output of the field sources_conc (($[m^{-3}kg]$)) (Concentration sources threshold.)." },
{ "name" : "init_conc",
"description" : "Output of the field init_conc (($[m^{-3}kg]$)) (Initial concentrations.)." },
{ "name" : "conc",
"description" : "Output of the field conc (($[m^{-3}kg]$))." },
{ "name" : "region_id",
"description" : "Output of the field region_id (($[-]$))." }]
},{
"id" : "1cef21bcdf79098",
"input_type" : "Record",
"name" : "ConvectionDiffusion_DG",
"attributes" : {

},
"description" : "DG solver for solute transport.",
"implements" : [ "805ff9f323a046c" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "ConvectionDiffusion_DG" },
"type" : "29b5533100b6f60f"
},
{ "key" : "solver",
"description" : "Linear solver for MH problem.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "1463da0b439328b7"
},
{ "key" : "input_fields",
"description" : "Input fields of the equation.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "90888414835f182b"
},
{ "key" : "dg_variant",
"description" : "Variant of interior penalty discontinuous Galerkin method.",
"default" : { "type" : "value at declaration",
"value" : "non-symmetric" },
"type" : "63d5c736bdd40bf1"
},
{ "key" : "dg_order",
"description" : "Polynomial order for finite element in DG method (order 0 is suitable if there is no diffusion/dispersion).",
"default" : { "type" : "value at declaration",
"value" : 1 },
"type" : "151ce92dd201d44b"
},
{ "key" : "output_fields",
"description" : "List of fields to write to output file.",
"default" : { "type" : "value at declaration",
"value" : "conc" },
"type" : "17541a1a6d91379f"
}]
},{
"id" : "90888414835f182b",
"input_type" : "Array",
"name" : "array_of_ConvectionDiffusion_DG_Data",
"attributes" : {

},
"range" : [0, 4294967295],
"subtype" : "e4d1498c8cab4f9f"
},
{
"id" : "e4d1498c8cab4f9f",
"input_type" : "Record",
"name" : "ConvectionDiffusion_DG_Data",
"attributes" : {

},
"description" : "Record to set fields of the equation.\nThe fields are set only on the domain specified by one of the keys: 'region', 'rid'\nand after the time given by the key 'time'. The field setting can be overridden by\n any ConvectionDiffusion_DG_Data record that comes later in the boundary data array.",
"keys" : [
{ "key" : "region",
"description" : "Label of the region where to set fields. ",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "29b5533100b6f60f"
},
{ "key" : "rid",
"description" : "ID of the region where to set fields.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "151ce92d5201d44f"
},
{ "key" : "time",
"description" : "Apply field setting in this record after this time.\nThese times have to form an increasing sequence.",
"default" : { "type" : "value at declaration",
"value" : 0.0 },
"type" : "6b1c4ede475775aa"
},
{ "key" : "porosity",
"description" : "Mobile porosity (($[-]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "14425403876d6513"
},
{ "key" : "sources_density",
"description" : "Density of concentration sources. (($[m^{-3}kgs^{-1}]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "74d76bcb360d5504"
},
{ "key" : "sources_sigma",
"description" : "Concentration flux. (($[s^{-1}]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "74d76bcb360d5504"
},
{ "key" : "sources_conc",
"description" : "Concentration sources threshold. (($[m^{-3}kg]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "74d76bcb360d5504"
},
{ "key" : "bc_type",
"description" : "Type of boundary condition. (($[-]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "bc019add3460f774"
},
{ "key" : "bc_conc",
"description" : "Dirichlet boundary condition (for each substance). (($[m^{-3}kg]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "74d76bcb360d5504"
},
{ "key" : "bc_flux",
"description" : "Flux in Neumann boundary condition. (($[m^{1-d}kgs^{-1}]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "74d76bcb360d5504"
},
{ "key" : "bc_robin_sigma",
"description" : "Conductivity coefficient in Robin boundary condition. (($[m^{4-d}s^{-1}]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "74d76bcb360d5504"
},
{ "key" : "init_conc",
"description" : "Initial concentrations. (($[m^{-3}kg]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "74d76bcb360d5504"
},
{ "key" : "disp_l",
"description" : "Longitudal dispersivity (for each substance). (($[m]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "74d76bcb360d5504"
},
{ "key" : "disp_t",
"description" : "Transversal dispersivity (for each substance). (($[m]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "74d76bcb360d5504"
},
{ "key" : "diff_m",
"description" : "Molecular diffusivity (for each substance). (($[m^{2}s^{-1}]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "74d76bcb360d5504"
},
{ "key" : "fracture_sigma",
"description" : "Coefficient of diffusive transfer through fractures (for each substance). (($[-]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "74d76bcb360d5504"
},
{ "key" : "dg_penalty",
"description" : "Penalty parameter influencing the discontinuity of the solution (for each substance). Its default value 1 is sufficient in most cases. Higher value diminishes the inter-element jumps. (($[-]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "74d76bcb360d5504"
}]
},{
"id" : "bc019add3460f774",
"input_type" : "Abstract",
"name" : "Field:R3 -> R[n]",
"attributes" : {
"generic_type" : "d21385d6b7068e57",
"parameters" : [{ "element_input_type" : "14a04cc0ce426729" }]
},
"description" : "Abstract for all time-space functions.",
"default_descendant" : "f370b8c1beda8e3",
"implementations" : [
"f370b8c1beda8e3",

"43e93e573c8b4de7",

"88b875766a38f97b",

"dba72848e2628853",

"71c61a5bf9d819fd"]},{
"id" : "f370b8c1beda8e3",
"input_type" : "Record",
"name" : "FieldConstant",
"attributes" : {
"generic_type" : "e3c18513384f1891",
"parameters" : [{ "element_input_type" : "14a04cc0ce426729" }]
},
"description" : "R3 -> R[n] Field constant in space.",
"implements" : [ "bc019add3460f774" ],
"reducible_to_key" : "value",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldConstant" },
"type" : "29b5533100b6f60f"
},
{ "key" : "value",
"description" : "Value of the constant field.\nFor vector values, you can use scalar value to enter constant vector.\nFor square (($N\\times N$))-matrix values, you can use:\n - vector of size (($N$)) to enter diagonal matrix\n\n - vector of size (($\\frac12N(N+1)$)) to enter symmetric matrix (upper triangle, row by row)\n - scalar to enter multiple of the unit matrix.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "560f1beb774a0b41"
}]
},{
"id" : "560f1beb774a0b41",
"input_type" : "Array",
"name" : "array_of_ConvectionDiffusion_BC_Type",
"attributes" : {
"generic_type" : "f6b8a797184314b0",
"parameters" : [{ "element_input_type" : "14a04cc0ce426729" }]
},
"range" : [1, 4294967295],
"subtype" : "14a04cc0ce426729"
},
{
"id" : "14a04cc0ce426729",
"input_type" : "Selection",
"name" : "ConvectionDiffusion_BC_Type",
"attributes" : {

},
"description" : "Types of boundary conditions for solute transport model.",
"values" : [
{ "name" : "inflow",
"description" : "Default transport boundary condition.\nOn water inflow (($(q_w \\le 0)$)), total flux is given by the reference concentration 'bc_conc'. On water outflow we prescribe zero diffusive flux, i.e. the mass flows out only due to advection." },
{ "name" : "dirichlet",
"description" : "Dirichlet boundary condition (($ c = c_D $)).\nThe prescribed concentration (($c_D$)) is specified by the field 'bc_conc'." },
{ "name" : "total_flux",
"description" : "Total mass flux boundary condition.\nThe prescribed total incoming flux can have the general form (($\\delta(f_N+\\sigma_R(c_R-c) )$)), where the absolute flux (($f_N$)) is specified by the field 'bc_flux', the transition parameter (($\\sigma_R$)) by 'bc_robin_sigma', and the reference concentration (($c_R$)) by 'bc_conc'." },
{ "name" : "diffusive_flux",
"description" : "Diffusive flux boundary condition.\nThe prescribed incoming mass flux due to diffusion can have the general form (($\\delta(f_N+\\sigma_R(c_R-c) )$)), where the absolute flux (($f_N$)) is specified by the field 'bc_flux', the transition parameter (($\\sigma_R$)) by 'bc_robin_sigma', and the reference concentration (($c_R$)) by 'bc_conc'." }]
},{
"id" : "63d5c736bdd40bf1",
"input_type" : "Selection",
"name" : "DG_variant",
"attributes" : {

},
"description" : "Type of penalty term.",
"values" : [
{ "name" : "non-symmetric",
"description" : "non-symmetric weighted interior penalty DG method" },
{ "name" : "incomplete",
"description" : "incomplete weighted interior penalty DG method" },
{ "name" : "symmetric",
"description" : "symmetric weighted interior penalty DG method" }]
},{
"id" : "151ce92dd201d44b",
"input_type" : "Integer",
"name" : "Integer",
"attributes" : {

},
"range" : [0, 3]
},{
"id" : "17541a1a6d91379f",
"input_type" : "Array",
"name" : "array_of_ConvectionDiffusion_DG_output_fields",
"attributes" : {

},
"range" : [0, 4294967295],
"subtype" : "9943ca2eeaf61efe"
},
{
"id" : "9943ca2eeaf61efe",
"input_type" : "Selection",
"name" : "ConvectionDiffusion_DG_output_fields",
"attributes" : {

},
"description" : "Selection of output fields for Diffusive Solute Transport DG model.",
"values" : [
{ "name" : "porosity",
"description" : "Output of the field porosity (($[-]$)) (Mobile porosity)." },
{ "name" : "sources_density",
"description" : "Output of the field sources_density (($[m^{-3}kgs^{-1}]$)) (Density of concentration sources.)." },
{ "name" : "sources_sigma",
"description" : "Output of the field sources_sigma (($[s^{-1}]$)) (Concentration flux.)." },
{ "name" : "sources_conc",
"description" : "Output of the field sources_conc (($[m^{-3}kg]$)) (Concentration sources threshold.)." },
{ "name" : "init_conc",
"description" : "Output of the field init_conc (($[m^{-3}kg]$)) (Initial concentrations.)." },
{ "name" : "disp_l",
"description" : "Output of the field disp_l (($[m]$)) (Longitudal dispersivity (for each substance).)." },
{ "name" : "disp_t",
"description" : "Output of the field disp_t (($[m]$)) (Transversal dispersivity (for each substance).)." },
{ "name" : "diff_m",
"description" : "Output of the field diff_m (($[m^{2}s^{-1}]$)) (Molecular diffusivity (for each substance).)." },
{ "name" : "conc",
"description" : "Output of the field conc (($[m^{-3}kg]$))." },
{ "name" : "fracture_sigma",
"description" : "Output of the field fracture_sigma (($[-]$)) (Coefficient of diffusive transfer through fractures (for each substance).)." },
{ "name" : "dg_penalty",
"description" : "Output of the field dg_penalty (($[-]$)) (Penalty parameter influencing the discontinuity of the solution (for each substance). Its default value 1 is sufficient in most cases. Higher value diminishes the inter-element jumps.)." },
{ "name" : "region_id",
"description" : "Output of the field region_id (($[-]$))." }]
},{
"id" : "5572a5ae3e4d7aa6",
"input_type" : "Abstract",
"name" : "ReactionTerm",
"attributes" : {

},
"description" : "Equation for reading information about simple chemical reactions.",
"implementations" : [
"e66343c6a78bd3e2",

"1014f29c9035958d",

"3bdef38bae30a19e",

"156fc6be66004f51",

"fc60b942d25d7032",

"9c140786823808fd"]},{
"id" : "e66343c6a78bd3e2",
"input_type" : "Record",
"name" : "FirstOrderReaction",
"attributes" : {

},
"description" : "A model of first order chemical reactions (decompositions of a reactant into products).",
"implements" : [ "5572a5ae3e4d7aa6" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FirstOrderReaction" },
"type" : "29b5533100b6f60f"
},
{ "key" : "reactions",
"description" : "An array of first order chemical reactions.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "d58a5e2406c40720"
},
{ "key" : "ode_solver",
"description" : "Numerical solver for the system of first order ordinary differential equations coming from the model.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "324a5673fc661f69"
}]
},{
"id" : "d58a5e2406c40720",
"input_type" : "Array",
"name" : "array_of_Reaction",
"attributes" : {

},
"range" : [0, 4294967295],
"subtype" : "6bf77257be7e7f51"
},
{
"id" : "6bf77257be7e7f51",
"input_type" : "Record",
"name" : "Reaction",
"attributes" : {

},
"description" : "Describes a single first order chemical reaction.",
"keys" : [
{ "key" : "reactants",
"description" : "An array of reactants. Do not use array, reactions with only one reactant (decays) are implemented at the moment!",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "de6fc6e6e4ae1572"
},
{ "key" : "reaction_rate",
"description" : "The reaction rate coefficient of the first order reaction.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "6b1c4ede475775aa"
},
{ "key" : "products",
"description" : "An array of products.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "7c6b91701222b97b"
}]
},{
"id" : "de6fc6e6e4ae1572",
"input_type" : "Array",
"name" : "array_of_FirstOrderReactionReactant",
"attributes" : {

},
"range" : [1, 4294967295],
"subtype" : "b6874fe828cdc89a"
},
{
"id" : "b6874fe828cdc89a",
"input_type" : "Record",
"name" : "FirstOrderReactionReactant",
"attributes" : {

},
"description" : "A record describing a reactant of a reaction.",
"reducible_to_key" : "name",
"keys" : [
{ "key" : "name",
"description" : "The name of the reactant.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f"
}]
},{
"id" : "7c6b91701222b97b",
"input_type" : "Array",
"name" : "array_of_FirstOrderReactionProduct",
"attributes" : {

},
"range" : [1, 4294967295],
"subtype" : "d8ee3f89fd5f6db"
},
{
"id" : "d8ee3f89fd5f6db",
"input_type" : "Record",
"name" : "FirstOrderReactionProduct",
"attributes" : {

},
"description" : "A record describing a product of a reaction.",
"reducible_to_key" : "name",
"keys" : [
{ "key" : "name",
"description" : "The name of the product.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f"
},
{ "key" : "branching_ratio",
"description" : "The branching ratio of the product when there are more products.\nThe value must be positive. Further, the branching ratios of all products are normalized in order to sum to one.\nThe default value 1.0, should only be used in the case of single product.",
"default" : { "type" : "value at declaration",
"value" : 1.0 },
"type" : "6b1c4ede475775aa"
}]
},{
"id" : "324a5673fc661f69",
"input_type" : "Abstract",
"name" : "LinearODESolver",
"attributes" : {

},
"description" : "Solver of a linear system of ODEs.",
"implementations" : [
"7cd7adbc9a7a426f",

"8b96c6f566108a52"]},{
"id" : "7cd7adbc9a7a426f",
"input_type" : "Record",
"name" : "PadeApproximant",
"attributes" : {

},
"description" : "Record with an information about pade approximant parameters.",
"implements" : [ "324a5673fc661f69" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "PadeApproximant" },
"type" : "29b5533100b6f60f"
},
{ "key" : "nominator_degree",
"description" : "Polynomial degree of the nominator of Pade approximant.",
"default" : { "type" : "value at declaration",
"value" : 2 },
"type" : "151ce92d5201d40e"
},
{ "key" : "denominator_degree",
"description" : "Polynomial degree of the nominator of Pade approximant",
"default" : { "type" : "value at declaration",
"value" : 2 },
"type" : "151ce92d5201d40e"
}]
},{
"id" : "151ce92d5201d40e",
"input_type" : "Integer",
"name" : "Integer",
"attributes" : {

},
"range" : [1, 2147483647]
},{
"id" : "8b96c6f566108a52",
"input_type" : "Record",
"name" : "LinearODEAnalytic",
"attributes" : {

},
"description" : "Evaluate analytic solution of the system of ODEs.",
"implements" : [ "324a5673fc661f69" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "LinearODEAnalytic" },
"type" : "29b5533100b6f60f"
}]
},{
"id" : "1014f29c9035958d",
"input_type" : "Record",
"name" : "RadioactiveDecay",
"attributes" : {

},
"description" : "A model of a radioactive decay and possibly of a decay chain.",
"implements" : [ "5572a5ae3e4d7aa6" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "RadioactiveDecay" },
"type" : "29b5533100b6f60f"
},
{ "key" : "decays",
"description" : "An array of radioactive decays.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "be36e19ca6ac9b1f"
},
{ "key" : "ode_solver",
"description" : "Numerical solver for the system of first order ordinary differential equations coming from the model.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "324a5673fc661f69"
}]
},{
"id" : "be36e19ca6ac9b1f",
"input_type" : "Array",
"name" : "array_of_Decay",
"attributes" : {

},
"range" : [1, 4294967295],
"subtype" : "3cf35a4e737f77ef"
},
{
"id" : "3cf35a4e737f77ef",
"input_type" : "Record",
"name" : "Decay",
"attributes" : {

},
"description" : "A model of a radioactive decay.",
"keys" : [
{ "key" : "radionuclide",
"description" : "The name of the parent radionuclide.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f"
},
{ "key" : "half_life",
"description" : "The half life of the parent radionuclide in seconds.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "6b1c4ede475775aa"
},
{ "key" : "products",
"description" : "An array of the decay products (daughters).",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "5d66558290abdd3e"
}]
},{
"id" : "5d66558290abdd3e",
"input_type" : "Array",
"name" : "array_of_RadioactiveDecayProduct",
"attributes" : {

},
"range" : [1, 4294967295],
"subtype" : "1758ff64a5e09a45"
},
{
"id" : "1758ff64a5e09a45",
"input_type" : "Record",
"name" : "RadioactiveDecayProduct",
"attributes" : {

},
"description" : "A record describing a product of a radioactive decay.",
"reducible_to_key" : "name",
"keys" : [
{ "key" : "name",
"description" : "The name of the product.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f"
},
{ "key" : "energy",
"description" : "Not used at the moment! The released energy in MeV from the decay of the radionuclide into the product.",
"default" : { "type" : "value at declaration",
"value" : 0.0 },
"type" : "6b1c4ede475775aa"
},
{ "key" : "branching_ratio",
"description" : "The branching ratio of the product when there is more than one.Considering only one product, the default ratio 1.0 is used.Its value must be positive. Further, the branching ratios of all products are normalizedby their sum, so the sum then gives 1.0 (this also resolves possible rounding errors).",
"default" : { "type" : "value at declaration",
"value" : 1.0 },
"type" : "6b1c4ede475775aa"
}]
},{
"id" : "3bdef38bae30a19e",
"input_type" : "Record",
"name" : "Sorption",
"attributes" : {

},
"description" : "Sorption model in the reaction term of transport.",
"implements" : [ "5572a5ae3e4d7aa6" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "Sorption" },
"type" : "29b5533100b6f60f"
},
{ "key" : "substances",
"description" : "Names of the substances that take part in the sorption model.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "eee303f526b992fd"
},
{ "key" : "solvent_density",
"description" : "Density of the solvent.",
"default" : { "type" : "value at declaration",
"value" : 1.0 },
"type" : "6b1c4ede475775aa"
},
{ "key" : "substeps",
"description" : "Number of equidistant substeps, molar mass and isotherm intersections",
"default" : { "type" : "value at declaration",
"value" : 1000 },
"type" : "151ce92d5201d40e"
},
{ "key" : "solubility",
"description" : "Specifies solubility limits of all the sorbing species.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "ae4d15413e119e57"
},
{ "key" : "table_limits",
"description" : "Specifies highest aqueous concentration in interpolation table.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "ae4d15413e119e57"
},
{ "key" : "input_fields",
"description" : "Containes region specific data necessary to construct isotherms.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "31d3cc69b318f3d2"
},
{ "key" : "reaction_liquid",
"description" : "Reaction model following the sorption in the liquid.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "5572a5ae3e4d7aa6"
},
{ "key" : "reaction_solid",
"description" : "Reaction model following the sorption in the solid.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "5572a5ae3e4d7aa6"
},
{ "key" : "output_fields",
"description" : "List of fields to write to output stream.",
"default" : { "type" : "value at declaration",
"value" : "conc_solid" },
"type" : "a1664fa147e1cc7f"
}]
},{
"id" : "eee303f526b992fd",
"input_type" : "Array",
"name" : "array_of_String",
"attributes" : {

},
"range" : [1, 4294967295],
"subtype" : "29b5533100b6f60f"
},
{
"id" : "31d3cc69b318f3d2",
"input_type" : "Array",
"name" : "array_of_Sorption_Data",
"attributes" : {

},
"range" : [0, 4294967295],
"subtype" : "4d0c8c2365628dba"
},
{
"id" : "4d0c8c2365628dba",
"input_type" : "Record",
"name" : "Sorption_Data",
"attributes" : {

},
"description" : "Record to set fields of the equation.\nThe fields are set only on the domain specified by one of the keys: 'region', 'rid'\nand after the time given by the key 'time'. The field setting can be overridden by\n any Sorption_Data record that comes later in the boundary data array.",
"keys" : [
{ "key" : "region",
"description" : "Label of the region where to set fields. ",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "29b5533100b6f60f"
},
{ "key" : "rid",
"description" : "ID of the region where to set fields.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "151ce92d5201d44f"
},
{ "key" : "time",
"description" : "Apply field setting in this record after this time.\nThese times have to form an increasing sequence.",
"default" : { "type" : "value at declaration",
"value" : 0.0 },
"type" : "6b1c4ede475775aa"
},
{ "key" : "rock_density",
"description" : "Rock matrix density. (($[m^{-3}kg]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "14425403876d6513"
},
{ "key" : "sorption_type",
"description" : "Considered sorption is described by selected isotherm. If porosity on an element is equal or even higher than 1.0 (meaning no sorbing surface), then type 'none' will be selected automatically. (($[-]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "ac30b9b4e73cad12"
},
{ "key" : "isotherm_mult",
"description" : "Multiplication parameters (k, omega) in either Langmuir c_s = omega * (alpha*c_a)/(1- alpha*c_a) or in linear c_s = k * c_a isothermal description. (($[kg^{-1}mol]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "74d76bcb360d5504"
},
{ "key" : "isotherm_other",
"description" : "Second parameters (alpha, ...) defining isotherm  c_s = omega * (alpha*c_a)/(1- alpha*c_a). (($[-]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "74d76bcb360d5504"
},
{ "key" : "init_conc_solid",
"description" : "Initial solid concentration of substances. Vector, one value for every substance. (($[kg^{-1}mol]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "74d76bcb360d5504"
}]
},{
"id" : "ac30b9b4e73cad12",
"input_type" : "Abstract",
"name" : "Field:R3 -> R[n]",
"attributes" : {
"generic_type" : "d21385d6b7068e57",
"parameters" : [{ "element_input_type" : "b992ede334b6d7e7" }]
},
"description" : "Abstract for all time-space functions.",
"default_descendant" : "152fa08616e6f9b7",
"implementations" : [
"152fa08616e6f9b7",

"43e93e573c8b4de7",

"88b875766a38f97b",

"dba72848e2628853",

"71c61a5bf9d819fd"]},{
"id" : "152fa08616e6f9b7",
"input_type" : "Record",
"name" : "FieldConstant",
"attributes" : {
"generic_type" : "e3c18513384f1891",
"parameters" : [{ "element_input_type" : "b992ede334b6d7e7" }]
},
"description" : "R3 -> R[n] Field constant in space.",
"implements" : [ "ac30b9b4e73cad12" ],
"reducible_to_key" : "value",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldConstant" },
"type" : "29b5533100b6f60f"
},
{ "key" : "value",
"description" : "Value of the constant field.\nFor vector values, you can use scalar value to enter constant vector.\nFor square (($N\\times N$))-matrix values, you can use:\n - vector of size (($N$)) to enter diagonal matrix\n\n - vector of size (($\\frac12N(N+1)$)) to enter symmetric matrix (upper triangle, row by row)\n - scalar to enter multiple of the unit matrix.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "9896d666bd525843"
}]
},{
"id" : "9896d666bd525843",
"input_type" : "Array",
"name" : "array_of_SorptionType",
"attributes" : {
"generic_type" : "f6b8a797184314b0",
"parameters" : [{ "element_input_type" : "b992ede334b6d7e7" }]
},
"range" : [1, 4294967295],
"subtype" : "b992ede334b6d7e7"
},
{
"id" : "b992ede334b6d7e7",
"input_type" : "Selection",
"name" : "SorptionType",
"attributes" : {

},
"description" : "",
"values" : [
{ "name" : "none",
"description" : "No sorption considered." },
{ "name" : "linear",
"description" : "Linear isotherm runs the concentration exchange between liquid and solid." },
{ "name" : "langmuir",
"description" : "Langmuir isotherm runs the concentration exchange between liquid and solid." },
{ "name" : "freundlich",
"description" : "Freundlich isotherm runs the concentration exchange between liquid and solid." }]
},{
"id" : "a1664fa147e1cc7f",
"input_type" : "Array",
"name" : "array_of_Sorption_Output",
"attributes" : {

},
"range" : [0, 4294967295],
"subtype" : "23659336b9b5699b"
},
{
"id" : "23659336b9b5699b",
"input_type" : "Selection",
"name" : "Sorption_Output",
"attributes" : {

},
"description" : "desc",
"values" : [
{ "name" : "rock_density",
"description" : "Output of the field rock_density (($[m^{-3}kg]$)) (Rock matrix density.)." },
{ "name" : "sorption_type",
"description" : "Output of the field sorption_type (($[-]$)) (Considered sorption is described by selected isotherm. If porosity on an element is equal or even higher than 1.0 (meaning no sorbing surface), then type 'none' will be selected automatically.)." },
{ "name" : "isotherm_mult",
"description" : "Output of the field isotherm_mult (($[kg^{-1}mol]$)) (Multiplication parameters (k, omega) in either Langmuir c_s = omega * (alpha*c_a)/(1- alpha*c_a) or in linear c_s = k * c_a isothermal description.)." },
{ "name" : "isotherm_other",
"description" : "Output of the field isotherm_other (($[-]$)) (Second parameters (alpha, ...) defining isotherm  c_s = omega * (alpha*c_a)/(1- alpha*c_a).)." },
{ "name" : "init_conc_solid",
"description" : "Output of the field init_conc_solid (($[kg^{-1}mol]$)) (Initial solid concentration of substances. Vector, one value for every substance.)." },
{ "name" : "conc_solid",
"description" : "Output of the field conc_solid (($[m^{-3}kg]$))." }]
},{
"id" : "156fc6be66004f51",
"input_type" : "Record",
"name" : "SorptionMobile",
"attributes" : {

},
"description" : "Sorption model in the mobile zone, following the dual porosity model.",
"implements" : [ "5572a5ae3e4d7aa6" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "SorptionMobile" },
"type" : "29b5533100b6f60f"
},
{ "key" : "substances",
"description" : "Names of the substances that take part in the sorption model.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "eee303f526b992fd"
},
{ "key" : "solvent_density",
"description" : "Density of the solvent.",
"default" : { "type" : "value at declaration",
"value" : 1.0 },
"type" : "6b1c4ede475775aa"
},
{ "key" : "substeps",
"description" : "Number of equidistant substeps, molar mass and isotherm intersections",
"default" : { "type" : "value at declaration",
"value" : 1000 },
"type" : "151ce92d5201d40e"
},
{ "key" : "solubility",
"description" : "Specifies solubility limits of all the sorbing species.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "ae4d15413e119e57"
},
{ "key" : "table_limits",
"description" : "Specifies highest aqueous concentration in interpolation table.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "ae4d15413e119e57"
},
{ "key" : "input_fields",
"description" : "Containes region specific data necessary to construct isotherms.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "31d3cc69b318f3d2"
},
{ "key" : "reaction_liquid",
"description" : "Reaction model following the sorption in the liquid.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "5572a5ae3e4d7aa6"
},
{ "key" : "reaction_solid",
"description" : "Reaction model following the sorption in the solid.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "5572a5ae3e4d7aa6"
},
{ "key" : "output_fields",
"description" : "List of fields to write to output stream.",
"default" : { "type" : "value at declaration",
"value" : "conc_solid" },
"type" : "72267cdcde3ff8a0"
}]
},{
"id" : "72267cdcde3ff8a0",
"input_type" : "Array",
"name" : "array_of_SorptionMobile_Output",
"attributes" : {

},
"range" : [0, 4294967295],
"subtype" : "66dff810753fa55b"
},
{
"id" : "66dff810753fa55b",
"input_type" : "Selection",
"name" : "SorptionMobile_Output",
"attributes" : {

},
"description" : "desc",
"values" : [
{ "name" : "rock_density",
"description" : "Output of the field rock_density (($[m^{-3}kg]$)) (Rock matrix density.)." },
{ "name" : "sorption_type",
"description" : "Output of the field sorption_type (($[-]$)) (Considered sorption is described by selected isotherm. If porosity on an element is equal or even higher than 1.0 (meaning no sorbing surface), then type 'none' will be selected automatically.)." },
{ "name" : "isotherm_mult",
"description" : "Output of the field isotherm_mult (($[kg^{-1}mol]$)) (Multiplication parameters (k, omega) in either Langmuir c_s = omega * (alpha*c_a)/(1- alpha*c_a) or in linear c_s = k * c_a isothermal description.)." },
{ "name" : "isotherm_other",
"description" : "Output of the field isotherm_other (($[-]$)) (Second parameters (alpha, ...) defining isotherm  c_s = omega * (alpha*c_a)/(1- alpha*c_a).)." },
{ "name" : "init_conc_solid",
"description" : "Output of the field init_conc_solid (($[kg^{-1}mol]$)) (Initial solid concentration of substances. Vector, one value for every substance.)." },
{ "name" : "conc_solid",
"description" : "Output of the field conc_solid (($[m^{-3}kg]$))." }]
},{
"id" : "fc60b942d25d7032",
"input_type" : "Record",
"name" : "SorptionImmobile",
"attributes" : {

},
"description" : "Sorption model in the immobile zone, following the dual porosity model.",
"implements" : [ "5572a5ae3e4d7aa6" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "SorptionImmobile" },
"type" : "29b5533100b6f60f"
},
{ "key" : "substances",
"description" : "Names of the substances that take part in the sorption model.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "eee303f526b992fd"
},
{ "key" : "solvent_density",
"description" : "Density of the solvent.",
"default" : { "type" : "value at declaration",
"value" : 1.0 },
"type" : "6b1c4ede475775aa"
},
{ "key" : "substeps",
"description" : "Number of equidistant substeps, molar mass and isotherm intersections",
"default" : { "type" : "value at declaration",
"value" : 1000 },
"type" : "151ce92d5201d40e"
},
{ "key" : "solubility",
"description" : "Specifies solubility limits of all the sorbing species.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "ae4d15413e119e57"
},
{ "key" : "table_limits",
"description" : "Specifies highest aqueous concentration in interpolation table.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "ae4d15413e119e57"
},
{ "key" : "input_fields",
"description" : "Containes region specific data necessary to construct isotherms.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "31d3cc69b318f3d2"
},
{ "key" : "reaction_liquid",
"description" : "Reaction model following the sorption in the liquid.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "5572a5ae3e4d7aa6"
},
{ "key" : "reaction_solid",
"description" : "Reaction model following the sorption in the solid.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "5572a5ae3e4d7aa6"
},
{ "key" : "output_fields",
"description" : "List of fields to write to output stream.",
"default" : { "type" : "value at declaration",
"value" : "conc_immobile_solid" },
"type" : "2d7f1480ed731edb"
}]
},{
"id" : "2d7f1480ed731edb",
"input_type" : "Array",
"name" : "array_of_SorptionImmobile_Output",
"attributes" : {

},
"range" : [0, 4294967295],
"subtype" : "37188131837d3a44"
},
{
"id" : "37188131837d3a44",
"input_type" : "Selection",
"name" : "SorptionImmobile_Output",
"attributes" : {

},
"description" : "desc",
"values" : [
{ "name" : "rock_density",
"description" : "Output of the field rock_density (($[m^{-3}kg]$)) (Rock matrix density.)." },
{ "name" : "sorption_type",
"description" : "Output of the field sorption_type (($[-]$)) (Considered sorption is described by selected isotherm. If porosity on an element is equal or even higher than 1.0 (meaning no sorbing surface), then type 'none' will be selected automatically.)." },
{ "name" : "isotherm_mult",
"description" : "Output of the field isotherm_mult (($[kg^{-1}mol]$)) (Multiplication parameters (k, omega) in either Langmuir c_s = omega * (alpha*c_a)/(1- alpha*c_a) or in linear c_s = k * c_a isothermal description.)." },
{ "name" : "isotherm_other",
"description" : "Output of the field isotherm_other (($[-]$)) (Second parameters (alpha, ...) defining isotherm  c_s = omega * (alpha*c_a)/(1- alpha*c_a).)." },
{ "name" : "init_conc_solid",
"description" : "Output of the field init_conc_solid (($[kg^{-1}mol]$)) (Initial solid concentration of substances. Vector, one value for every substance.)." },
{ "name" : "conc_immobile_solid",
"description" : "Output of the field conc_immobile_solid (($[m^{-3}kg]$))." }]
},{
"id" : "9c140786823808fd",
"input_type" : "Record",
"name" : "DualPorosity",
"attributes" : {

},
"description" : "Dual porosity model in transport problems.\nProvides computing the concentration of substances in mobile and immobile zone.\n",
"implements" : [ "5572a5ae3e4d7aa6" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "DualPorosity" },
"type" : "29b5533100b6f60f"
},
{ "key" : "input_fields",
"description" : "Containes region specific data necessary to construct dual porosity model.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "58b4d75bc3a8fb9d"
},
{ "key" : "scheme_tolerance",
"description" : "Tolerance according to which the explicit Euler scheme is used or not.Set 0.0 to use analytic formula only (can be slower).",
"default" : { "type" : "value at declaration",
"value" : 1e-3 },
"type" : "6b1c4ede475775aa"
},
{ "key" : "reaction_mobile",
"description" : "Reaction model in mobile zone.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "5572a5ae3e4d7aa6"
},
{ "key" : "reaction_immobile",
"description" : "Reaction model in immobile zone.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "5572a5ae3e4d7aa6"
},
{ "key" : "output_fields",
"description" : "List of fields to write to output stream.",
"default" : { "type" : "value at declaration",
"value" : "conc_immobile" },
"type" : "7ac6f49bf5d5db4f"
}]
},{
"id" : "58b4d75bc3a8fb9d",
"input_type" : "Array",
"name" : "array_of_DualPorosity_Data",
"attributes" : {

},
"range" : [0, 4294967295],
"subtype" : "3e9fc808979ffbbc"
},
{
"id" : "3e9fc808979ffbbc",
"input_type" : "Record",
"name" : "DualPorosity_Data",
"attributes" : {

},
"description" : "Record to set fields of the equation.\nThe fields are set only on the domain specified by one of the keys: 'region', 'rid'\nand after the time given by the key 'time'. The field setting can be overridden by\n any DualPorosity_Data record that comes later in the boundary data array.",
"keys" : [
{ "key" : "region",
"description" : "Label of the region where to set fields. ",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "29b5533100b6f60f"
},
{ "key" : "rid",
"description" : "ID of the region where to set fields.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "151ce92d5201d44f"
},
{ "key" : "time",
"description" : "Apply field setting in this record after this time.\nThese times have to form an increasing sequence.",
"default" : { "type" : "value at declaration",
"value" : 0.0 },
"type" : "6b1c4ede475775aa"
},
{ "key" : "diffusion_rate_immobile",
"description" : "Diffusion coefficient of non-equilibrium linear exchange between mobile and immobile zone. (($[s^{-1}]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "74d76bcb360d5504"
},
{ "key" : "porosity_immobile",
"description" : "Porosity of the immobile zone. (($[-]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "14425403876d6513"
},
{ "key" : "init_conc_immobile",
"description" : "Initial concentration of substances in the immobile zone. (($[m^{-3}kg]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "74d76bcb360d5504"
}]
},{
"id" : "7ac6f49bf5d5db4f",
"input_type" : "Array",
"name" : "array_of_DualPorosity_output_fields",
"attributes" : {

},
"range" : [0, 4294967295],
"subtype" : "bac39fa21c7e1d85"
},
{
"id" : "bac39fa21c7e1d85",
"input_type" : "Selection",
"name" : "DualPorosity_output_fields",
"attributes" : {

},
"description" : "Selection of field names of Dual Porosity model available for output.",
"values" : [
{ "name" : "diffusion_rate_immobile",
"description" : "Output of the field diffusion_rate_immobile (($[s^{-1}]$)) (Diffusion coefficient of non-equilibrium linear exchange between mobile and immobile zone.)." },
{ "name" : "porosity_immobile",
"description" : "Output of the field porosity_immobile (($[-]$)) (Porosity of the immobile zone.)." },
{ "name" : "init_conc_immobile",
"description" : "Output of the field init_conc_immobile (($[m^{-3}kg]$)) (Initial concentration of substances in the immobile zone.)." },
{ "name" : "conc_immobile",
"description" : "Output of the field conc_immobile (($[m^{-3}kg]$))." }]
},{
"id" : "110fbca2b90f4c59",
"input_type" : "Record",
"name" : "HeatTransfer_DG",
"attributes" : {

},
"description" : "DG solver for heat transfer.",
"implements" : [ "7f723e0b439bd7dc" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "HeatTransfer_DG" },
"type" : "29b5533100b6f60f"
},
{ "key" : "time",
"description" : "Time governor setting for the secondary equation.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "d8574f6af69c7e1f"
},
{ "key" : "balance",
"description" : "Settings for computing balance.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "7f74618c0b28d9cd"
},
{ "key" : "output_stream",
"description" : "Parameters of output stream.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "7f7b2caffb3e4eb6"
},
{ "key" : "solver",
"description" : "Linear solver for MH problem.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "1463da0b439328b7"
},
{ "key" : "input_fields",
"description" : "Input fields of the equation.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "8212568f4f4bd52d"
},
{ "key" : "dg_variant",
"description" : "Variant of interior penalty discontinuous Galerkin method.",
"default" : { "type" : "value at declaration",
"value" : "non-symmetric" },
"type" : "63d5c736bdd40bf1"
},
{ "key" : "dg_order",
"description" : "Polynomial order for finite element in DG method (order 0 is suitable if there is no diffusion/dispersion).",
"default" : { "type" : "value at declaration",
"value" : 1 },
"type" : "151ce92dd201d44b"
},
{ "key" : "output_fields",
"description" : "List of fields to write to output file.",
"default" : { "type" : "value at declaration",
"value" : "temperature" },
"type" : "bae1d4d0780546af"
}]
},{
"id" : "8212568f4f4bd52d",
"input_type" : "Array",
"name" : "array_of_HeatTransfer_DG_Data",
"attributes" : {

},
"range" : [0, 4294967295],
"subtype" : "faa639f2583ab7b7"
},
{
"id" : "faa639f2583ab7b7",
"input_type" : "Record",
"name" : "HeatTransfer_DG_Data",
"attributes" : {

},
"description" : "Record to set fields of the equation.\nThe fields are set only on the domain specified by one of the keys: 'region', 'rid'\nand after the time given by the key 'time'. The field setting can be overridden by\n any HeatTransfer_DG_Data record that comes later in the boundary data array.",
"keys" : [
{ "key" : "region",
"description" : "Label of the region where to set fields. ",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "29b5533100b6f60f"
},
{ "key" : "rid",
"description" : "ID of the region where to set fields.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "151ce92d5201d44f"
},
{ "key" : "time",
"description" : "Apply field setting in this record after this time.\nThese times have to form an increasing sequence.",
"default" : { "type" : "value at declaration",
"value" : 0.0 },
"type" : "6b1c4ede475775aa"
},
{ "key" : "bc_type",
"description" : "Type of boundary condition. (($[-]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "5d19ae274ffe7bdc"
},
{ "key" : "bc_temperature",
"description" : "Boundary value of temperature. (($[K]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "74d76bcb360d5504"
},
{ "key" : "bc_flux",
"description" : "Flux in Neumann boundary condition. (($[m^{1-d}kgs^{-1}]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "74d76bcb360d5504"
},
{ "key" : "bc_robin_sigma",
"description" : "Conductivity coefficient in Robin boundary condition. (($[m^{4-d}s^{-1}]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "74d76bcb360d5504"
},
{ "key" : "init_temperature",
"description" : "Initial temperature. (($[K]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "14425403876d6513"
},
{ "key" : "porosity",
"description" : "Porosity. (($[-]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "14425403876d6513"
},
{ "key" : "fluid_density",
"description" : "Density of fluid. (($[m^{-3}kg]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "14425403876d6513"
},
{ "key" : "fluid_heat_capacity",
"description" : "Heat capacity of fluid. (($[m^{2}s^{-2}K^{-1}]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "14425403876d6513"
},
{ "key" : "fluid_heat_conductivity",
"description" : "Heat conductivity of fluid. (($[mkgs^{-3}K^{-1}]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "14425403876d6513"
},
{ "key" : "solid_density",
"description" : "Density of solid (rock). (($[m^{-3}kg]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "14425403876d6513"
},
{ "key" : "solid_heat_capacity",
"description" : "Heat capacity of solid (rock). (($[m^{2}s^{-2}K^{-1}]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "14425403876d6513"
},
{ "key" : "solid_heat_conductivity",
"description" : "Heat conductivity of solid (rock). (($[mkgs^{-3}K^{-1}]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "14425403876d6513"
},
{ "key" : "disp_l",
"description" : "Longitudal heat dispersivity in fluid. (($[m]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "14425403876d6513"
},
{ "key" : "disp_t",
"description" : "Transversal heat dispersivity in fluid. (($[m]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "14425403876d6513"
},
{ "key" : "fluid_thermal_source",
"description" : "Thermal source density in fluid. (($[m^{-1}kgs^{-3}]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "14425403876d6513"
},
{ "key" : "solid_thermal_source",
"description" : "Thermal source density in solid. (($[m^{-1}kgs^{-3}]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "14425403876d6513"
},
{ "key" : "fluid_heat_exchange_rate",
"description" : "Heat exchange rate in fluid. (($[s^{-1}]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "14425403876d6513"
},
{ "key" : "solid_heat_exchange_rate",
"description" : "Heat exchange rate of source in solid. (($[s^{-1}]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "14425403876d6513"
},
{ "key" : "fluid_ref_temperature",
"description" : "Reference temperature of source in fluid. (($[K]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "14425403876d6513"
},
{ "key" : "solid_ref_temperature",
"description" : "Reference temperature in solid. (($[K]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "14425403876d6513"
},
{ "key" : "fracture_sigma",
"description" : "Coefficient of diffusive transfer through fractures (for each substance). (($[-]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "74d76bcb360d5504"
},
{ "key" : "dg_penalty",
"description" : "Penalty parameter influencing the discontinuity of the solution (for each substance). Its default value 1 is sufficient in most cases. Higher value diminishes the inter-element jumps. (($[-]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "74d76bcb360d5504"
}]
},{
"id" : "5d19ae274ffe7bdc",
"input_type" : "Abstract",
"name" : "Field:R3 -> R",
"attributes" : {
"generic_type" : "6f02db21b62f8e72",
"parameters" : [{ "element_input_type" : "9940f463c44d21be" }]
},
"description" : "Abstract for all time-space functions.",
"default_descendant" : "ea2a6ed8ce9d7405",
"implementations" : [
"ea2a6ed8ce9d7405",

"17c6c451301625df",

"70e526eeecea0442",

"d054fa5ea25a415c",

"c5d114a5b2bd5198"]},{
"id" : "ea2a6ed8ce9d7405",
"input_type" : "Record",
"name" : "FieldConstant",
"attributes" : {
"generic_type" : "9fcdfb05285769ac",
"parameters" : [{ "element_input_type" : "9940f463c44d21be" }]
},
"description" : "R3 -> R Field constant in space.",
"implements" : [ "5d19ae274ffe7bdc" ],
"reducible_to_key" : "value",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldConstant" },
"type" : "29b5533100b6f60f"
},
{ "key" : "value",
"description" : "Value of the constant field.\nFor vector values, you can use scalar value to enter constant vector.\nFor square (($N\\times N$))-matrix values, you can use:\n - vector of size (($N$)) to enter diagonal matrix\n\n - vector of size (($\\frac12N(N+1)$)) to enter symmetric matrix (upper triangle, row by row)\n - scalar to enter multiple of the unit matrix.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "9940f463c44d21be"
}]
},{
"id" : "9940f463c44d21be",
"input_type" : "Selection",
"name" : "HeatTransfer_BC_Type",
"attributes" : {

},
"description" : "Types of boundary conditions for heat transfer model.",
"values" : [
{ "name" : "inflow",
"description" : "Default heat transfer boundary condition.\nOn water inflow (($(q_w \\le 0)$)), total energy flux is given by the reference temperature 'bc_temperature'. On water outflow we prescribe zero diffusive flux, i.e. the energy flows out only due to advection." },
{ "name" : "dirichlet",
"description" : "Dirichlet boundary condition (($T = T_D $)).\nThe prescribed temperature (($T_D$)) is specified by the field 'bc_temperature'." },
{ "name" : "total_flux",
"description" : "Total energy flux boundary condition.\nThe prescribed incoming total flux can have the general form (($\\delta(f_N+\\sigma_R(T_R-T) )$)), where the absolute flux (($f_N$)) is specified by the field 'bc_flux', the transition parameter (($\\sigma_R$)) by 'bc_robin_sigma', and the reference temperature (($T_R$)) by 'bc_temperature'." },
{ "name" : "diffusive_flux",
"description" : "Diffusive flux boundary condition.\nThe prescribed incoming energy flux due to diffusion can have the general form (($\\delta(f_N+\\sigma_R(T_R-T) )$)), where the absolute flux (($f_N$)) is specified by the field 'bc_flux', the transition parameter (($\\sigma_R$)) by 'bc_robin_sigma', and the reference temperature (($T_R$)) by 'bc_temperature'." }]
},{
"id" : "bae1d4d0780546af",
"input_type" : "Array",
"name" : "array_of_HeatTransfer_DG_output_fields",
"attributes" : {

},
"range" : [0, 4294967295],
"subtype" : "d81d1aa47b25d5d4"
},
{
"id" : "d81d1aa47b25d5d4",
"input_type" : "Selection",
"name" : "HeatTransfer_DG_output_fields",
"attributes" : {

},
"description" : "Selection of output fields for Heat Transfer DG model.",
"values" : [
{ "name" : "init_temperature",
"description" : "Output of the field init_temperature (($[K]$)) (Initial temperature.)." },
{ "name" : "porosity",
"description" : "Output of the field porosity (($[-]$)) (Porosity.)." },
{ "name" : "fluid_density",
"description" : "Output of the field fluid_density (($[m^{-3}kg]$)) (Density of fluid.)." },
{ "name" : "fluid_heat_capacity",
"description" : "Output of the field fluid_heat_capacity (($[m^{2}s^{-2}K^{-1}]$)) (Heat capacity of fluid.)." },
{ "name" : "fluid_heat_conductivity",
"description" : "Output of the field fluid_heat_conductivity (($[mkgs^{-3}K^{-1}]$)) (Heat conductivity of fluid.)." },
{ "name" : "solid_density",
"description" : "Output of the field solid_density (($[m^{-3}kg]$)) (Density of solid (rock).)." },
{ "name" : "solid_heat_capacity",
"description" : "Output of the field solid_heat_capacity (($[m^{2}s^{-2}K^{-1}]$)) (Heat capacity of solid (rock).)." },
{ "name" : "solid_heat_conductivity",
"description" : "Output of the field solid_heat_conductivity (($[mkgs^{-3}K^{-1}]$)) (Heat conductivity of solid (rock).)." },
{ "name" : "disp_l",
"description" : "Output of the field disp_l (($[m]$)) (Longitudal heat dispersivity in fluid.)." },
{ "name" : "disp_t",
"description" : "Output of the field disp_t (($[m]$)) (Transversal heat dispersivity in fluid.)." },
{ "name" : "fluid_thermal_source",
"description" : "Output of the field fluid_thermal_source (($[m^{-1}kgs^{-3}]$)) (Thermal source density in fluid.)." },
{ "name" : "solid_thermal_source",
"description" : "Output of the field solid_thermal_source (($[m^{-1}kgs^{-3}]$)) (Thermal source density in solid.)." },
{ "name" : "fluid_heat_exchange_rate",
"description" : "Output of the field fluid_heat_exchange_rate (($[s^{-1}]$)) (Heat exchange rate in fluid.)." },
{ "name" : "solid_heat_exchange_rate",
"description" : "Output of the field solid_heat_exchange_rate (($[s^{-1}]$)) (Heat exchange rate of source in solid.)." },
{ "name" : "fluid_ref_temperature",
"description" : "Output of the field fluid_ref_temperature (($[K]$)) (Reference temperature of source in fluid.)." },
{ "name" : "solid_ref_temperature",
"description" : "Output of the field solid_ref_temperature (($[K]$)) (Reference temperature in solid.)." },
{ "name" : "temperature",
"description" : "Output of the field temperature (($[K]$))." },
{ "name" : "fracture_sigma",
"description" : "Output of the field fracture_sigma (($[-]$)) (Coefficient of diffusive transfer through fractures (for each substance).)." },
{ "name" : "dg_penalty",
"description" : "Output of the field dg_penalty (($[-]$)) (Penalty parameter influencing the discontinuity of the solution (for each substance). Its default value 1 is sufficient in most cases. Higher value diminishes the inter-element jumps.)." },
{ "name" : "region_id",
"description" : "Output of the field region_id (($[-]$))." }]
},{
"id" : "8350a9dda11719b",
"input_type" : "Selection",
"name" : "LinSys_TYPE_selection",
"attributes" : {

},
"description" : "",
"values" : [
{ "name" : "Petsc",
"description" : "" },
{ "name" : "Bddc",
"description" : "" }]
},{
"id" : "116e136c9d8060ca",
"input_type" : "Selection",
"name" : "DG_output_fields",
"attributes" : {

},
"description" : "Auxiliary Selection",
"values" : [
{ "name" : "init_temperature",
"description" : "Output of the field init_temperature (($[K]$)) (Initial temperature.)." },
{ "name" : "porosity",
"description" : "Output of the field porosity (($[-]$)) (Porosity.)." },
{ "name" : "fluid_density",
"description" : "Output of the field fluid_density (($[m^{-3}kg]$)) (Density of fluid.)." },
{ "name" : "fluid_heat_capacity",
"description" : "Output of the field fluid_heat_capacity (($[m^{2}s^{-2}K^{-1}]$)) (Heat capacity of fluid.)." },
{ "name" : "fluid_heat_conductivity",
"description" : "Output of the field fluid_heat_conductivity (($[mkgs^{-3}K^{-1}]$)) (Heat conductivity of fluid.)." },
{ "name" : "solid_density",
"description" : "Output of the field solid_density (($[m^{-3}kg]$)) (Density of solid (rock).)." },
{ "name" : "solid_heat_capacity",
"description" : "Output of the field solid_heat_capacity (($[m^{2}s^{-2}K^{-1}]$)) (Heat capacity of solid (rock).)." },
{ "name" : "solid_heat_conductivity",
"description" : "Output of the field solid_heat_conductivity (($[mkgs^{-3}K^{-1}]$)) (Heat conductivity of solid (rock).)." },
{ "name" : "disp_l",
"description" : "Output of the field disp_l (($[m]$)) (Longitudal heat dispersivity in fluid.)." },
{ "name" : "disp_t",
"description" : "Output of the field disp_t (($[m]$)) (Transversal heat dispersivity in fluid.)." },
{ "name" : "fluid_thermal_source",
"description" : "Output of the field fluid_thermal_source (($[m^{-1}kgs^{-3}]$)) (Thermal source density in fluid.)." },
{ "name" : "solid_thermal_source",
"description" : "Output of the field solid_thermal_source (($[m^{-1}kgs^{-3}]$)) (Thermal source density in solid.)." },
{ "name" : "fluid_heat_exchange_rate",
"description" : "Output of the field fluid_heat_exchange_rate (($[s^{-1}]$)) (Heat exchange rate in fluid.)." },
{ "name" : "solid_heat_exchange_rate",
"description" : "Output of the field solid_heat_exchange_rate (($[s^{-1}]$)) (Heat exchange rate of source in solid.)." },
{ "name" : "fluid_ref_temperature",
"description" : "Output of the field fluid_ref_temperature (($[K]$)) (Reference temperature of source in fluid.)." },
{ "name" : "solid_ref_temperature",
"description" : "Output of the field solid_ref_temperature (($[K]$)) (Reference temperature in solid.)." },
{ "name" : "temperature",
"description" : "Output of the field temperature (($[K]$))." },
{ "name" : "fracture_sigma",
"description" : "Output of the field fracture_sigma (($[-]$)) (Coefficient of diffusive transfer through fractures (for each substance).)." },
{ "name" : "dg_penalty",
"description" : "Output of the field dg_penalty (($[-]$)) (Penalty parameter influencing the discontinuity of the solution (for each substance). Its default value 1 is sufficient in most cases. Higher value diminishes the inter-element jumps.)." },
{ "name" : "region_id",
"description" : "Output of the field region_id (($[-]$))." }]
},{
"id" : "1ed015df152461eb",
"input_type" : "Selection",
"name" : "Transport_TYPE_selection",
"attributes" : {

},
"description" : "",
"values" : [
{ "name" : "Convection_FV",
"description" : "" },
{ "name" : "ConvectionDiffusion_DG",
"description" : "" }]
},{
"id" : "32cf0d026b89e195",
"input_type" : "Selection",
"name" : "LinearODESolver_TYPE_selection",
"attributes" : {

},
"description" : "",
"values" : [
{ "name" : "PadeApproximant",
"description" : "" },
{ "name" : "LinearODEAnalytic",
"description" : "" }]
},{
"id" : "3b389b6baac64c44",
"input_type" : "Selection",
"name" : "DarcyFlow_TYPE_selection",
"attributes" : {

},
"description" : "",
"values" : [
{ "name" : "SteadyDarcy_MH",
"description" : "" },
{ "name" : "UnsteadyDarcy_MH",
"description" : "" },
{ "name" : "UnsteadyDarcy_LMH",
"description" : "" }]
},{
"id" : "4764c82b455ccee9",
"input_type" : "Selection",
"name" : "Field:R2 -> R[2,2]_TYPE_selection",
"attributes" : {

},
"description" : "",
"values" : [
{ "name" : "FieldConstant",
"description" : "" },
{ "name" : "FieldPython",
"description" : "" },
{ "name" : "FieldFormula",
"description" : "" },
{ "name" : "FieldElementwise",
"description" : "" },
{ "name" : "FieldInterpolatedP0",
"description" : "" }]
},{
"id" : "48cd43a40009d726",
"input_type" : "Selection",
"name" : "Field:R3 -> R[2]_TYPE_selection",
"attributes" : {

},
"description" : "",
"values" : [
{ "name" : "FieldConstant",
"description" : "" },
{ "name" : "FieldPython",
"description" : "" },
{ "name" : "FieldFormula",
"description" : "" },
{ "name" : "FieldElementwise",
"description" : "" },
{ "name" : "FieldInterpolatedP0",
"description" : "" }]
},{
"id" : "5448c47214ca2928",
"input_type" : "Selection",
"name" : "Field:R3 -> R[2,2]_TYPE_selection",
"attributes" : {

},
"description" : "",
"values" : [
{ "name" : "FieldConstant",
"description" : "" },
{ "name" : "FieldPython",
"description" : "" },
{ "name" : "FieldFormula",
"description" : "" },
{ "name" : "FieldElementwise",
"description" : "" },
{ "name" : "FieldInterpolatedP0",
"description" : "" }]
},{
"id" : "598790df6b23b31b",
"input_type" : "Selection",
"name" : "OutputTime_TYPE_selection",
"attributes" : {

},
"description" : "",
"values" : [
{ "name" : "vtk",
"description" : "" },
{ "name" : "gmsh",
"description" : "" }]
},{
"id" : "64f68e850520cce0",
"input_type" : "Selection",
"name" : "Field:R2 -> R[n]_TYPE_selection",
"attributes" : {

},
"description" : "",
"values" : [
{ "name" : "FieldConstant",
"description" : "" },
{ "name" : "FieldPython",
"description" : "" },
{ "name" : "FieldFormula",
"description" : "" },
{ "name" : "FieldElementwise",
"description" : "" },
{ "name" : "FieldInterpolatedP0",
"description" : "" }]
},{
"id" : "6c3e639869c2ea4b",
"input_type" : "Selection",
"name" : "ReactionTerm_TYPE_selection",
"attributes" : {

},
"description" : "",
"values" : [
{ "name" : "FirstOrderReaction",
"description" : "" },
{ "name" : "RadioactiveDecay",
"description" : "" },
{ "name" : "Sorption",
"description" : "" },
{ "name" : "SorptionMobile",
"description" : "" },
{ "name" : "SorptionImmobile",
"description" : "" },
{ "name" : "DualPorosity",
"description" : "" }]
},{
"id" : "6fcf54eec83e2f71",
"input_type" : "Selection",
"name" : "Field:R3 -> R[3,3]_TYPE_selection",
"attributes" : {

},
"description" : "",
"values" : [
{ "name" : "FieldConstant",
"description" : "" },
{ "name" : "FieldPython",
"description" : "" },
{ "name" : "FieldFormula",
"description" : "" },
{ "name" : "FieldElementwise",
"description" : "" },
{ "name" : "FieldInterpolatedP0",
"description" : "" }]
},{
"id" : "70f86f2ce980ee40",
"input_type" : "Selection",
"name" : "Field:R3 -> R_TYPE_selection",
"attributes" : {

},
"description" : "",
"values" : [
{ "name" : "FieldConstant",
"description" : "" },
{ "name" : "FieldPython",
"description" : "" },
{ "name" : "FieldFormula",
"description" : "" },
{ "name" : "FieldElementwise",
"description" : "" },
{ "name" : "FieldInterpolatedP0",
"description" : "" }]
},{
"id" : "72183e9d286c6342",
"input_type" : "Selection",
"name" : "Field:R2 -> R[3]_TYPE_selection",
"attributes" : {

},
"description" : "",
"values" : [
{ "name" : "FieldConstant",
"description" : "" },
{ "name" : "FieldPython",
"description" : "" },
{ "name" : "FieldFormula",
"description" : "" },
{ "name" : "FieldElementwise",
"description" : "" },
{ "name" : "FieldInterpolatedP0",
"description" : "" }]
},{
"id" : "84b335b2cfb77b66",
"input_type" : "Selection",
"name" : "EmptyAbstract_TYPE_selection",
"attributes" : {

},
"description" : "",
"values" : [
]
},{
"id" : "914ba4ba722b4841",
"input_type" : "Selection",
"name" : "Field:R3 -> R[n]_TYPE_selection",
"attributes" : {

},
"description" : "",
"values" : [
{ "name" : "FieldConstant",
"description" : "" },
{ "name" : "FieldPython",
"description" : "" },
{ "name" : "FieldFormula",
"description" : "" },
{ "name" : "FieldElementwise",
"description" : "" },
{ "name" : "FieldInterpolatedP0",
"description" : "" }]
},{
"id" : "9ba35a301b321f24",
"input_type" : "Selection",
"name" : "Field:R2 -> R[3,3]_TYPE_selection",
"attributes" : {

},
"description" : "",
"values" : [
{ "name" : "FieldConstant",
"description" : "" },
{ "name" : "FieldPython",
"description" : "" },
{ "name" : "FieldFormula",
"description" : "" },
{ "name" : "FieldElementwise",
"description" : "" },
{ "name" : "FieldInterpolatedP0",
"description" : "" }]
},{
"id" : "b0bf265898e2625b",
"input_type" : "Selection",
"name" : "Problem_TYPE_selection",
"attributes" : {

},
"description" : "",
"values" : [
{ "name" : "SequentialCoupling",
"description" : "" }]
},{
"id" : "c7a8074e697a34aa",
"input_type" : "Selection",
"name" : "Field:R3 -> R[3]_TYPE_selection",
"attributes" : {

},
"description" : "",
"values" : [
{ "name" : "FieldConstant",
"description" : "" },
{ "name" : "FieldPython",
"description" : "" },
{ "name" : "FieldFormula",
"description" : "" },
{ "name" : "FieldElementwise",
"description" : "" },
{ "name" : "FieldInterpolatedP0",
"description" : "" }]
},{
"id" : "d72509f7cad33f3e",
"input_type" : "Selection",
"name" : "DarcyMFOutput_output_fields",
"attributes" : {

},
"description" : "Auxiliary selection.",
"values" : [
{ "name" : "pressure_p0",
"description" : "Output of the field pressure_p0 (($[m]$))." },
{ "name" : "pressure_p1",
"description" : "Output of the field pressure_p1 (($[m]$))." },
{ "name" : "piezo_head_p0",
"description" : "Output of the field piezo_head_p0 (($[m]$))." },
{ "name" : "velocity_p0",
"description" : "Output of the field velocity_p0 (($[ms^{-1}]$))." },
{ "name" : "subdomain",
"description" : "Output of the field subdomain (($[-]$))." },
{ "name" : "region_id",
"description" : "Output of the field region_id (($[-]$))." },
{ "name" : "pressure_diff",
"description" : "Output of the field pressure_diff (($[m]$))." },
{ "name" : "velocity_diff",
"description" : "Output of the field velocity_diff (($[ms^{-1}]$))." },
{ "name" : "div_diff",
"description" : "Output of the field div_diff (($[s^{-1}]$))." }]
},{
"id" : "dbad3657d0c05496",
"input_type" : "Selection",
"name" : "Field:R2 -> R[2]_TYPE_selection",
"attributes" : {

},
"description" : "",
"values" : [
{ "name" : "FieldConstant",
"description" : "" },
{ "name" : "FieldPython",
"description" : "" },
{ "name" : "FieldFormula",
"description" : "" },
{ "name" : "FieldElementwise",
"description" : "" },
{ "name" : "FieldInterpolatedP0",
"description" : "" }]
},{
"id" : "e06722ba88a95808",
"input_type" : "Selection",
"name" : "Field:R2 -> R_TYPE_selection",
"attributes" : {

},
"description" : "",
"values" : [
{ "name" : "FieldConstant",
"description" : "" },
{ "name" : "FieldPython",
"description" : "" },
{ "name" : "FieldFormula",
"description" : "" },
{ "name" : "FieldElementwise",
"description" : "" },
{ "name" : "FieldInterpolatedP0",
"description" : "" }]
},{
"id" : "e0f35bd22305f91a",
"input_type" : "Selection",
"name" : "Transport_TYPE_selection",
"attributes" : {

},
"description" : "",
"values" : [
{ "name" : "Transport_OS",
"description" : "" },
{ "name" : "HeatTransfer_DG",
"description" : "" }]
},{
"id" : "ee0a680964f38c15",
"input_type" : "Selection",
"name" : "DG_output_fields",
"attributes" : {

},
"description" : "Auxiliary Selection",
"values" : [
{ "name" : "porosity",
"description" : "Output of the field porosity (($[-]$)) (Mobile porosity)." },
{ "name" : "sources_density",
"description" : "Output of the field sources_density (($[m^{-3}kgs^{-1}]$)) (Density of concentration sources.)." },
{ "name" : "sources_sigma",
"description" : "Output of the field sources_sigma (($[s^{-1}]$)) (Concentration flux.)." },
{ "name" : "sources_conc",
"description" : "Output of the field sources_conc (($[m^{-3}kg]$)) (Concentration sources threshold.)." },
{ "name" : "init_conc",
"description" : "Output of the field init_conc (($[m^{-3}kg]$)) (Initial concentrations.)." },
{ "name" : "disp_l",
"description" : "Output of the field disp_l (($[m]$)) (Longitudal dispersivity (for each substance).)." },
{ "name" : "disp_t",
"description" : "Output of the field disp_t (($[m]$)) (Transversal dispersivity (for each substance).)." },
{ "name" : "diff_m",
"description" : "Output of the field diff_m (($[m^{2}s^{-1}]$)) (Molecular diffusivity (for each substance).)." },
{ "name" : "conc",
"description" : "Output of the field conc (($[m^{-3}kg]$))." },
{ "name" : "fracture_sigma",
"description" : "Output of the field fracture_sigma (($[-]$)) (Coefficient of diffusive transfer through fractures (for each substance).)." },
{ "name" : "dg_penalty",
"description" : "Output of the field dg_penalty (($[-]$)) (Penalty parameter influencing the discontinuity of the solution (for each substance). Its default value 1 is sufficient in most cases. Higher value diminishes the inter-element jumps.)." },
{ "name" : "region_id",
"description" : "Output of the field region_id (($[-]$))." }]
},{
"id" : "35c37bb2e1103fd0",
"input_type" : "Abstract",
"name" : "EmptyAbstract",
"attributes" : {

},
"description" : "",
"implementations" : [
]},{
"id" : "594f206b6ebda5b7",
"input_type" : "Abstract",
"name" : "Field:R2 -> R[2,2]",
"attributes" : {

},
"description" : "Abstract for all time-space functions.",
"default_descendant" : "432ae626dd447d75",
"implementations" : [
"432ae626dd447d75",

"7790c95df55dcf46",

"bd08a8fb1d7a1e22",

"db7553d8a00dfdc4",

"3e1761e6258d565b"]},{
"id" : "432ae626dd447d75",
"input_type" : "Record",
"name" : "FieldConstant",
"attributes" : {

},
"description" : "R2 -> R[2,2] Field constant in space.",
"implements" : [ "594f206b6ebda5b7" ],
"reducible_to_key" : "value",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldConstant" },
"type" : "29b5533100b6f60f"
},
{ "key" : "value",
"description" : "Value of the constant field.\nFor vector values, you can use scalar value to enter constant vector.\nFor square (($N\\times N$))-matrix values, you can use:\n - vector of size (($N$)) to enter diagonal matrix\n\n - vector of size (($\\frac12N(N+1)$)) to enter symmetric matrix (upper triangle, row by row)\n - scalar to enter multiple of the unit matrix.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "9bfa4bcd4482892d"
}]
},{
"id" : "9bfa4bcd4482892d",
"input_type" : "Array",
"name" : "array_of_array_of_element_input_type",
"attributes" : {

},
"range" : [1, 4294967295],
"subtype" : "f6b8a797184314b0"
},
{
"id" : "f6b8a797184314b0",
"input_type" : "Array",
"name" : "array_of_element_input_type",
"attributes" : {

},
"range" : [1, 4294967295],
"subtype" : "75d8e11a6158d19b"
},
{
"id" : "75d8e11a6158d19b",
"input_type" : "Parameter",
"name" : "element_input_type",
"attributes" : {

}
},{
"id" : "7790c95df55dcf46",
"input_type" : "Record",
"name" : "FieldPython",
"attributes" : {

},
"description" : "R2 -> R[2,2] Field given by a Python script.",
"implements" : [ "594f206b6ebda5b7" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldPython" },
"type" : "29b5533100b6f60f"
},
{ "key" : "script_string",
"description" : "Python script given as in place string",
"default" : { "type" : "value at read time",
"value" : "Obligatory if 'script_file' is not given." },
"type" : "29b5533100b6f60f"
},
{ "key" : "script_file",
"description" : "Python script given as external file",
"default" : { "type" : "value at read time",
"value" : "Obligatory if 'script_striong' is not given." },
"type" : "89a808b8e9515bf8"
},
{ "key" : "function",
"description" : "Function in the given script that returns tuple containing components of the return type.\nFor NxM tensor values: tensor(row,col) = tuple( M*row + col ).",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f"
}]
},{
"id" : "bd08a8fb1d7a1e22",
"input_type" : "Record",
"name" : "FieldFormula",
"attributes" : {

},
"description" : "R2 -> R[2,2] Field given by runtime interpreted formula.",
"implements" : [ "594f206b6ebda5b7" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldFormula" },
"type" : "29b5533100b6f60f"
},
{ "key" : "value",
"description" : "String, array of strings, or matrix of strings with formulas for individual entries of scalar, vector, or tensor value respectively.\nFor vector values, you can use just one string to enter homogeneous vector.\nFor square (($N\\times N$))-matrix values, you can use:\n\n - array of strings of size (($N$)) to enter diagonal matrix\n - array of strings of size (($\\frac12N(N+1)$)) to enter symmetric matrix (upper triangle, row by row)\n - just one string to enter (spatially variable) multiple of the unit matrix.\nFormula can contain variables ```x,y,z,t``` and usual operators and functions.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "9c087d0fc10f3910"
}]
},{
"id" : "9c087d0fc10f3910",
"input_type" : "Array",
"name" : "array_of_array_of_String",
"attributes" : {
"generic_type" : "9bfa4bcd4482892d",
"parameters" : [{ "element_input_type" : "29b5533100b6f60f" }]
},
"range" : [1, 4294967295],
"subtype" : "ee2d78fdcbf9fa6a"
},
{
"id" : "ee2d78fdcbf9fa6a",
"input_type" : "Array",
"name" : "array_of_String",
"attributes" : {
"generic_type" : "f6b8a797184314b0",
"parameters" : [{ "element_input_type" : "29b5533100b6f60f" }]
},
"range" : [1, 4294967295],
"subtype" : "29b5533100b6f60f"
},
{
"id" : "db7553d8a00dfdc4",
"input_type" : "Record",
"name" : "FieldElementwise",
"attributes" : {

},
"description" : "R2 -> R[2,2] Field constant in space.",
"implements" : [ "594f206b6ebda5b7" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldElementwise" },
"type" : "29b5533100b6f60f"
},
{ "key" : "gmsh_file",
"description" : "Input file with ASCII GMSH file format.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "89a808b8e9515bf8"
},
{ "key" : "field_name",
"description" : "The values of the Field are read from the ```$ElementData``` section with field name given by this key.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f"
}]
},{
"id" : "3e1761e6258d565b",
"input_type" : "Record",
"name" : "FieldInterpolatedP0",
"attributes" : {

},
"description" : "R2 -> R[2,2] Field constant in space.",
"implements" : [ "594f206b6ebda5b7" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldInterpolatedP0" },
"type" : "29b5533100b6f60f"
},
{ "key" : "gmsh_file",
"description" : "Input file with ASCII GMSH file format.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "89a808b8e9515bf8"
},
{ "key" : "field_name",
"description" : "The values of the Field are read from the ```$ElementData``` section with field name given by this key.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f"
}]
},{
"id" : "594f206bc5a1242f",
"input_type" : "Abstract",
"name" : "Field:R2 -> R[3,3]",
"attributes" : {

},
"description" : "Abstract for all time-space functions.",
"default_descendant" : "d17783b8bacbb13d",
"implementations" : [
"d17783b8bacbb13d",

"40c5b8161594a24",

"52f319baa61d2eff",

"a769ddb4a9ec5f6f",

"8c7e5ffc5d0f3a53"]},{
"id" : "d17783b8bacbb13d",
"input_type" : "Record",
"name" : "FieldConstant",
"attributes" : {

},
"description" : "R2 -> R[3,3] Field constant in space.",
"implements" : [ "594f206bc5a1242f" ],
"reducible_to_key" : "value",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldConstant" },
"type" : "29b5533100b6f60f"
},
{ "key" : "value",
"description" : "Value of the constant field.\nFor vector values, you can use scalar value to enter constant vector.\nFor square (($N\\times N$))-matrix values, you can use:\n - vector of size (($N$)) to enter diagonal matrix\n\n - vector of size (($\\frac12N(N+1)$)) to enter symmetric matrix (upper triangle, row by row)\n - scalar to enter multiple of the unit matrix.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "9bfa4bcd4482892d"
}]
},{
"id" : "40c5b8161594a24",
"input_type" : "Record",
"name" : "FieldPython",
"attributes" : {

},
"description" : "R2 -> R[3,3] Field given by a Python script.",
"implements" : [ "594f206bc5a1242f" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldPython" },
"type" : "29b5533100b6f60f"
},
{ "key" : "script_string",
"description" : "Python script given as in place string",
"default" : { "type" : "value at read time",
"value" : "Obligatory if 'script_file' is not given." },
"type" : "29b5533100b6f60f"
},
{ "key" : "script_file",
"description" : "Python script given as external file",
"default" : { "type" : "value at read time",
"value" : "Obligatory if 'script_striong' is not given." },
"type" : "89a808b8e9515bf8"
},
{ "key" : "function",
"description" : "Function in the given script that returns tuple containing components of the return type.\nFor NxM tensor values: tensor(row,col) = tuple( M*row + col ).",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f"
}]
},{
"id" : "52f319baa61d2eff",
"input_type" : "Record",
"name" : "FieldFormula",
"attributes" : {

},
"description" : "R2 -> R[3,3] Field given by runtime interpreted formula.",
"implements" : [ "594f206bc5a1242f" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldFormula" },
"type" : "29b5533100b6f60f"
},
{ "key" : "value",
"description" : "String, array of strings, or matrix of strings with formulas for individual entries of scalar, vector, or tensor value respectively.\nFor vector values, you can use just one string to enter homogeneous vector.\nFor square (($N\\times N$))-matrix values, you can use:\n\n - array of strings of size (($N$)) to enter diagonal matrix\n - array of strings of size (($\\frac12N(N+1)$)) to enter symmetric matrix (upper triangle, row by row)\n - just one string to enter (spatially variable) multiple of the unit matrix.\nFormula can contain variables ```x,y,z,t``` and usual operators and functions.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "9c087d0fc10f3910"
}]
},{
"id" : "a769ddb4a9ec5f6f",
"input_type" : "Record",
"name" : "FieldElementwise",
"attributes" : {

},
"description" : "R2 -> R[3,3] Field constant in space.",
"implements" : [ "594f206bc5a1242f" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldElementwise" },
"type" : "29b5533100b6f60f"
},
{ "key" : "gmsh_file",
"description" : "Input file with ASCII GMSH file format.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "89a808b8e9515bf8"
},
{ "key" : "field_name",
"description" : "The values of the Field are read from the ```$ElementData``` section with field name given by this key.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f"
}]
},{
"id" : "8c7e5ffc5d0f3a53",
"input_type" : "Record",
"name" : "FieldInterpolatedP0",
"attributes" : {

},
"description" : "R2 -> R[3,3] Field constant in space.",
"implements" : [ "594f206bc5a1242f" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldInterpolatedP0" },
"type" : "29b5533100b6f60f"
},
{ "key" : "gmsh_file",
"description" : "Input file with ASCII GMSH file format.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "89a808b8e9515bf8"
},
{ "key" : "field_name",
"description" : "The values of the Field are read from the ```$ElementData``` section with field name given by this key.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f"
}]
},{
"id" : "6f02d57875e30979",
"input_type" : "Abstract",
"name" : "Field:R2 -> R",
"attributes" : {

},
"description" : "Abstract for all time-space functions.",
"default_descendant" : "c5d3a96ca9be5ff0",
"implementations" : [
"c5d3a96ca9be5ff0",

"bd1b59ec270121ad",

"e70f9ac606a49ebe",

"539cde5ac01be07c",

"2fa5ba76c5bc0bf0"]},{
"id" : "c5d3a96ca9be5ff0",
"input_type" : "Record",
"name" : "FieldConstant",
"attributes" : {

},
"description" : "R2 -> R Field constant in space.",
"implements" : [ "6f02d57875e30979" ],
"reducible_to_key" : "value",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldConstant" },
"type" : "29b5533100b6f60f"
},
{ "key" : "value",
"description" : "Value of the constant field.\nFor vector values, you can use scalar value to enter constant vector.\nFor square (($N\\times N$))-matrix values, you can use:\n - vector of size (($N$)) to enter diagonal matrix\n\n - vector of size (($\\frac12N(N+1)$)) to enter symmetric matrix (upper triangle, row by row)\n - scalar to enter multiple of the unit matrix.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "75d8e11a6158d19b"
}]
},{
"id" : "bd1b59ec270121ad",
"input_type" : "Record",
"name" : "FieldPython",
"attributes" : {

},
"description" : "R2 -> R Field given by a Python script.",
"implements" : [ "6f02d57875e30979" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldPython" },
"type" : "29b5533100b6f60f"
},
{ "key" : "script_string",
"description" : "Python script given as in place string",
"default" : { "type" : "value at read time",
"value" : "Obligatory if 'script_file' is not given." },
"type" : "29b5533100b6f60f"
},
{ "key" : "script_file",
"description" : "Python script given as external file",
"default" : { "type" : "value at read time",
"value" : "Obligatory if 'script_striong' is not given." },
"type" : "89a808b8e9515bf8"
},
{ "key" : "function",
"description" : "Function in the given script that returns tuple containing components of the return type.\nFor NxM tensor values: tensor(row,col) = tuple( M*row + col ).",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f"
}]
},{
"id" : "e70f9ac606a49ebe",
"input_type" : "Record",
"name" : "FieldFormula",
"attributes" : {

},
"description" : "R2 -> R Field given by runtime interpreted formula.",
"implements" : [ "6f02d57875e30979" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldFormula" },
"type" : "29b5533100b6f60f"
},
{ "key" : "value",
"description" : "String, array of strings, or matrix of strings with formulas for individual entries of scalar, vector, or tensor value respectively.\nFor vector values, you can use just one string to enter homogeneous vector.\nFor square (($N\\times N$))-matrix values, you can use:\n\n - array of strings of size (($N$)) to enter diagonal matrix\n - array of strings of size (($\\frac12N(N+1)$)) to enter symmetric matrix (upper triangle, row by row)\n - just one string to enter (spatially variable) multiple of the unit matrix.\nFormula can contain variables ```x,y,z,t``` and usual operators and functions.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f"
}]
},{
"id" : "539cde5ac01be07c",
"input_type" : "Record",
"name" : "FieldElementwise",
"attributes" : {

},
"description" : "R2 -> R Field constant in space.",
"implements" : [ "6f02d57875e30979" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldElementwise" },
"type" : "29b5533100b6f60f"
},
{ "key" : "gmsh_file",
"description" : "Input file with ASCII GMSH file format.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "89a808b8e9515bf8"
},
{ "key" : "field_name",
"description" : "The values of the Field are read from the ```$ElementData``` section with field name given by this key.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f"
}]
},{
"id" : "2fa5ba76c5bc0bf0",
"input_type" : "Record",
"name" : "FieldInterpolatedP0",
"attributes" : {

},
"description" : "R2 -> R Field constant in space.",
"implements" : [ "6f02d57875e30979" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldInterpolatedP0" },
"type" : "29b5533100b6f60f"
},
{ "key" : "gmsh_file",
"description" : "Input file with ASCII GMSH file format.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "89a808b8e9515bf8"
},
{ "key" : "field_name",
"description" : "The values of the Field are read from the ```$ElementData``` section with field name given by this key.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f"
}]
},{
"id" : "6f02db21b62f8e72",
"input_type" : "Abstract",
"name" : "Field:R3 -> R",
"attributes" : {

},
"description" : "Abstract for all time-space functions.",
"default_descendant" : "9fcdfb05285769ac",
"implementations" : [
"9fcdfb05285769ac",

"934ea47ec9ed8e72",

"e2a681acf463efa4",

"93768943588374c9",

"523b5fc3fc537355"]},{
"id" : "9fcdfb05285769ac",
"input_type" : "Record",
"name" : "FieldConstant",
"attributes" : {

},
"description" : "R3 -> R Field constant in space.",
"implements" : [ "6f02db21b62f8e72" ],
"reducible_to_key" : "value",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldConstant" },
"type" : "29b5533100b6f60f"
},
{ "key" : "value",
"description" : "Value of the constant field.\nFor vector values, you can use scalar value to enter constant vector.\nFor square (($N\\times N$))-matrix values, you can use:\n - vector of size (($N$)) to enter diagonal matrix\n\n - vector of size (($\\frac12N(N+1)$)) to enter symmetric matrix (upper triangle, row by row)\n - scalar to enter multiple of the unit matrix.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "75d8e11a6158d19b"
}]
},{
"id" : "934ea47ec9ed8e72",
"input_type" : "Record",
"name" : "FieldPython",
"attributes" : {

},
"description" : "R3 -> R Field given by a Python script.",
"implements" : [ "6f02db21b62f8e72" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldPython" },
"type" : "29b5533100b6f60f"
},
{ "key" : "script_string",
"description" : "Python script given as in place string",
"default" : { "type" : "value at read time",
"value" : "Obligatory if 'script_file' is not given." },
"type" : "29b5533100b6f60f"
},
{ "key" : "script_file",
"description" : "Python script given as external file",
"default" : { "type" : "value at read time",
"value" : "Obligatory if 'script_striong' is not given." },
"type" : "89a808b8e9515bf8"
},
{ "key" : "function",
"description" : "Function in the given script that returns tuple containing components of the return type.\nFor NxM tensor values: tensor(row,col) = tuple( M*row + col ).",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f"
}]
},{
"id" : "e2a681acf463efa4",
"input_type" : "Record",
"name" : "FieldFormula",
"attributes" : {

},
"description" : "R3 -> R Field given by runtime interpreted formula.",
"implements" : [ "6f02db21b62f8e72" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldFormula" },
"type" : "29b5533100b6f60f"
},
{ "key" : "value",
"description" : "String, array of strings, or matrix of strings with formulas for individual entries of scalar, vector, or tensor value respectively.\nFor vector values, you can use just one string to enter homogeneous vector.\nFor square (($N\\times N$))-matrix values, you can use:\n\n - array of strings of size (($N$)) to enter diagonal matrix\n - array of strings of size (($\\frac12N(N+1)$)) to enter symmetric matrix (upper triangle, row by row)\n - just one string to enter (spatially variable) multiple of the unit matrix.\nFormula can contain variables ```x,y,z,t``` and usual operators and functions.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f"
}]
},{
"id" : "93768943588374c9",
"input_type" : "Record",
"name" : "FieldElementwise",
"attributes" : {

},
"description" : "R3 -> R Field constant in space.",
"implements" : [ "6f02db21b62f8e72" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldElementwise" },
"type" : "29b5533100b6f60f"
},
{ "key" : "gmsh_file",
"description" : "Input file with ASCII GMSH file format.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "89a808b8e9515bf8"
},
{ "key" : "field_name",
"description" : "The values of the Field are read from the ```$ElementData``` section with field name given by this key.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f"
}]
},{
"id" : "523b5fc3fc537355",
"input_type" : "Record",
"name" : "FieldInterpolatedP0",
"attributes" : {

},
"description" : "R3 -> R Field constant in space.",
"implements" : [ "6f02db21b62f8e72" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldInterpolatedP0" },
"type" : "29b5533100b6f60f"
},
{ "key" : "gmsh_file",
"description" : "Input file with ASCII GMSH file format.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "89a808b8e9515bf8"
},
{ "key" : "field_name",
"description" : "The values of the Field are read from the ```$ElementData``` section with field name given by this key.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f"
}]
},{
"id" : "d21385d6b5732da4",
"input_type" : "Abstract",
"name" : "Field:R3 -> R[2]",
"attributes" : {

},
"description" : "Abstract for all time-space functions.",
"default_descendant" : "12477304e8c6513",
"implementations" : [
"12477304e8c6513",

"2d33737afe948238",

"7bb6bee158f635b4",

"2f40f68a6ff9a19e",

"1a4ce0fdc7c5c05b"]},{
"id" : "12477304e8c6513",
"input_type" : "Record",
"name" : "FieldConstant",
"attributes" : {

},
"description" : "R3 -> R[2] Field constant in space.",
"implements" : [ "d21385d6b5732da4" ],
"reducible_to_key" : "value",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldConstant" },
"type" : "29b5533100b6f60f"
},
{ "key" : "value",
"description" : "Value of the constant field.\nFor vector values, you can use scalar value to enter constant vector.\nFor square (($N\\times N$))-matrix values, you can use:\n - vector of size (($N$)) to enter diagonal matrix\n\n - vector of size (($\\frac12N(N+1)$)) to enter symmetric matrix (upper triangle, row by row)\n - scalar to enter multiple of the unit matrix.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "f6b8a75658431774"
}]
},{
"id" : "f6b8a75658431774",
"input_type" : "Array",
"name" : "array_of_element_input_type",
"attributes" : {

},
"range" : [1, 2],
"subtype" : "75d8e11a6158d19b"
},
{
"id" : "2d33737afe948238",
"input_type" : "Record",
"name" : "FieldPython",
"attributes" : {

},
"description" : "R3 -> R[2] Field given by a Python script.",
"implements" : [ "d21385d6b5732da4" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldPython" },
"type" : "29b5533100b6f60f"
},
{ "key" : "script_string",
"description" : "Python script given as in place string",
"default" : { "type" : "value at read time",
"value" : "Obligatory if 'script_file' is not given." },
"type" : "29b5533100b6f60f"
},
{ "key" : "script_file",
"description" : "Python script given as external file",
"default" : { "type" : "value at read time",
"value" : "Obligatory if 'script_striong' is not given." },
"type" : "89a808b8e9515bf8"
},
{ "key" : "function",
"description" : "Function in the given script that returns tuple containing components of the return type.\nFor NxM tensor values: tensor(row,col) = tuple( M*row + col ).",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f"
}]
},{
"id" : "7bb6bee158f635b4",
"input_type" : "Record",
"name" : "FieldFormula",
"attributes" : {

},
"description" : "R3 -> R[2] Field given by runtime interpreted formula.",
"implements" : [ "d21385d6b5732da4" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldFormula" },
"type" : "29b5533100b6f60f"
},
{ "key" : "value",
"description" : "String, array of strings, or matrix of strings with formulas for individual entries of scalar, vector, or tensor value respectively.\nFor vector values, you can use just one string to enter homogeneous vector.\nFor square (($N\\times N$))-matrix values, you can use:\n\n - array of strings of size (($N$)) to enter diagonal matrix\n - array of strings of size (($\\frac12N(N+1)$)) to enter symmetric matrix (upper triangle, row by row)\n - just one string to enter (spatially variable) multiple of the unit matrix.\nFormula can contain variables ```x,y,z,t``` and usual operators and functions.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "48509b4ba6cb35db"
}]
},{
"id" : "48509b4ba6cb35db",
"input_type" : "Array",
"name" : "array_of_String",
"attributes" : {
"generic_type" : "f6b8a75658431774",
"parameters" : [{ "element_input_type" : "29b5533100b6f60f" }]
},
"range" : [1, 2],
"subtype" : "29b5533100b6f60f"
},
{
"id" : "2f40f68a6ff9a19e",
"input_type" : "Record",
"name" : "FieldElementwise",
"attributes" : {

},
"description" : "R3 -> R[2] Field constant in space.",
"implements" : [ "d21385d6b5732da4" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldElementwise" },
"type" : "29b5533100b6f60f"
},
{ "key" : "gmsh_file",
"description" : "Input file with ASCII GMSH file format.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "89a808b8e9515bf8"
},
{ "key" : "field_name",
"description" : "The values of the Field are read from the ```$ElementData``` section with field name given by this key.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f"
}]
},{
"id" : "1a4ce0fdc7c5c05b",
"input_type" : "Record",
"name" : "FieldInterpolatedP0",
"attributes" : {

},
"description" : "R3 -> R[2] Field constant in space.",
"implements" : [ "d21385d6b5732da4" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldInterpolatedP0" },
"type" : "29b5533100b6f60f"
},
{ "key" : "gmsh_file",
"description" : "Input file with ASCII GMSH file format.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "89a808b8e9515bf8"
},
{ "key" : "field_name",
"description" : "The values of the Field are read from the ```$ElementData``` section with field name given by this key.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f"
}]
},{
"id" : "d21385d6b5747eb3",
"input_type" : "Abstract",
"name" : "Field:R3 -> R[3]",
"attributes" : {

},
"description" : "Abstract for all time-space functions.",
"default_descendant" : "5d3d79656d703990",
"implementations" : [
"5d3d79656d703990",

"7f0df0904d0e86dc",

"4867a730b4102c10",

"693df0732cb20dcd",

"2b51f140b07dca73"]},{
"id" : "5d3d79656d703990",
"input_type" : "Record",
"name" : "FieldConstant",
"attributes" : {

},
"description" : "R3 -> R[3] Field constant in space.",
"implements" : [ "d21385d6b5747eb3" ],
"reducible_to_key" : "value",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldConstant" },
"type" : "29b5533100b6f60f"
},
{ "key" : "value",
"description" : "Value of the constant field.\nFor vector values, you can use scalar value to enter constant vector.\nFor square (($N\\times N$))-matrix values, you can use:\n - vector of size (($N$)) to enter diagonal matrix\n\n - vector of size (($\\frac12N(N+1)$)) to enter symmetric matrix (upper triangle, row by row)\n - scalar to enter multiple of the unit matrix.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "f6b8a756584317b5"
}]
},{
"id" : "f6b8a756584317b5",
"input_type" : "Array",
"name" : "array_of_element_input_type",
"attributes" : {

},
"range" : [1, 3],
"subtype" : "75d8e11a6158d19b"
},
{
"id" : "7f0df0904d0e86dc",
"input_type" : "Record",
"name" : "FieldPython",
"attributes" : {

},
"description" : "R3 -> R[3] Field given by a Python script.",
"implements" : [ "d21385d6b5747eb3" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldPython" },
"type" : "29b5533100b6f60f"
},
{ "key" : "script_string",
"description" : "Python script given as in place string",
"default" : { "type" : "value at read time",
"value" : "Obligatory if 'script_file' is not given." },
"type" : "29b5533100b6f60f"
},
{ "key" : "script_file",
"description" : "Python script given as external file",
"default" : { "type" : "value at read time",
"value" : "Obligatory if 'script_striong' is not given." },
"type" : "89a808b8e9515bf8"
},
{ "key" : "function",
"description" : "Function in the given script that returns tuple containing components of the return type.\nFor NxM tensor values: tensor(row,col) = tuple( M*row + col ).",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f"
}]
},{
"id" : "4867a730b4102c10",
"input_type" : "Record",
"name" : "FieldFormula",
"attributes" : {

},
"description" : "R3 -> R[3] Field given by runtime interpreted formula.",
"implements" : [ "d21385d6b5747eb3" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldFormula" },
"type" : "29b5533100b6f60f"
},
{ "key" : "value",
"description" : "String, array of strings, or matrix of strings with formulas for individual entries of scalar, vector, or tensor value respectively.\nFor vector values, you can use just one string to enter homogeneous vector.\nFor square (($N\\times N$))-matrix values, you can use:\n\n - array of strings of size (($N$)) to enter diagonal matrix\n - array of strings of size (($\\frac12N(N+1)$)) to enter symmetric matrix (upper triangle, row by row)\n - just one string to enter (spatially variable) multiple of the unit matrix.\nFormula can contain variables ```x,y,z,t``` and usual operators and functions.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "48509b4a151fae7d"
}]
},{
"id" : "48509b4a151fae7d",
"input_type" : "Array",
"name" : "array_of_String",
"attributes" : {
"generic_type" : "f6b8a756584317b5",
"parameters" : [{ "element_input_type" : "29b5533100b6f60f" }]
},
"range" : [1, 3],
"subtype" : "29b5533100b6f60f"
},
{
"id" : "693df0732cb20dcd",
"input_type" : "Record",
"name" : "FieldElementwise",
"attributes" : {

},
"description" : "R3 -> R[3] Field constant in space.",
"implements" : [ "d21385d6b5747eb3" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldElementwise" },
"type" : "29b5533100b6f60f"
},
{ "key" : "gmsh_file",
"description" : "Input file with ASCII GMSH file format.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "89a808b8e9515bf8"
},
{ "key" : "field_name",
"description" : "The values of the Field are read from the ```$ElementData``` section with field name given by this key.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f"
}]
},{
"id" : "2b51f140b07dca73",
"input_type" : "Record",
"name" : "FieldInterpolatedP0",
"attributes" : {

},
"description" : "R3 -> R[3] Field constant in space.",
"implements" : [ "d21385d6b5747eb3" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldInterpolatedP0" },
"type" : "29b5533100b6f60f"
},
{ "key" : "gmsh_file",
"description" : "Input file with ASCII GMSH file format.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "89a808b8e9515bf8"
},
{ "key" : "field_name",
"description" : "The values of the Field are read from the ```$ElementData``` section with field name given by this key.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f"
}]
},{
"id" : "d21385d6b7068e57",
"input_type" : "Abstract",
"name" : "Field:R3 -> R[n]",
"attributes" : {

},
"description" : "Abstract for all time-space functions.",
"default_descendant" : "e3c18513384f1891",
"implementations" : [
"e3c18513384f1891",

"d2deec5b353d1ae",

"bbc24b85ba97509",

"c83a3add96a2ac81",

"c1cf6b0899f12cd8"]},{
"id" : "e3c18513384f1891",
"input_type" : "Record",
"name" : "FieldConstant",
"attributes" : {

},
"description" : "R3 -> R[n] Field constant in space.",
"implements" : [ "d21385d6b7068e57" ],
"reducible_to_key" : "value",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldConstant" },
"type" : "29b5533100b6f60f"
},
{ "key" : "value",
"description" : "Value of the constant field.\nFor vector values, you can use scalar value to enter constant vector.\nFor square (($N\\times N$))-matrix values, you can use:\n - vector of size (($N$)) to enter diagonal matrix\n\n - vector of size (($\\frac12N(N+1)$)) to enter symmetric matrix (upper triangle, row by row)\n - scalar to enter multiple of the unit matrix.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "f6b8a797184314b0"
}]
},{
"id" : "d2deec5b353d1ae",
"input_type" : "Record",
"name" : "FieldPython",
"attributes" : {

},
"description" : "R3 -> R[n] Field given by a Python script.",
"implements" : [ "d21385d6b7068e57" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldPython" },
"type" : "29b5533100b6f60f"
},
{ "key" : "script_string",
"description" : "Python script given as in place string",
"default" : { "type" : "value at read time",
"value" : "Obligatory if 'script_file' is not given." },
"type" : "29b5533100b6f60f"
},
{ "key" : "script_file",
"description" : "Python script given as external file",
"default" : { "type" : "value at read time",
"value" : "Obligatory if 'script_striong' is not given." },
"type" : "89a808b8e9515bf8"
},
{ "key" : "function",
"description" : "Function in the given script that returns tuple containing components of the return type.\nFor NxM tensor values: tensor(row,col) = tuple( M*row + col ).",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f"
}]
},{
"id" : "bbc24b85ba97509",
"input_type" : "Record",
"name" : "FieldFormula",
"attributes" : {

},
"description" : "R3 -> R[n] Field given by runtime interpreted formula.",
"implements" : [ "d21385d6b7068e57" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldFormula" },
"type" : "29b5533100b6f60f"
},
{ "key" : "value",
"description" : "String, array of strings, or matrix of strings with formulas for individual entries of scalar, vector, or tensor value respectively.\nFor vector values, you can use just one string to enter homogeneous vector.\nFor square (($N\\times N$))-matrix values, you can use:\n\n - array of strings of size (($N$)) to enter diagonal matrix\n - array of strings of size (($\\frac12N(N+1)$)) to enter symmetric matrix (upper triangle, row by row)\n - just one string to enter (spatially variable) multiple of the unit matrix.\nFormula can contain variables ```x,y,z,t``` and usual operators and functions.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "ee2d78fdcbf9fa6a"
}]
},{
"id" : "c83a3add96a2ac81",
"input_type" : "Record",
"name" : "FieldElementwise",
"attributes" : {

},
"description" : "R3 -> R[n] Field constant in space.",
"implements" : [ "d21385d6b7068e57" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldElementwise" },
"type" : "29b5533100b6f60f"
},
{ "key" : "gmsh_file",
"description" : "Input file with ASCII GMSH file format.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "89a808b8e9515bf8"
},
{ "key" : "field_name",
"description" : "The values of the Field are read from the ```$ElementData``` section with field name given by this key.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f"
}]
},{
"id" : "c1cf6b0899f12cd8",
"input_type" : "Record",
"name" : "FieldInterpolatedP0",
"attributes" : {

},
"description" : "R3 -> R[n] Field constant in space.",
"implements" : [ "d21385d6b7068e57" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldInterpolatedP0" },
"type" : "29b5533100b6f60f"
},
{ "key" : "gmsh_file",
"description" : "Input file with ASCII GMSH file format.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "89a808b8e9515bf8"
},
{ "key" : "field_name",
"description" : "The values of the Field are read from the ```$ElementData``` section with field name given by this key.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f"
}]
},{
"id" : "f335e92ba3ae70d6",
"input_type" : "Abstract",
"name" : "Field:R3 -> R[2,2]",
"attributes" : {

},
"description" : "Abstract for all time-space functions.",
"default_descendant" : "8e5e2bd6aff57fbf",
"implementations" : [
"8e5e2bd6aff57fbf",

"f575588c631f87b3",

"8170758ca94c5fc5",

"c53558e16d04c734",

"5b4372348dfbe152"]},{
"id" : "8e5e2bd6aff57fbf",
"input_type" : "Record",
"name" : "FieldConstant",
"attributes" : {

},
"description" : "R3 -> R[2,2] Field constant in space.",
"implements" : [ "f335e92ba3ae70d6" ],
"reducible_to_key" : "value",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldConstant" },
"type" : "29b5533100b6f60f"
},
{ "key" : "value",
"description" : "Value of the constant field.\nFor vector values, you can use scalar value to enter constant vector.\nFor square (($N\\times N$))-matrix values, you can use:\n - vector of size (($N$)) to enter diagonal matrix\n\n - vector of size (($\\frac12N(N+1)$)) to enter symmetric matrix (upper triangle, row by row)\n - scalar to enter multiple of the unit matrix.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "9bfa4bcd4482892d"
}]
},{
"id" : "f575588c631f87b3",
"input_type" : "Record",
"name" : "FieldPython",
"attributes" : {

},
"description" : "R3 -> R[2,2] Field given by a Python script.",
"implements" : [ "f335e92ba3ae70d6" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldPython" },
"type" : "29b5533100b6f60f"
},
{ "key" : "script_string",
"description" : "Python script given as in place string",
"default" : { "type" : "value at read time",
"value" : "Obligatory if 'script_file' is not given." },
"type" : "29b5533100b6f60f"
},
{ "key" : "script_file",
"description" : "Python script given as external file",
"default" : { "type" : "value at read time",
"value" : "Obligatory if 'script_striong' is not given." },
"type" : "89a808b8e9515bf8"
},
{ "key" : "function",
"description" : "Function in the given script that returns tuple containing components of the return type.\nFor NxM tensor values: tensor(row,col) = tuple( M*row + col ).",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f"
}]
},{
"id" : "8170758ca94c5fc5",
"input_type" : "Record",
"name" : "FieldFormula",
"attributes" : {

},
"description" : "R3 -> R[2,2] Field given by runtime interpreted formula.",
"implements" : [ "f335e92ba3ae70d6" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldFormula" },
"type" : "29b5533100b6f60f"
},
{ "key" : "value",
"description" : "String, array of strings, or matrix of strings with formulas for individual entries of scalar, vector, or tensor value respectively.\nFor vector values, you can use just one string to enter homogeneous vector.\nFor square (($N\\times N$))-matrix values, you can use:\n\n - array of strings of size (($N$)) to enter diagonal matrix\n - array of strings of size (($\\frac12N(N+1)$)) to enter symmetric matrix (upper triangle, row by row)\n - just one string to enter (spatially variable) multiple of the unit matrix.\nFormula can contain variables ```x,y,z,t``` and usual operators and functions.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "9c087d0fc10f3910"
}]
},{
"id" : "c53558e16d04c734",
"input_type" : "Record",
"name" : "FieldElementwise",
"attributes" : {

},
"description" : "R3 -> R[2,2] Field constant in space.",
"implements" : [ "f335e92ba3ae70d6" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldElementwise" },
"type" : "29b5533100b6f60f"
},
{ "key" : "gmsh_file",
"description" : "Input file with ASCII GMSH file format.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "89a808b8e9515bf8"
},
{ "key" : "field_name",
"description" : "The values of the Field are read from the ```$ElementData``` section with field name given by this key.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f"
}]
},{
"id" : "5b4372348dfbe152",
"input_type" : "Record",
"name" : "FieldInterpolatedP0",
"attributes" : {

},
"description" : "R3 -> R[2,2] Field constant in space.",
"implements" : [ "f335e92ba3ae70d6" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldInterpolatedP0" },
"type" : "29b5533100b6f60f"
},
{ "key" : "gmsh_file",
"description" : "Input file with ASCII GMSH file format.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "89a808b8e9515bf8"
},
{ "key" : "field_name",
"description" : "The values of the Field are read from the ```$ElementData``` section with field name given by this key.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f"
}]
},{
"id" : "f335e92baa7337c2",
"input_type" : "Abstract",
"name" : "Field:R3 -> R[3,3]",
"attributes" : {

},
"description" : "Abstract for all time-space functions.",
"default_descendant" : "1c38f891cb73ab4a",
"implementations" : [
"1c38f891cb73ab4a",

"cae1d1e8ecf835dd",

"112f175739e3d939",

"eca02c9b2026bd24",

"21a34060aca62e47"]},{
"id" : "1c38f891cb73ab4a",
"input_type" : "Record",
"name" : "FieldConstant",
"attributes" : {

},
"description" : "R3 -> R[3,3] Field constant in space.",
"implements" : [ "f335e92baa7337c2" ],
"reducible_to_key" : "value",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldConstant" },
"type" : "29b5533100b6f60f"
},
{ "key" : "value",
"description" : "Value of the constant field.\nFor vector values, you can use scalar value to enter constant vector.\nFor square (($N\\times N$))-matrix values, you can use:\n - vector of size (($N$)) to enter diagonal matrix\n\n - vector of size (($\\frac12N(N+1)$)) to enter symmetric matrix (upper triangle, row by row)\n - scalar to enter multiple of the unit matrix.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "9bfa4bcd4482892d"
}]
},{
"id" : "cae1d1e8ecf835dd",
"input_type" : "Record",
"name" : "FieldPython",
"attributes" : {

},
"description" : "R3 -> R[3,3] Field given by a Python script.",
"implements" : [ "f335e92baa7337c2" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldPython" },
"type" : "29b5533100b6f60f"
},
{ "key" : "script_string",
"description" : "Python script given as in place string",
"default" : { "type" : "value at read time",
"value" : "Obligatory if 'script_file' is not given." },
"type" : "29b5533100b6f60f"
},
{ "key" : "script_file",
"description" : "Python script given as external file",
"default" : { "type" : "value at read time",
"value" : "Obligatory if 'script_striong' is not given." },
"type" : "89a808b8e9515bf8"
},
{ "key" : "function",
"description" : "Function in the given script that returns tuple containing components of the return type.\nFor NxM tensor values: tensor(row,col) = tuple( M*row + col ).",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f"
}]
},{
"id" : "112f175739e3d939",
"input_type" : "Record",
"name" : "FieldFormula",
"attributes" : {

},
"description" : "R3 -> R[3,3] Field given by runtime interpreted formula.",
"implements" : [ "f335e92baa7337c2" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldFormula" },
"type" : "29b5533100b6f60f"
},
{ "key" : "value",
"description" : "String, array of strings, or matrix of strings with formulas for individual entries of scalar, vector, or tensor value respectively.\nFor vector values, you can use just one string to enter homogeneous vector.\nFor square (($N\\times N$))-matrix values, you can use:\n\n - array of strings of size (($N$)) to enter diagonal matrix\n - array of strings of size (($\\frac12N(N+1)$)) to enter symmetric matrix (upper triangle, row by row)\n - just one string to enter (spatially variable) multiple of the unit matrix.\nFormula can contain variables ```x,y,z,t``` and usual operators and functions.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "9c087d0fc10f3910"
}]
},{
"id" : "eca02c9b2026bd24",
"input_type" : "Record",
"name" : "FieldElementwise",
"attributes" : {

},
"description" : "R3 -> R[3,3] Field constant in space.",
"implements" : [ "f335e92baa7337c2" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldElementwise" },
"type" : "29b5533100b6f60f"
},
{ "key" : "gmsh_file",
"description" : "Input file with ASCII GMSH file format.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "89a808b8e9515bf8"
},
{ "key" : "field_name",
"description" : "The values of the Field are read from the ```$ElementData``` section with field name given by this key.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f"
}]
},{
"id" : "21a34060aca62e47",
"input_type" : "Record",
"name" : "FieldInterpolatedP0",
"attributes" : {

},
"description" : "R3 -> R[3,3] Field constant in space.",
"implements" : [ "f335e92baa7337c2" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldInterpolatedP0" },
"type" : "29b5533100b6f60f"
},
{ "key" : "gmsh_file",
"description" : "Input file with ASCII GMSH file format.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "89a808b8e9515bf8"
},
{ "key" : "field_name",
"description" : "The values of the Field are read from the ```$ElementData``` section with field name given by this key.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f"
}]
},{
"id" : "f8ca43f124cddba8",
"input_type" : "Abstract",
"name" : "Field:R2 -> R[3]",
"attributes" : {

},
"description" : "Abstract for all time-space functions.",
"default_descendant" : "e46f8e5bd8bd2349",
"implementations" : [
"e46f8e5bd8bd2349",

"87fdd8b859236615",

"a76bfb9b8fe04063",

"16d5f6eec9a5f5e9",

"2d58cc99959014b6"]},{
"id" : "e46f8e5bd8bd2349",
"input_type" : "Record",
"name" : "FieldConstant",
"attributes" : {

},
"description" : "R2 -> R[3] Field constant in space.",
"implements" : [ "f8ca43f124cddba8" ],
"reducible_to_key" : "value",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldConstant" },
"type" : "29b5533100b6f60f"
},
{ "key" : "value",
"description" : "Value of the constant field.\nFor vector values, you can use scalar value to enter constant vector.\nFor square (($N\\times N$))-matrix values, you can use:\n - vector of size (($N$)) to enter diagonal matrix\n\n - vector of size (($\\frac12N(N+1)$)) to enter symmetric matrix (upper triangle, row by row)\n - scalar to enter multiple of the unit matrix.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "f6b8a756584317b5"
}]
},{
"id" : "87fdd8b859236615",
"input_type" : "Record",
"name" : "FieldPython",
"attributes" : {

},
"description" : "R2 -> R[3] Field given by a Python script.",
"implements" : [ "f8ca43f124cddba8" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldPython" },
"type" : "29b5533100b6f60f"
},
{ "key" : "script_string",
"description" : "Python script given as in place string",
"default" : { "type" : "value at read time",
"value" : "Obligatory if 'script_file' is not given." },
"type" : "29b5533100b6f60f"
},
{ "key" : "script_file",
"description" : "Python script given as external file",
"default" : { "type" : "value at read time",
"value" : "Obligatory if 'script_striong' is not given." },
"type" : "89a808b8e9515bf8"
},
{ "key" : "function",
"description" : "Function in the given script that returns tuple containing components of the return type.\nFor NxM tensor values: tensor(row,col) = tuple( M*row + col ).",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f"
}]
},{
"id" : "a76bfb9b8fe04063",
"input_type" : "Record",
"name" : "FieldFormula",
"attributes" : {

},
"description" : "R2 -> R[3] Field given by runtime interpreted formula.",
"implements" : [ "f8ca43f124cddba8" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldFormula" },
"type" : "29b5533100b6f60f"
},
{ "key" : "value",
"description" : "String, array of strings, or matrix of strings with formulas for individual entries of scalar, vector, or tensor value respectively.\nFor vector values, you can use just one string to enter homogeneous vector.\nFor square (($N\\times N$))-matrix values, you can use:\n\n - array of strings of size (($N$)) to enter diagonal matrix\n - array of strings of size (($\\frac12N(N+1)$)) to enter symmetric matrix (upper triangle, row by row)\n - just one string to enter (spatially variable) multiple of the unit matrix.\nFormula can contain variables ```x,y,z,t``` and usual operators and functions.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "48509b4a151fae7d"
}]
},{
"id" : "16d5f6eec9a5f5e9",
"input_type" : "Record",
"name" : "FieldElementwise",
"attributes" : {

},
"description" : "R2 -> R[3] Field constant in space.",
"implements" : [ "f8ca43f124cddba8" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldElementwise" },
"type" : "29b5533100b6f60f"
},
{ "key" : "gmsh_file",
"description" : "Input file with ASCII GMSH file format.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "89a808b8e9515bf8"
},
{ "key" : "field_name",
"description" : "The values of the Field are read from the ```$ElementData``` section with field name given by this key.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f"
}]
},{
"id" : "2d58cc99959014b6",
"input_type" : "Record",
"name" : "FieldInterpolatedP0",
"attributes" : {

},
"description" : "R2 -> R[3] Field constant in space.",
"implements" : [ "f8ca43f124cddba8" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldInterpolatedP0" },
"type" : "29b5533100b6f60f"
},
{ "key" : "gmsh_file",
"description" : "Input file with ASCII GMSH file format.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "89a808b8e9515bf8"
},
{ "key" : "field_name",
"description" : "The values of the Field are read from the ```$ElementData``` section with field name given by this key.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f"
}]
},{
"id" : "f8ca43f124cdebd9",
"input_type" : "Abstract",
"name" : "Field:R2 -> R[2]",
"attributes" : {

},
"description" : "Abstract for all time-space functions.",
"default_descendant" : "36282c9d2bbd570e",
"implementations" : [
"36282c9d2bbd570e",

"3e0ce9c6d313d825",

"dfdaa053d74b76a6",

"ccb4a677d27f50fc",

"471f84fc3dad06d3"]},{
"id" : "36282c9d2bbd570e",
"input_type" : "Record",
"name" : "FieldConstant",
"attributes" : {

},
"description" : "R2 -> R[2] Field constant in space.",
"implements" : [ "f8ca43f124cdebd9" ],
"reducible_to_key" : "value",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldConstant" },
"type" : "29b5533100b6f60f"
},
{ "key" : "value",
"description" : "Value of the constant field.\nFor vector values, you can use scalar value to enter constant vector.\nFor square (($N\\times N$))-matrix values, you can use:\n - vector of size (($N$)) to enter diagonal matrix\n\n - vector of size (($\\frac12N(N+1)$)) to enter symmetric matrix (upper triangle, row by row)\n - scalar to enter multiple of the unit matrix.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "f6b8a75658431774"
}]
},{
"id" : "3e0ce9c6d313d825",
"input_type" : "Record",
"name" : "FieldPython",
"attributes" : {

},
"description" : "R2 -> R[2] Field given by a Python script.",
"implements" : [ "f8ca43f124cdebd9" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldPython" },
"type" : "29b5533100b6f60f"
},
{ "key" : "script_string",
"description" : "Python script given as in place string",
"default" : { "type" : "value at read time",
"value" : "Obligatory if 'script_file' is not given." },
"type" : "29b5533100b6f60f"
},
{ "key" : "script_file",
"description" : "Python script given as external file",
"default" : { "type" : "value at read time",
"value" : "Obligatory if 'script_striong' is not given." },
"type" : "89a808b8e9515bf8"
},
{ "key" : "function",
"description" : "Function in the given script that returns tuple containing components of the return type.\nFor NxM tensor values: tensor(row,col) = tuple( M*row + col ).",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f"
}]
},{
"id" : "dfdaa053d74b76a6",
"input_type" : "Record",
"name" : "FieldFormula",
"attributes" : {

},
"description" : "R2 -> R[2] Field given by runtime interpreted formula.",
"implements" : [ "f8ca43f124cdebd9" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldFormula" },
"type" : "29b5533100b6f60f"
},
{ "key" : "value",
"description" : "String, array of strings, or matrix of strings with formulas for individual entries of scalar, vector, or tensor value respectively.\nFor vector values, you can use just one string to enter homogeneous vector.\nFor square (($N\\times N$))-matrix values, you can use:\n\n - array of strings of size (($N$)) to enter diagonal matrix\n - array of strings of size (($\\frac12N(N+1)$)) to enter symmetric matrix (upper triangle, row by row)\n - just one string to enter (spatially variable) multiple of the unit matrix.\nFormula can contain variables ```x,y,z,t``` and usual operators and functions.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "48509b4ba6cb35db"
}]
},{
"id" : "ccb4a677d27f50fc",
"input_type" : "Record",
"name" : "FieldElementwise",
"attributes" : {

},
"description" : "R2 -> R[2] Field constant in space.",
"implements" : [ "f8ca43f124cdebd9" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldElementwise" },
"type" : "29b5533100b6f60f"
},
{ "key" : "gmsh_file",
"description" : "Input file with ASCII GMSH file format.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "89a808b8e9515bf8"
},
{ "key" : "field_name",
"description" : "The values of the Field are read from the ```$ElementData``` section with field name given by this key.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f"
}]
},{
"id" : "471f84fc3dad06d3",
"input_type" : "Record",
"name" : "FieldInterpolatedP0",
"attributes" : {

},
"description" : "R2 -> R[2] Field constant in space.",
"implements" : [ "f8ca43f124cdebd9" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldInterpolatedP0" },
"type" : "29b5533100b6f60f"
},
{ "key" : "gmsh_file",
"description" : "Input file with ASCII GMSH file format.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "89a808b8e9515bf8"
},
{ "key" : "field_name",
"description" : "The values of the Field are read from the ```$ElementData``` section with field name given by this key.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f"
}]
},{
"id" : "f8ca43f124d20754",
"input_type" : "Abstract",
"name" : "Field:R2 -> R[n]",
"attributes" : {

},
"description" : "Abstract for all time-space functions.",
"default_descendant" : "b01e07400ad4efad",
"implementations" : [
"b01e07400ad4efad",

"e6c88c5ca5d26985",

"d55d6a4df2f0dd55",

"1ec771552ee1f1c4",

"3c3ae769a95daccb"]},{
"id" : "b01e07400ad4efad",
"input_type" : "Record",
"name" : "FieldConstant",
"attributes" : {

},
"description" : "R2 -> R[n] Field constant in space.",
"implements" : [ "f8ca43f124d20754" ],
"reducible_to_key" : "value",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldConstant" },
"type" : "29b5533100b6f60f"
},
{ "key" : "value",
"description" : "Value of the constant field.\nFor vector values, you can use scalar value to enter constant vector.\nFor square (($N\\times N$))-matrix values, you can use:\n - vector of size (($N$)) to enter diagonal matrix\n\n - vector of size (($\\frac12N(N+1)$)) to enter symmetric matrix (upper triangle, row by row)\n - scalar to enter multiple of the unit matrix.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "f6b8a797184314b0"
}]
},{
"id" : "e6c88c5ca5d26985",
"input_type" : "Record",
"name" : "FieldPython",
"attributes" : {

},
"description" : "R2 -> R[n] Field given by a Python script.",
"implements" : [ "f8ca43f124d20754" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldPython" },
"type" : "29b5533100b6f60f"
},
{ "key" : "script_string",
"description" : "Python script given as in place string",
"default" : { "type" : "value at read time",
"value" : "Obligatory if 'script_file' is not given." },
"type" : "29b5533100b6f60f"
},
{ "key" : "script_file",
"description" : "Python script given as external file",
"default" : { "type" : "value at read time",
"value" : "Obligatory if 'script_striong' is not given." },
"type" : "89a808b8e9515bf8"
},
{ "key" : "function",
"description" : "Function in the given script that returns tuple containing components of the return type.\nFor NxM tensor values: tensor(row,col) = tuple( M*row + col ).",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f"
}]
},{
"id" : "d55d6a4df2f0dd55",
"input_type" : "Record",
"name" : "FieldFormula",
"attributes" : {

},
"description" : "R2 -> R[n] Field given by runtime interpreted formula.",
"implements" : [ "f8ca43f124d20754" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldFormula" },
"type" : "29b5533100b6f60f"
},
{ "key" : "value",
"description" : "String, array of strings, or matrix of strings with formulas for individual entries of scalar, vector, or tensor value respectively.\nFor vector values, you can use just one string to enter homogeneous vector.\nFor square (($N\\times N$))-matrix values, you can use:\n\n - array of strings of size (($N$)) to enter diagonal matrix\n - array of strings of size (($\\frac12N(N+1)$)) to enter symmetric matrix (upper triangle, row by row)\n - just one string to enter (spatially variable) multiple of the unit matrix.\nFormula can contain variables ```x,y,z,t``` and usual operators and functions.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "ee2d78fdcbf9fa6a"
}]
},{
"id" : "1ec771552ee1f1c4",
"input_type" : "Record",
"name" : "FieldElementwise",
"attributes" : {

},
"description" : "R2 -> R[n] Field constant in space.",
"implements" : [ "f8ca43f124d20754" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldElementwise" },
"type" : "29b5533100b6f60f"
},
{ "key" : "gmsh_file",
"description" : "Input file with ASCII GMSH file format.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "89a808b8e9515bf8"
},
{ "key" : "field_name",
"description" : "The values of the Field are read from the ```$ElementData``` section with field name given by this key.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f"
}]
},{
"id" : "3c3ae769a95daccb",
"input_type" : "Record",
"name" : "FieldInterpolatedP0",
"attributes" : {

},
"description" : "R2 -> R[n] Field constant in space.",
"implements" : [ "f8ca43f124d20754" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldInterpolatedP0" },
"type" : "29b5533100b6f60f"
},
{ "key" : "gmsh_file",
"description" : "Input file with ASCII GMSH file format.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "89a808b8e9515bf8"
},
{ "key" : "field_name",
"description" : "The values of the Field are read from the ```$ElementData``` section with field name given by this key.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f"
}]
},{
"id" : "dcdb338c28d85428",
"input_type" : "Record",
"name" : "DarcyFlowMH_Data_aux_Data",
"attributes" : {

},
"description" : "Record to set fields of the equation.\nThe fields are set only on the domain specified by one of the keys: 'region', 'rid'\nand after the time given by the key 'time'. The field setting can be overridden by\n any DarcyFlowMH_Data_aux_Data record that comes later in the boundary data array.",
"keys" : [
{ "key" : "region",
"description" : "Label of the region where to set fields. ",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "29b5533100b6f60f"
},
{ "key" : "rid",
"description" : "ID of the region where to set fields.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "151ce92d5201d44f"
},
{ "key" : "time",
"description" : "Apply field setting in this record after this time.\nThese times have to form an increasing sequence.",
"default" : { "type" : "value at declaration",
"value" : 0.0 },
"type" : "6b1c4ede475775aa"
},
{ "key" : "anisotropy",
"description" : "Anisotropy of the conductivity tensor. (($[-]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "84c4aca1a18d8fef"
},
{ "key" : "cross_section",
"description" : "Complement dimension parameter (cross section for 1D, thickness for 2D). (($[m^{3-d}]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "14425403876d6513"
},
{ "key" : "conductivity",
"description" : "Isotropic conductivity scalar. (($[ms^{-1}]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "14425403876d6513"
},
{ "key" : "sigma",
"description" : "Transition coefficient between dimensions. (($[-]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "14425403876d6513"
},
{ "key" : "water_source_density",
"description" : "Water source density. (($[s^{-1}]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "14425403876d6513"
},
{ "key" : "bc_type",
"description" : "Boundary condition type, possible values: (($[-]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "d6568d45437d9649"
},
{ "key" : "bc_pressure",
"description" : "Prescribed pressure value for bc_type=\"dirichlet\" or reference pressure for bc_type=\"total_flux\". (($[m]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "14425403876d6513"
},
{ "key" : "bc_flux",
"description" : "Incoming flux in total flux boundary condition. (($[m^{4-d}s^{-1}]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "14425403876d6513"
},
{ "key" : "bc_robin_sigma",
"description" : "Conductivity coefficient in total flux boundary condition. (($[m^{3-d}s^{-1}]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "14425403876d6513"
},
{ "key" : "init_pressure",
"description" : "Initial condition as pressure (($[m]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "14425403876d6513"
},
{ "key" : "storativity",
"description" : "Storativity. (($[m^{-1}]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "14425403876d6513"
}]
},{
"id" : "38977549ac7f4c04",
"input_type" : "Record",
"name" : "Sorption",
"attributes" : {

},
"description" : "AUXILIARY RECORD. Should not be directly part of the input tree.",
"keys" : [
{ "key" : "substances",
"description" : "Names of the substances that take part in the sorption model.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "eee303f526b992fd"
},
{ "key" : "solvent_density",
"description" : "Density of the solvent.",
"default" : { "type" : "value at declaration",
"value" : 1.0 },
"type" : "6b1c4ede475775aa"
},
{ "key" : "substeps",
"description" : "Number of equidistant substeps, molar mass and isotherm intersections",
"default" : { "type" : "value at declaration",
"value" : 1000 },
"type" : "151ce92d5201d40e"
},
{ "key" : "solubility",
"description" : "Specifies solubility limits of all the sorbing species.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "ae4d15413e119e57"
},
{ "key" : "table_limits",
"description" : "Specifies highest aqueous concentration in interpolation table.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "ae4d15413e119e57"
},
{ "key" : "input_fields",
"description" : "Containes region specific data necessary to construct isotherms.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "31d3cc69b318f3d2"
},
{ "key" : "reaction_liquid",
"description" : "Reaction model following the sorption in the liquid.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "5572a5ae3e4d7aa6"
},
{ "key" : "reaction_solid",
"description" : "Reaction model following the sorption in the solid.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "5572a5ae3e4d7aa6"
}]
},{
"id" : "3d0b757627a51f7b",
"input_type" : "Record",
"name" : "EmptyRecord",
"attributes" : {

},
"description" : "",
"keys" : [
]
},{
"id" : "5733d5a462ae445a",
"input_type" : "Record",
"name" : "Sorption_Data_aux",
"attributes" : {

},
"description" : "Record to set fields of the equation.\nThe fields are set only on the domain specified by one of the keys: 'region', 'rid'\nand after the time given by the key 'time'. The field setting can be overridden by\n any Sorption_Data_aux record that comes later in the boundary data array.",
"keys" : [
{ "key" : "region",
"description" : "Label of the region where to set fields. ",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "29b5533100b6f60f"
},
{ "key" : "rid",
"description" : "ID of the region where to set fields.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "151ce92d5201d44f"
},
{ "key" : "time",
"description" : "Apply field setting in this record after this time.\nThese times have to form an increasing sequence.",
"default" : { "type" : "value at declaration",
"value" : 0.0 },
"type" : "6b1c4ede475775aa"
}]
},{
"id" : "6692ecae447defa1",
"input_type" : "Record",
"name" : "ConvectionDiffusion_DG_Data_aux",
"attributes" : {

},
"description" : "Record to set fields of the equation.\nThe fields are set only on the domain specified by one of the keys: 'region', 'rid'\nand after the time given by the key 'time'. The field setting can be overridden by\n any ConvectionDiffusion_DG_Data_aux record that comes later in the boundary data array.",
"keys" : [
{ "key" : "region",
"description" : "Label of the region where to set fields. ",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "29b5533100b6f60f"
},
{ "key" : "rid",
"description" : "ID of the region where to set fields.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "151ce92d5201d44f"
},
{ "key" : "time",
"description" : "Apply field setting in this record after this time.\nThese times have to form an increasing sequence.",
"default" : { "type" : "value at declaration",
"value" : 0.0 },
"type" : "6b1c4ede475775aa"
}]
},{
"id" : "6b842b7555253276",
"input_type" : "Record",
"name" : "Convection_FV_Data_aux",
"attributes" : {

},
"description" : "Record to set fields of the equation.\nThe fields are set only on the domain specified by one of the keys: 'region', 'rid'\nand after the time given by the key 'time'. The field setting can be overridden by\n any Convection_FV_Data_aux record that comes later in the boundary data array.",
"keys" : [
{ "key" : "region",
"description" : "Label of the region where to set fields. ",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "29b5533100b6f60f"
},
{ "key" : "rid",
"description" : "ID of the region where to set fields.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "151ce92d5201d44f"
},
{ "key" : "time",
"description" : "Apply field setting in this record after this time.\nThese times have to form an increasing sequence.",
"default" : { "type" : "value at declaration",
"value" : 0.0 },
"type" : "6b1c4ede475775aa"
}]
},{
"id" : "7e8902f7ad2974da",
"input_type" : "Record",
"name" : "HeatTransfer_DG_Data_aux",
"attributes" : {

},
"description" : "Record to set fields of the equation.\nThe fields are set only on the domain specified by one of the keys: 'region', 'rid'\nand after the time given by the key 'time'. The field setting can be overridden by\n any HeatTransfer_DG_Data_aux record that comes later in the boundary data array.",
"keys" : [
{ "key" : "region",
"description" : "Label of the region where to set fields. ",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "29b5533100b6f60f"
},
{ "key" : "rid",
"description" : "ID of the region where to set fields.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "151ce92d5201d44f"
},
{ "key" : "time",
"description" : "Apply field setting in this record after this time.\nThese times have to form an increasing sequence.",
"default" : { "type" : "value at declaration",
"value" : 0.0 },
"type" : "6b1c4ede475775aa"
}]
},{
"id" : "93de6142024b1fb5",
"input_type" : "Record",
"name" : "DarcyFlowMH_Data_aux_Data_aux",
"attributes" : {

},
"description" : "Record to set fields of the equation.\nThe fields are set only on the domain specified by one of the keys: 'region', 'rid'\nand after the time given by the key 'time'. The field setting can be overridden by\n any DarcyFlowMH_Data_aux_Data_aux record that comes later in the boundary data array.",
"keys" : [
{ "key" : "region",
"description" : "Label of the region where to set fields. ",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "29b5533100b6f60f"
},
{ "key" : "rid",
"description" : "ID of the region where to set fields.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "151ce92d5201d44f"
},
{ "key" : "time",
"description" : "Apply field setting in this record after this time.\nThese times have to form an increasing sequence.",
"default" : { "type" : "value at declaration",
"value" : 0.0 },
"type" : "6b1c4ede475775aa"
}]
},{
"id" : "d4f6088dc558ce1b",
"input_type" : "Record",
"name" : "DualPorosity_Data_aux",
"attributes" : {

},
"description" : "Record to set fields of the equation.\nThe fields are set only on the domain specified by one of the keys: 'region', 'rid'\nand after the time given by the key 'time'. The field setting can be overridden by\n any DualPorosity_Data_aux record that comes later in the boundary data array.",
"keys" : [
{ "key" : "region",
"description" : "Label of the region where to set fields. ",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "29b5533100b6f60f"
},
{ "key" : "rid",
"description" : "ID of the region where to set fields.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "151ce92d5201d44f"
},
{ "key" : "time",
"description" : "Apply field setting in this record after this time.\nThese times have to form an increasing sequence.",
"default" : { "type" : "value at declaration",
"value" : 0.0 },
"type" : "6b1c4ede475775aa"
}]
},{}],
"IST_hash" : "94f691f7451377a9"
}

