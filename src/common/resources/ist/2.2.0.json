{ "version" :{
"flow123d_commit" : "6b7a56b",
"flow123d_version" : "2.2.0",
"date" : "Apr 20 2018, 14:47:52"
},
"ist_nodes" : [
{
"id" : "27fe84850ef69398",
"input_type" : "Record",
"name" : "Root",
"attributes" : {},
"description" : "Root record of JSON input for Flow123d.",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "Root" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "flow123d_version",
"description" : "Version of Flow123d for which the input file was created.Flow123d only warn about version incompatibility. However, external tools may use this information to provide conversion of the input file to the structure required by another version of Flow123d.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "problem",
"description" : "Simulation problem to be solved.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "5680eb0198bf09a0",
"attributes" : {}},
{ "key" : "pause_after_run",
"description" : "If true, the program will wait for key press before it terminates.",
"default" : { "type" : "value at declaration",
"value" : false },
"type" : "282546d52edd4",
"attributes" : {}}]
},{
"id" : "29b5533100b6f60f",
"input_type" : "String",
"name" : "String",
"attributes" : {}},{
"id" : "5680eb0198bf09a0",
"input_type" : "Abstract",
"name" : "Coupling_Base",
"attributes" : {},
"description" : "The root record of description of particular the problem to solve.",
"implementations" : [
"8ffda4ebf1b718ff"]},{
"id" : "8ffda4ebf1b718ff",
"input_type" : "Record",
"name" : "Coupling_Sequential",
"attributes" : {},
"description" : "Record with data for a general sequential coupling.\\n",
"implements" : [ "5680eb0198bf09a0" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "Coupling_Sequential" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "description",
"description" : "Short description of the solved problem.\\nIs displayed in the main log, and possibly in other text output files.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "mesh",
"description" : "Computational mesh common to all equations.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "b0e3e8e78c02ad37",
"attributes" : {}},
{ "key" : "time",
"description" : "Simulation time frame and time step.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "eb2dcf155e12a83b",
"attributes" : {}},
{ "key" : "flow_equation",
"description" : "Flow equation, provides the velocity field as a result.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "2c79393a1a5c26ac",
"attributes" : {}},
{ "key" : "solute_equation",
"description" : "Transport of soluted substances, depends on the velocity field from a Flow equation.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "c20b6cad3d254b33",
"attributes" : {}},
{ "key" : "heat_equation",
"description" : "Heat transfer, depends on the velocity field from a Flow equation.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "c20b6cad3d254b33",
"attributes" : {}}]
},{
"id" : "b0e3e8e78c02ad37",
"input_type" : "Record",
"name" : "Mesh",
"attributes" : {},
"description" : "Record with mesh related data.",
"reducible_to_key" : "mesh_file",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "Mesh" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "mesh_file",
"description" : "Input file with mesh description.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "89a808b8e9515bf8",
"attributes" : {}},
{ "key" : "regions",
"description" : "List of additional region and region set definitions not contained in the mesh. There are three region sets implicitly defined:\\n\\n- ALL (all regions of the mesh)\\n- .BOUNDARY (all boundary regions)\\n- BULK (all bulk regions)",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "9f518532a6818b25",
"attributes" : {}},
{ "key" : "partitioning",
"description" : "Parameters of mesh partitioning algorithms.\\n",
"default" : { "type" : "value at declaration",
"value" : "any_neighboring" },
"type" : "b8ecfd26afbea6a",
"attributes" : {}},
{ "key" : "print_regions",
"description" : "If true, print table of all used regions.",
"default" : { "type" : "value at declaration",
"value" : true },
"type" : "282546d52edd4",
"attributes" : {}}]
},{
"id" : "89a808b8e9515bf8",
"input_type" : "FileName",
"name" : "FileName_input",
"attributes" : {},
"file_mode" : "input"
},{
"id" : "9f518532a6818b25",
"input_type" : "Array",
"name" : "array_of_Region",
"attributes" : {},
"range" : [0, 4294967295],
"subtype" : "7c356e1477452f0c"
},
{
"id" : "7c356e1477452f0c",
"input_type" : "Abstract",
"name" : "Region",
"attributes" : {},
"description" : "Abstract record for Region.",
"implementations" : [
"fe348060e285d70f",
"d41a867e7dc8955a",
"e14c421ab124b6d",
"239127cc43b3c1f4",
"31cc358d52891019",
"e45925c5ad014a5d"]},{
"id" : "fe348060e285d70f",
"input_type" : "Record",
"name" : "From_Id",
"attributes" : {},
"description" : "Elementary region declared by ID.Allows to create new region with given id and labelor specify existing region by id which will be renamed.",
"implements" : [ "7c356e1477452f0c" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "From_Id" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "name",
"description" : "Label (name) of the region. Has to be unique in one mesh.\\n",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "id",
"description" : "The ID of the region to which you assign label.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "151ce92d5201d44f",
"attributes" : {}},
{ "key" : "dim",
"description" : "The dim of the region to which you assign label. Value is taken into account only if new region is created.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "151ce92d5201d44f",
"attributes" : {}}]
},{
"id" : "151ce92d5201d44f",
"input_type" : "Integer",
"name" : "Integer",
"attributes" : {},
"range" : [0, 2147483647]
},{
"id" : "d41a867e7dc8955a",
"input_type" : "Record",
"name" : "From_Label",
"attributes" : {},
"description" : "Gives a new name to an elementary regionwith original name (in the mesh file) given by  ```mesh_label.```",
"implements" : [ "7c356e1477452f0c" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "From_Label" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "name",
"description" : "New label (name) of the region. Has to be unique in one mesh.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "mesh_label",
"description" : "The mesh_label is e.g. physical volume name in GMSH format.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f",
"attributes" : {}}]
},{
"id" : "e14c421ab124b6d",
"input_type" : "Record",
"name" : "From_Elements",
"attributes" : {},
"description" : "Elementary region declared by a list of elements. The new region is assigned to the list of elements spefied by the key```element_list```.",
"implements" : [ "7c356e1477452f0c" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "From_Elements" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "name",
"description" : "Label (name) of the region. Has to be unique in one mesh.\\n",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "id",
"description" : "The ID of the region. If unset a unique ID will be generated automatically.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "151ce92d5201d44f",
"attributes" : {}},
{ "key" : "element_list",
"description" : "List of IDs of elements.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "ccc88a2172d22c72",
"attributes" : {}}]
},{
"id" : "ccc88a2172d22c72",
"input_type" : "Array",
"name" : "array_of_Integer",
"attributes" : {},
"range" : [1, 4294967295],
"subtype" : "151ce92d5201d44f"
},
{
"id" : "239127cc43b3c1f4",
"input_type" : "Record",
"name" : "Union",
"attributes" : {},
"description" : "Defines region (set) as a union of given two or more regions. Regions can be given by names or IDs or both ways together.",
"implements" : [ "7c356e1477452f0c" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "Union" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "name",
"description" : "Label (name) of the region. Has to be unique in one mesh.\\n",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "region_ids",
"description" : "List of region ID numbers that has to be added to the region set.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "ccc88a2172d23cc3",
"attributes" : {}},
{ "key" : "regions",
"description" : "Defines region as a union of given pair of regions.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "eee303f526b982ce",
"attributes" : {}}]
},{
"id" : "ccc88a2172d23cc3",
"input_type" : "Array",
"name" : "array_of_Integer",
"attributes" : {},
"range" : [0, 4294967295],
"subtype" : "151ce92d5201d44f"
},
{
"id" : "eee303f526b982ce",
"input_type" : "Array",
"name" : "array_of_String",
"attributes" : {},
"range" : [0, 4294967295],
"subtype" : "29b5533100b6f60f"
},
{
"id" : "31cc358d52891019",
"input_type" : "Record",
"name" : "Difference",
"attributes" : {},
"description" : "Defines region (set) as a difference of given pair of regions.",
"implements" : [ "7c356e1477452f0c" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "Difference" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "name",
"description" : "Label (name) of the region. Has to be unique in one mesh.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "regions",
"description" : "List of exactly two regions given by their names.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "eee3033466b9ffa2",
"attributes" : {}}]
},{
"id" : "eee3033466b9ffa2",
"input_type" : "Array",
"name" : "array_of_String",
"attributes" : {},
"range" : [2, 2],
"subtype" : "29b5533100b6f60f"
},
{
"id" : "e45925c5ad014a5d",
"input_type" : "Record",
"name" : "Intersection",
"attributes" : {},
"description" : "Defines region (set) as an intersection of given two or more regions.",
"implements" : [ "7c356e1477452f0c" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "Intersection" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "name",
"description" : "Label (name) of the region. Has to be unique in one mesh.\\n",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "regions",
"description" : "List of two or more regions given by their names.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "eee303f526b9e2ec",
"attributes" : {}}]
},{
"id" : "eee303f526b9e2ec",
"input_type" : "Array",
"name" : "array_of_String",
"attributes" : {},
"range" : [2, 4294967295],
"subtype" : "29b5533100b6f60f"
},
{
"id" : "b8ecfd26afbea6a",
"input_type" : "Record",
"name" : "Partition",
"attributes" : {},
"description" : "Setting for various types of mesh partitioning.",
"reducible_to_key" : "graph_type",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "Partition" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "tool",
"description" : "Software package used for partitioning. See corresponding selection.",
"default" : { "type" : "value at declaration",
"value" : "METIS" },
"type" : "f9756fb2f66076a1",
"attributes" : {}},
{ "key" : "graph_type",
"description" : "Algorithm for generating graph and its weights from a multidimensional mesh.",
"default" : { "type" : "value at declaration",
"value" : "any_neighboring" },
"type" : "23a812d749635ca0",
"attributes" : {}}]
},{
"id" : "f9756fb2f66076a1",
"input_type" : "Selection",
"name" : "PartTool",
"attributes" : {},
"description" : "Select the partitioning tool to use.",
"values" : [
{ "name" : "PETSc",
"description" : "Use PETSc interface to various partitioning tools.",
"attributes" : {}
},
{ "name" : "METIS",
"description" : "Use direct interface to Metis.",
"attributes" : {}
}]
},{
"id" : "23a812d749635ca0",
"input_type" : "Selection",
"name" : "GraphType",
"attributes" : {},
"description" : "Different algorithms to make the sparse graph with weighted edges\\nfrom the multidimensional mesh. Main difference is dealing with \\nneighborings of elements of different dimension.",
"values" : [
{ "name" : "any_neighboring",
"description" : "Add edge for any pair of neighboring elements.",
"attributes" : {}
},
{ "name" : "any_wight_lower_dim_cuts",
"description" : "Same as before and assign higher weight to cuts of lower dimension in order to make them stick to one face.",
"attributes" : {}
},
{ "name" : "same_dimension_neghboring",
"description" : "Add edge for any pair of neighboring elements of same dimension (bad for matrix multiply).",
"attributes" : {}
}]
},{
"id" : "282546d52edd4",
"input_type" : "Bool",
"name" : "Bool",
"attributes" : {}},{
"id" : "eb2dcf155e12a83b",
"input_type" : "Record",
"name" : "TimeGovernor",
"attributes" : {},
"description" : "Setting of the simulation time. (can be specific to one equation)",
"reducible_to_key" : "max_dt",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "TimeGovernor" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "start_time",
"description" : "Start time of the simulation.",
"default" : { "type" : "value at declaration",
"value" : 0.0 },
"type" : "47484ede475775e6",
"attributes" : {}},
{ "key" : "end_time",
"description" : "End time of the simulation. Default value is more then age of universe in seconds.",
"default" : { "type" : "value at declaration",
"value" : 5.0e+17 },
"type" : "47484ede475775e6",
"attributes" : {}},
{ "key" : "init_dt",
"description" : "Initial guess for the time step.\\nOnly useful for equations that use adaptive time stepping.If set to 0.0, the time step is determined in fully autonomous way if the equation supports it.",
"default" : { "type" : "value at declaration",
"value" : 0.0 },
"type" : "6b1c4ede475775aa",
"attributes" : {}},
{ "key" : "min_dt",
"description" : "Soft lower limit for the time step. Equation using adaptive time stepping can notsuggest smaller time step, but actual time step could be smaller in order to match prescribed input or output times.",
"default" : { "type" : "value at read time",
"value" : "Machine precision." },
"type" : "6b1c4ede475775aa",
"attributes" : {}},
{ "key" : "max_dt",
"description" : "Hard upper limit for the time step. Actual length of the time step is also limitedby input and output times.",
"default" : { "type" : "value at read time",
"value" : "Whole time of the simulation if specified, infinity else." },
"type" : "6b1c4ede475775aa",
"attributes" : {}}]
},{
"id" : "47484ede475775e6",
"input_type" : "Double",
"name" : "Double",
"attributes" : {},
"range" : [-1.79769e+308, 1.79769e+308]
},{
"id" : "6b1c4ede475775aa",
"input_type" : "Double",
"name" : "Double",
"attributes" : {},
"range" : [0, 1.79769e+308]
},{
"id" : "2c79393a1a5c26ac",
"input_type" : "Abstract",
"name" : "DarcyFlow",
"attributes" : {},
"description" : "Darcy flow model. Abstraction of various porous media flow models.",
"implementations" : [
"456325e84b112e28",
"8021a1683e985348"]},{
"id" : "456325e84b112e28",
"input_type" : "Record",
"name" : "Flow_Darcy_MH",
"attributes" : {},
"description" : "Mixed-Hybrid  solver for STEADY saturated Darcy flow.",
"implements" : [ "2c79393a1a5c26ac" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "Flow_Darcy_MH" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "gravity",
"description" : "Vector of the gravity force. Dimensionless.",
"default" : { "type" : "value at declaration",
"value" : [ 0, 0, -1] },
"type" : "cba11500fe114d7b",
"attributes" : {}},
{ "key" : "input_fields",
"description" : "Input data for Darcy flow model.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "ee2a83314dd01dca",
"attributes" : {}},
{ "key" : "nonlinear_solver",
"description" : "Non-linear solver for MH problem.",
"default" : { "type" : "value at declaration",
"value" : {} },
"type" : "dc010d85f7b37df9",
"attributes" : {}},
{ "key" : "output_stream",
"description" : "Parameters of output stream.",
"default" : { "type" : "value at declaration",
"value" : {} },
"type" : "f648258f2b1360cd",
"attributes" : {}},
{ "key" : "output",
"description" : "Parameters of output from MH module.",
"default" : { "type" : "value at declaration",
"value" : { "fields": [ "pressure_p0", "velocity_p0" ] } },
"type" : "eb9b95497642ce25",
"attributes" : {}},
{ "key" : "output_specific",
"description" : "Parameters of output form MH module.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "71be09811bee6708",
"attributes" : {}},
{ "key" : "balance",
"description" : "Settings for computing mass balance.",
"default" : { "type" : "value at declaration",
"value" : {} },
"type" : "bc0c26d77c6c7f11",
"attributes" : {}},
{ "key" : "time",
"description" : "Time governor setting for the unsteady Darcy flow model.",
"default" : { "type" : "value at declaration",
"value" : {} },
"type" : "eb2dcf155e12a83b",
"attributes" : {}},
{ "key" : "n_schurs",
"description" : "Number of Schur complements to perform when solving MH system.",
"default" : { "type" : "value at declaration",
"value" : 2 },
"type" : "151ce92dd201d44a",
"attributes" : {}},
{ "key" : "mortar_method",
"description" : "Method for coupling Darcy flow between dimensions.",
"default" : { "type" : "value at declaration",
"value" : "None" },
"type" : "77e8d459d5c35386",
"attributes" : {}}]
},{
"id" : "cba11500fe114d7b",
"input_type" : "Array",
"name" : "array_of_Double",
"attributes" : {},
"range" : [3, 3],
"subtype" : "47484ede475775e6"
},
{
"id" : "ee2a83314dd01dca",
"input_type" : "Array",
"name" : "array_of_Flow_Darcy_MH_Data",
"attributes" : {},
"range" : [0, 4294967295],
"subtype" : "34783e965b7b8f01"
},
{
"id" : "34783e965b7b8f01",
"input_type" : "Record",
"name" : "Flow_Darcy_MH_Data",
"attributes" : {},
"description" : "Record to set fields of the equation.\\nThe fields are set only on the domain specified by one of the keys: 'region', 'rid'\\nand after the time given by the key 'time'. The field setting can be overridden by\\n any Flow_Darcy_MH_Data record that comes later in the boundary data array.",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "Flow_Darcy_MH_Data" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "region",
"description" : "Labels of the regions where to set fields. ",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "eee303f526b992fd",
"attributes" : {}},
{ "key" : "rid",
"description" : "ID of the region where to set fields.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "151ce92d5201d44f",
"attributes" : {
"obsolete" : "Specification of the region by its ID is obsolete, will be removed in release 3.0.\nUse region label declared in the Mesh record or default label 'region_<ID>'."
}},
{ "key" : "time",
"description" : "Apply field setting in this record after this time.\\nThese times have to form an increasing sequence.",
"default" : { "type" : "value at declaration",
"value" : 0.0 },
"type" : "6b1c4ede475775aa",
"attributes" : {}},
{ "key" : "anisotropy",
"description" : "Anisotropy of the conductivity tensor. (($[-]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "2165beae2a9dffc8",
"attributes" : {
"field_value_shape" : { "shape": [ 3, 3 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : 0, "md" : 0, "kg" : 0, "s" : 0, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}},
{ "key" : "cross_section",
"description" : "Complement dimension parameter (cross section for 1D, thickness for 2D). (($[m^{3-d}]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "15b28e4bc4f2e83",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : 3, "md" : -1, "kg" : 0, "s" : 0, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}},
{ "key" : "conductivity",
"description" : "Isotropic conductivity scalar. (($[ms^{-1}]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "15b28e4bc4f2e83",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ 0, 1.79769e+308 ] },
"key_field_unit" : { "m" : 1, "md" : 0, "kg" : 0, "s" : -1, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}},
{ "key" : "sigma",
"description" : "Transition coefficient between dimensions. (($[-]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "15b28e4bc4f2e83",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : 0, "md" : 0, "kg" : 0, "s" : 0, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}},
{ "key" : "water_source_density",
"description" : "Water source density. (($[s^{-1}]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "15b28e4bc4f2e83",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : 0, "md" : 0, "kg" : 0, "s" : -1, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}},
{ "key" : "bc_type",
"description" : "Boundary condition type, possible values: (($[-]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "96725cc59b9badef",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Integer", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : 0, "md" : 0, "kg" : 0, "s" : 0, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}},
{ "key" : "bc_pressure",
"description" : "Prescribed pressure value on the boundary. Used for all values of 'bc_type' except for 'none' and 'seepage'. See documentation of 'bc_type' for exact meaning of 'bc_pressure' in individual boundary condition types. (($[m]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "15b28e4bc4f2e83",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : 1, "md" : 0, "kg" : 0, "s" : 0, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}},
{ "key" : "bc_flux",
"description" : "Incoming water boundary flux. Used for bc_types : 'total_flux', 'seepage', 'river'. (($[m^{4-d}s^{-1}]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "15b28e4bc4f2e83",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : 4, "md" : -1, "kg" : 0, "s" : -1, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}},
{ "key" : "bc_robin_sigma",
"description" : "Conductivity coefficient in the 'total_flux' or the 'river' boundary condition type. (($[m^{3-d}s^{-1}]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "15b28e4bc4f2e83",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : 3, "md" : -1, "kg" : 0, "s" : -1, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}},
{ "key" : "bc_switch_pressure",
"description" : "Critical switch pressure for 'seepage' and 'river' boundary conditions. (($[m]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "15b28e4bc4f2e83",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : 1, "md" : 0, "kg" : 0, "s" : 0, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}},
{ "key" : "init_pressure",
"description" : "Initial condition for pressure (($[m]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "15b28e4bc4f2e83",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : 1, "md" : 0, "kg" : 0, "s" : 0, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}},
{ "key" : "storativity",
"description" : "Storativity. (($[m^{-1}]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "15b28e4bc4f2e83",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : -1, "md" : 0, "kg" : 0, "s" : 0, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}},
{ "key" : "bc_piezo_head",
"description" : "Boundary piezometric head for BC types: dirichlet, robin, and river.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "15b28e4bc4f2e83",
"attributes" : {}},
{ "key" : "bc_switch_piezo_head",
"description" : "Boundary switch piezometric head for BC types: seepage, river.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "15b28e4bc4f2e83",
"attributes" : {}},
{ "key" : "init_piezo_head",
"description" : "Initial condition for the pressure given as the piezometric head.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "15b28e4bc4f2e83",
"attributes" : {}}]
},{
"id" : "eee303f526b992fd",
"input_type" : "Array",
"name" : "array_of_String",
"attributes" : {},
"range" : [1, 4294967295],
"subtype" : "29b5533100b6f60f"
},
{
"id" : "b1677cec04676588",
"input_type" : "Abstract",
"name" : "Field_R3_to_R[3,3]",
"attributes" : {
"_generic_parameters" : [ "element_input_type" ],
"_root_of_generic_subtree" : true,
"field_value_shape" : [3, 3]
},
"description" : "Abstract for all time-space functions.",
"default_descendant" : "163a4a69c4fe2d3a",
"implementations" : [
"f80633c2189c686",
"163a4a69c4fe2d3a",
"607c42f84e92ccdf",
"bd4a989726d6edcb",
"10d12934b291faa9",
"5d5fd96ba436deb2"]},{
"id" : "f80633c2189c686",
"input_type" : "Record",
"name" : "FieldPython",
"attributes" : {},
"description" : "R3_to_R[3,3] Field given by a Python script.",
"implements" : [ "b1677cec04676588" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldPython" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "unit",
"description" : "Unit of the field values provided in the main input file, in the external file, or by a function (FieldPython).",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "d671df90b1b2e854",
"attributes" : {}},
{ "key" : "script_string",
"description" : "Python script given as in place string",
"default" : { "type" : "value at read time",
"value" : "Obligatory if 'script_file' is not given. " },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "script_file",
"description" : "Python script given as external file",
"default" : { "type" : "value at read time",
"value" : "Obligatory if 'script_striong' is not given. " },
"type" : "89a808b8e9515bf8",
"attributes" : {}},
{ "key" : "function",
"description" : "Function in the given script that returns tuple containing components of the return type.\\nFor NxM tensor values: tensor(row,col) = tuple( M*row + col ).",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f",
"attributes" : {}}]
},{
"id" : "d671df90b1b2e854",
"input_type" : "Record",
"name" : "Unit",
"attributes" : {},
"description" : "Specify unit of an input value. Evaluation of the unit formula results into a coeficient and a unit in terms of powers of base SI units. The unit must match expected SI unit of the value, while the value provided on the input is multiplied by the coefficient before further processing. The unit formula have a form:\\n```\\n<UnitExpr>;<Variable>=<Number>*<UnitExpr>;...,\\n```\\nwhere ```<Variable>``` is a variable name and ```<UnitExpr>``` is a units expression which consists of products and divisions of terms.\\n\\nA term has a form: ```<Base>^<N>```, where ```<N>``` is an integer exponent and ```<Base>``` is either a base SI unit, a derived unit, or a variable defined in the same unit formula. Example, unit for the pressure head:\\n\\n```MPa/rho/g_; rho = 990*kg*m^-3; g_ = 9.8*m*s^-2```",
"reducible_to_key" : "unit_formula",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "Unit" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "unit_formula",
"description" : "Definition of unit.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f",
"attributes" : {}}]
},{
"id" : "163a4a69c4fe2d3a",
"input_type" : "Record",
"name" : "FieldConstant",
"attributes" : {
"_generic_parameters" : [ "element_input_type" ]
},
"description" : "R3_to_R[3,3] Field constant in space.",
"implements" : [ "b1677cec04676588" ],
"reducible_to_key" : "value",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldConstant" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "unit",
"description" : "Unit of the field values provided in the main input file, in the external file, or by a function (FieldPython).",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "d671df90b1b2e854",
"attributes" : {}},
{ "key" : "value",
"description" : "Value of the constant field. For vector values, you can use scalar value to enter constant vector. For square (($N\\\\times N$))-matrix values, you can use:  - vector of size (($N$)) to enter diagonal matrix\\n\\n - vector of size (($\\\\frac12N(N+1)$)) to enter symmetric matrix (upper triangle, row by row)\\n - scalar to enter multiple of the unit matrix.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "9bfa4bcd4482892d",
"attributes" : {}}]
},{
"id" : "9bfa4bcd4482892d",
"input_type" : "Array",
"name" : "array_of_array_of_element_input_type",
"attributes" : {},
"range" : [1, 4294967295],
"subtype" : "f6b8a797184314b0"
},
{
"id" : "f6b8a797184314b0",
"input_type" : "Array",
"name" : "array_of_element_input_type",
"attributes" : {},
"range" : [1, 4294967295],
"subtype" : "75d8e11a6158d19b"
},
{
"id" : "75d8e11a6158d19b",
"input_type" : "Parameter",
"name" : "element_input_type",
"attributes" : {}
},{
"id" : "607c42f84e92ccdf",
"input_type" : "Record",
"name" : "FieldFormula",
"attributes" : {},
"description" : "R3_to_R[3,3] Field given by runtime interpreted formula.",
"implements" : [ "b1677cec04676588" ],
"reducible_to_key" : "value",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldFormula" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "unit",
"description" : "Unit of the field values provided in the main input file, in the external file, or by a function (FieldPython).",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "d671df90b1b2e854",
"attributes" : {}},
{ "key" : "value",
"description" : "String, array of strings, or matrix of strings with formulas for individual entries of scalar, vector, or tensor value respectively.\\nFor vector values, you can use just one string to enter homogeneous vector.\\nFor square (($N\\\\times N$))-matrix values, you can use:\\n\\n - array of strings of size (($N$)) to enter diagonal matrix\\n - array of strings of size (($\\\\frac12N(N+1)$)) to enter symmetric matrix (upper triangle, row by row)\\n - just one string to enter (spatially variable) multiple of the unit matrix.\\nFormula can contain variables ```x,y,z,t``` and usual operators and functions.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "45d2b3f2f233c5ec",
"attributes" : {}}]
},{
"id" : "45d2b3f2f233c5ec",
"input_type" : "Array",
"name" : "array_of_array_of_String",
"attributes" : {},
"range" : [1, 4294967295],
"subtype" : "eee303f526b992fd"
},
{
"id" : "bd4a989726d6edcb",
"input_type" : "Record",
"name" : "FieldElementwise",
"attributes" : {},
"description" : "R3_to_R[3,3] Field piecewise constant on mesh elements.",
"implements" : [ "b1677cec04676588" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldElementwise" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "unit",
"description" : "Unit of the field values provided in the main input file, in the external file, or by a function (FieldPython).",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "d671df90b1b2e854",
"attributes" : {}},
{ "key" : "gmsh_file",
"description" : "Input file with ASCII GMSH file format.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "89a808b8e9515bf8",
"attributes" : {}},
{ "key" : "field_name",
"description" : "The values of the Field are read from the ```$ElementData``` section with field name given by this key.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f",
"attributes" : {}}]
},{
"id" : "10d12934b291faa9",
"input_type" : "Record",
"name" : "FieldInterpolatedP0",
"attributes" : {},
"description" : "R3_to_R[3,3] Field interpolated from external mesh data and piecewise constant on mesh elements.",
"implements" : [ "b1677cec04676588" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldInterpolatedP0" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "unit",
"description" : "Unit of the field values provided in the main input file, in the external file, or by a function (FieldPython).",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "d671df90b1b2e854",
"attributes" : {}},
{ "key" : "gmsh_file",
"description" : "Input file with ASCII GMSH file format.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "89a808b8e9515bf8",
"attributes" : {}},
{ "key" : "field_name",
"description" : "The values of the Field are read from the ```$ElementData``` section with field name given by this key.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f",
"attributes" : {}}]
},{
"id" : "5d5fd96ba436deb2",
"input_type" : "Record",
"name" : "FieldTimeFunction",
"attributes" : {
"_generic_parameters" : [ "element_input_type" ]
},
"description" : "R3_to_R[3,3] Field time-dependent function in space.",
"implements" : [ "b1677cec04676588" ],
"reducible_to_key" : "time_function",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldTimeFunction" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "unit",
"description" : "Unit of the field values provided in the main input file, in the external file, or by a function (FieldPython).",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "d671df90b1b2e854",
"attributes" : {}},
{ "key" : "time_function",
"description" : "Values of time series initialization of Field.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "295adc797b007e66",
"attributes" : {}}]
},{
"id" : "295adc797b007e66",
"input_type" : "Record",
"name" : "TableFunction",
"attributes" : {
"_generic_parameters" : [ "element_input_type" ]
},
"description" : "Allow set variable series initialization of Fields.",
"reducible_to_key" : "values",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "TableFunction" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "values",
"description" : "Initizaliation values of Field.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "71fb16c4aca996f0",
"attributes" : {}}]
},{
"id" : "71fb16c4aca996f0",
"input_type" : "Array",
"name" : "array_of_IndependentValue",
"attributes" : {},
"range" : [2, 4294967295],
"subtype" : "e488a44c05b0b209"
},
{
"id" : "e488a44c05b0b209",
"input_type" : "Tuple",
"name" : "IndependentValue",
"attributes" : {
"_generic_parameters" : [ "element_input_type" ]
},
"description" : "Value of Field for independent variable.",
"keys" : [
{ "key" : "t",
"description" : "Independent variable of stamp.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "6b1c4ede475775aa",
"attributes" : {}},
{ "key" : "value",
"description" : "Value of the field in given stamp.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "9bfa4bcd4482892d",
"attributes" : {}}]
},{
"id" : "2165beae2a9dffc8",
"input_type" : "Abstract",
"name" : "Field_R3_to_R[3,3]",
"generic_type" : "b1677cec04676588",
"parameters" : {"element_input_type" : "47484ede475775e6"},
"attributes" : {
"field_value_shape" : [3, 3]
},
"description" : "Abstract for all time-space functions.",
"default_descendant" : "c575a0b478e36949",
"implementations" : [
"f80633c2189c686",
"c575a0b478e36949",
"607c42f84e92ccdf",
"bd4a989726d6edcb",
"10d12934b291faa9",
"5841d2990f771d2d"]},{
"id" : "c575a0b478e36949",
"input_type" : "Record",
"name" : "FieldConstant",
"generic_type" : "163a4a69c4fe2d3a",
"parameters" : {"element_input_type" : "47484ede475775e6"},
"attributes" : {},
"description" : "R3_to_R[3,3] Field constant in space.",
"implements" : [ "b1677cec04676588" ],
"reducible_to_key" : "value",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldConstant" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "unit",
"description" : "Unit of the field values provided in the main input file, in the external file, or by a function (FieldPython).",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "d671df90b1b2e854",
"attributes" : {}},
{ "key" : "value",
"description" : "Value of the constant field. For vector values, you can use scalar value to enter constant vector. For square (($N\\\\times N$))-matrix values, you can use:  - vector of size (($N$)) to enter diagonal matrix\\n\\n - vector of size (($\\\\frac12N(N+1)$)) to enter symmetric matrix (upper triangle, row by row)\\n - scalar to enter multiple of the unit matrix.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "558c3ac110b5cea3",
"attributes" : {}}]
},{
"id" : "558c3ac110b5cea3",
"input_type" : "Array",
"name" : "array_of_array_of_Double",
"generic_type" : "9bfa4bcd4482892d",
"parameters" : {"element_input_type" : "47484ede475775e6"},
"attributes" : {},
"range" : [1, 4294967295],
"subtype" : "cba115413e116f1a"
},
{
"id" : "cba115413e116f1a",
"input_type" : "Array",
"name" : "array_of_Double",
"generic_type" : "f6b8a797184314b0",
"parameters" : {"element_input_type" : "47484ede475775e6"},
"attributes" : {},
"range" : [1, 4294967295],
"subtype" : "47484ede475775e6"
},
{
"id" : "5841d2990f771d2d",
"input_type" : "Record",
"name" : "FieldTimeFunction",
"generic_type" : "5d5fd96ba436deb2",
"parameters" : {"element_input_type" : "47484ede475775e6"},
"attributes" : {},
"description" : "R3_to_R[3,3] Field time-dependent function in space.",
"implements" : [ "b1677cec04676588" ],
"reducible_to_key" : "time_function",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldTimeFunction" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "unit",
"description" : "Unit of the field values provided in the main input file, in the external file, or by a function (FieldPython).",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "d671df90b1b2e854",
"attributes" : {}},
{ "key" : "time_function",
"description" : "Values of time series initialization of Field.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "420239aea02a62ad",
"attributes" : {}}]
},{
"id" : "420239aea02a62ad",
"input_type" : "Record",
"name" : "TableFunction",
"generic_type" : "295adc797b007e66",
"parameters" : {"element_input_type" : "47484ede475775e6"},
"attributes" : {},
"description" : "Allow set variable series initialization of Fields.",
"reducible_to_key" : "values",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "TableFunction" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "values",
"description" : "Initizaliation values of Field.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "ddc461769a97c3e4",
"attributes" : {}}]
},{
"id" : "ddc461769a97c3e4",
"input_type" : "Array",
"name" : "array_of_IndependentValue",
"generic_type" : "71fb16c4aca996f0",
"parameters" : {"element_input_type" : "47484ede475775e6"},
"attributes" : {},
"range" : [2, 4294967295],
"subtype" : "48a1729a1bb25cfd"
},
{
"id" : "48a1729a1bb25cfd",
"input_type" : "Tuple",
"name" : "IndependentValue",
"generic_type" : "e488a44c05b0b209",
"parameters" : {"element_input_type" : "47484ede475775e6"},
"attributes" : {},
"description" : "Value of Field for independent variable.",
"keys" : [
{ "key" : "t",
"description" : "Independent variable of stamp.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "6b1c4ede475775aa",
"attributes" : {}},
{ "key" : "value",
"description" : "Value of the field in given stamp.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "558c3ac110b5cea3",
"attributes" : {}}]
},{
"id" : "68a8bfbc6ae41b96",
"input_type" : "Abstract",
"name" : "Field_R3_to_R",
"attributes" : {
"_generic_parameters" : [ "element_input_type" ],
"_root_of_generic_subtree" : true,
"field_value_shape" : [1, 1]
},
"description" : "Abstract for all time-space functions.",
"default_descendant" : "1763d8bad2619ea5",
"implementations" : [
"a41a63ef82d50ffa",
"1763d8bad2619ea5",
"d7b32ac8b94b5e16",
"f736389bcffe985d",
"1dc273e002c60620",
"9a64a1247454c937"]},{
"id" : "a41a63ef82d50ffa",
"input_type" : "Record",
"name" : "FieldPython",
"attributes" : {},
"description" : "R3_to_R Field given by a Python script.",
"implements" : [ "68a8bfbc6ae41b96" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldPython" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "unit",
"description" : "Unit of the field values provided in the main input file, in the external file, or by a function (FieldPython).",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "d671df90b1b2e854",
"attributes" : {}},
{ "key" : "script_string",
"description" : "Python script given as in place string",
"default" : { "type" : "value at read time",
"value" : "Obligatory if 'script_file' is not given. " },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "script_file",
"description" : "Python script given as external file",
"default" : { "type" : "value at read time",
"value" : "Obligatory if 'script_striong' is not given. " },
"type" : "89a808b8e9515bf8",
"attributes" : {}},
{ "key" : "function",
"description" : "Function in the given script that returns tuple containing components of the return type.\\nFor NxM tensor values: tensor(row,col) = tuple( M*row + col ).",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f",
"attributes" : {}}]
},{
"id" : "1763d8bad2619ea5",
"input_type" : "Record",
"name" : "FieldConstant",
"attributes" : {
"_generic_parameters" : [ "element_input_type" ]
},
"description" : "R3_to_R Field constant in space.",
"implements" : [ "68a8bfbc6ae41b96" ],
"reducible_to_key" : "value",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldConstant" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "unit",
"description" : "Unit of the field values provided in the main input file, in the external file, or by a function (FieldPython).",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "d671df90b1b2e854",
"attributes" : {}},
{ "key" : "value",
"description" : "Value of the constant field. For vector values, you can use scalar value to enter constant vector. For square (($N\\\\times N$))-matrix values, you can use:  - vector of size (($N$)) to enter diagonal matrix\\n\\n - vector of size (($\\\\frac12N(N+1)$)) to enter symmetric matrix (upper triangle, row by row)\\n - scalar to enter multiple of the unit matrix.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "75d8e11a6158d19b",
"attributes" : {}}]
},{
"id" : "d7b32ac8b94b5e16",
"input_type" : "Record",
"name" : "FieldFormula",
"attributes" : {},
"description" : "R3_to_R Field given by runtime interpreted formula.",
"implements" : [ "68a8bfbc6ae41b96" ],
"reducible_to_key" : "value",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldFormula" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "unit",
"description" : "Unit of the field values provided in the main input file, in the external file, or by a function (FieldPython).",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "d671df90b1b2e854",
"attributes" : {}},
{ "key" : "value",
"description" : "String, array of strings, or matrix of strings with formulas for individual entries of scalar, vector, or tensor value respectively.\\nFor vector values, you can use just one string to enter homogeneous vector.\\nFor square (($N\\\\times N$))-matrix values, you can use:\\n\\n - array of strings of size (($N$)) to enter diagonal matrix\\n - array of strings of size (($\\\\frac12N(N+1)$)) to enter symmetric matrix (upper triangle, row by row)\\n - just one string to enter (spatially variable) multiple of the unit matrix.\\nFormula can contain variables ```x,y,z,t``` and usual operators and functions.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f",
"attributes" : {}}]
},{
"id" : "f736389bcffe985d",
"input_type" : "Record",
"name" : "FieldElementwise",
"attributes" : {},
"description" : "R3_to_R Field piecewise constant on mesh elements.",
"implements" : [ "68a8bfbc6ae41b96" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldElementwise" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "unit",
"description" : "Unit of the field values provided in the main input file, in the external file, or by a function (FieldPython).",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "d671df90b1b2e854",
"attributes" : {}},
{ "key" : "gmsh_file",
"description" : "Input file with ASCII GMSH file format.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "89a808b8e9515bf8",
"attributes" : {}},
{ "key" : "field_name",
"description" : "The values of the Field are read from the ```$ElementData``` section with field name given by this key.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f",
"attributes" : {}}]
},{
"id" : "1dc273e002c60620",
"input_type" : "Record",
"name" : "FieldInterpolatedP0",
"attributes" : {},
"description" : "R3_to_R Field interpolated from external mesh data and piecewise constant on mesh elements.",
"implements" : [ "68a8bfbc6ae41b96" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldInterpolatedP0" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "unit",
"description" : "Unit of the field values provided in the main input file, in the external file, or by a function (FieldPython).",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "d671df90b1b2e854",
"attributes" : {}},
{ "key" : "gmsh_file",
"description" : "Input file with ASCII GMSH file format.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "89a808b8e9515bf8",
"attributes" : {}},
{ "key" : "field_name",
"description" : "The values of the Field are read from the ```$ElementData``` section with field name given by this key.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f",
"attributes" : {}}]
},{
"id" : "9a64a1247454c937",
"input_type" : "Record",
"name" : "FieldTimeFunction",
"attributes" : {
"_generic_parameters" : [ "element_input_type" ]
},
"description" : "R3_to_R Field time-dependent function in space.",
"implements" : [ "68a8bfbc6ae41b96" ],
"reducible_to_key" : "time_function",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldTimeFunction" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "unit",
"description" : "Unit of the field values provided in the main input file, in the external file, or by a function (FieldPython).",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "d671df90b1b2e854",
"attributes" : {}},
{ "key" : "time_function",
"description" : "Values of time series initialization of Field.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "705839e94dc90e8b",
"attributes" : {}}]
},{
"id" : "705839e94dc90e8b",
"input_type" : "Record",
"name" : "TableFunction",
"attributes" : {
"_generic_parameters" : [ "element_input_type" ]
},
"description" : "Allow set variable series initialization of Fields.",
"reducible_to_key" : "values",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "TableFunction" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "values",
"description" : "Initizaliation values of Field.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "ae9206c686c07f12",
"attributes" : {}}]
},{
"id" : "ae9206c686c07f12",
"input_type" : "Array",
"name" : "array_of_IndependentValue",
"attributes" : {},
"range" : [2, 4294967295],
"subtype" : "3bef944a2f88d9a7"
},
{
"id" : "3bef944a2f88d9a7",
"input_type" : "Tuple",
"name" : "IndependentValue",
"attributes" : {
"_generic_parameters" : [ "element_input_type" ]
},
"description" : "Value of Field for independent variable.",
"keys" : [
{ "key" : "t",
"description" : "Independent variable of stamp.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "6b1c4ede475775aa",
"attributes" : {}},
{ "key" : "value",
"description" : "Value of the field in given stamp.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "75d8e11a6158d19b",
"attributes" : {}}]
},{
"id" : "15b28e4bc4f2e83",
"input_type" : "Abstract",
"name" : "Field_R3_to_R",
"generic_type" : "68a8bfbc6ae41b96",
"parameters" : {"element_input_type" : "47484ede475775e6"},
"attributes" : {
"field_value_shape" : [1, 1]
},
"description" : "Abstract for all time-space functions.",
"default_descendant" : "83c4b06d64b3303b",
"implementations" : [
"a41a63ef82d50ffa",
"83c4b06d64b3303b",
"d7b32ac8b94b5e16",
"f736389bcffe985d",
"1dc273e002c60620",
"bd50f2e71dce8053"]},{
"id" : "83c4b06d64b3303b",
"input_type" : "Record",
"name" : "FieldConstant",
"generic_type" : "1763d8bad2619ea5",
"parameters" : {"element_input_type" : "47484ede475775e6"},
"attributes" : {},
"description" : "R3_to_R Field constant in space.",
"implements" : [ "68a8bfbc6ae41b96" ],
"reducible_to_key" : "value",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldConstant" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "unit",
"description" : "Unit of the field values provided in the main input file, in the external file, or by a function (FieldPython).",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "d671df90b1b2e854",
"attributes" : {}},
{ "key" : "value",
"description" : "Value of the constant field. For vector values, you can use scalar value to enter constant vector. For square (($N\\\\times N$))-matrix values, you can use:  - vector of size (($N$)) to enter diagonal matrix\\n\\n - vector of size (($\\\\frac12N(N+1)$)) to enter symmetric matrix (upper triangle, row by row)\\n - scalar to enter multiple of the unit matrix.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "47484ede475775e6",
"attributes" : {}}]
},{
"id" : "bd50f2e71dce8053",
"input_type" : "Record",
"name" : "FieldTimeFunction",
"generic_type" : "9a64a1247454c937",
"parameters" : {"element_input_type" : "47484ede475775e6"},
"attributes" : {},
"description" : "R3_to_R Field time-dependent function in space.",
"implements" : [ "68a8bfbc6ae41b96" ],
"reducible_to_key" : "time_function",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldTimeFunction" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "unit",
"description" : "Unit of the field values provided in the main input file, in the external file, or by a function (FieldPython).",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "d671df90b1b2e854",
"attributes" : {}},
{ "key" : "time_function",
"description" : "Values of time series initialization of Field.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "2412b2c63b539911",
"attributes" : {}}]
},{
"id" : "2412b2c63b539911",
"input_type" : "Record",
"name" : "TableFunction",
"generic_type" : "705839e94dc90e8b",
"parameters" : {"element_input_type" : "47484ede475775e6"},
"attributes" : {},
"description" : "Allow set variable series initialization of Fields.",
"reducible_to_key" : "values",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "TableFunction" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "values",
"description" : "Initizaliation values of Field.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "7df413180686d52a",
"attributes" : {}}]
},{
"id" : "7df413180686d52a",
"input_type" : "Array",
"name" : "array_of_IndependentValue",
"generic_type" : "ae9206c686c07f12",
"parameters" : {"element_input_type" : "47484ede475775e6"},
"attributes" : {},
"range" : [2, 4294967295],
"subtype" : "e891a0f7afc373bf"
},
{
"id" : "e891a0f7afc373bf",
"input_type" : "Tuple",
"name" : "IndependentValue",
"generic_type" : "3bef944a2f88d9a7",
"parameters" : {"element_input_type" : "47484ede475775e6"},
"attributes" : {},
"description" : "Value of Field for independent variable.",
"keys" : [
{ "key" : "t",
"description" : "Independent variable of stamp.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "6b1c4ede475775aa",
"attributes" : {}},
{ "key" : "value",
"description" : "Value of the field in given stamp.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "47484ede475775e6",
"attributes" : {}}]
},{
"id" : "96725cc59b9badef",
"input_type" : "Abstract",
"name" : "Field_R3_to_R",
"generic_type" : "68a8bfbc6ae41b96",
"parameters" : {"element_input_type" : "215f2c79fc5bde76"},
"attributes" : {
"field_value_shape" : [1, 1]
},
"description" : "Abstract for all time-space functions.",
"default_descendant" : "f015b2a7a7fb36f7",
"implementations" : [
"a41a63ef82d50ffa",
"f015b2a7a7fb36f7",
"d7b32ac8b94b5e16",
"f736389bcffe985d",
"1dc273e002c60620",
"c416e58076d56f18"]},{
"id" : "f015b2a7a7fb36f7",
"input_type" : "Record",
"name" : "FieldConstant",
"generic_type" : "1763d8bad2619ea5",
"parameters" : {"element_input_type" : "215f2c79fc5bde76"},
"attributes" : {},
"description" : "R3_to_R Field constant in space.",
"implements" : [ "68a8bfbc6ae41b96" ],
"reducible_to_key" : "value",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldConstant" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "unit",
"description" : "Unit of the field values provided in the main input file, in the external file, or by a function (FieldPython).",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "d671df90b1b2e854",
"attributes" : {}},
{ "key" : "value",
"description" : "Value of the constant field. For vector values, you can use scalar value to enter constant vector. For square (($N\\\\times N$))-matrix values, you can use:  - vector of size (($N$)) to enter diagonal matrix\\n\\n - vector of size (($\\\\frac12N(N+1)$)) to enter symmetric matrix (upper triangle, row by row)\\n - scalar to enter multiple of the unit matrix.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "215f2c79fc5bde76",
"attributes" : {}}]
},{
"id" : "215f2c79fc5bde76",
"input_type" : "Selection",
"name" : "Flow_Darcy_BC_Type",
"attributes" : {},
"description" : "",
"values" : [
{ "name" : "none",
"description" : "Homogeneous Neumann boundary condition. Zero flux",
"attributes" : {}
},
{ "name" : "dirichlet",
"description" : "Dirichlet boundary condition. Specify the pressure head through the ''bc_pressure'' field or the piezometric head through the ''bc_piezo_head'' field.",
"attributes" : {}
},
{ "name" : "total_flux",
"description" : "Flux boundary condition (combines Neumann and Robin type). Water inflow equal to (($ \\\\delta_d(q_d^N + \\\\sigma_d (h_d^R - h_d) )$)). Specify the water inflow by the 'bc_flux' field, the transition coefficient by 'bc_robin_sigma' and the reference pressure head or pieozmetric head through ''bc_pressure'' or ''bc_piezo_head'' respectively.",
"attributes" : {}
},
{ "name" : "seepage",
"description" : "Seepage face boundary condition. Pressure and inflow bounded from above. Boundary with potential seepage flow is described by the pair of inequalities: (($h_d \\\\le h_d^D$)) and (($ -\\\\boldsymbol q_d\\\\cdot\\\\boldsymbol n \\\\le \\\\delta q_d^N$)), where the equality holds in at least one of them. Caution. Setting (($q_d^N$)) strictly negative may lead to an ill posed problem since a positive outflow is enforced. Parameters (($h_d^D$)) and (($q_d^N$)) are given by fields ``bc_switch_pressure`` (or ``bc_switch_piezo_head``) and ``bc_flux`` respectively.",
"attributes" : {}
},
{ "name" : "river",
"description" : "River boundary condition. For the water level above the bedrock, (($H_d > H_d^S$)), the Robin boundary condition is used with the inflow given by: (( $ \\\\delta_d(q_d^N + \\\\sigma_d(H_d^D - H_d) )$)). For the water level under the bedrock, constant infiltration is used: (( $ \\\\delta_d(q_d^N + \\\\sigma_d(H_d^D - H_d^S) )$)). Parameters: ``bc_pressure``, ``bc_switch_pressure``,  ``bc_sigma, ``bc_flux``.",
"attributes" : {}
}]
},{
"id" : "c416e58076d56f18",
"input_type" : "Record",
"name" : "FieldTimeFunction",
"generic_type" : "9a64a1247454c937",
"parameters" : {"element_input_type" : "215f2c79fc5bde76"},
"attributes" : {},
"description" : "R3_to_R Field time-dependent function in space.",
"implements" : [ "68a8bfbc6ae41b96" ],
"reducible_to_key" : "time_function",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldTimeFunction" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "unit",
"description" : "Unit of the field values provided in the main input file, in the external file, or by a function (FieldPython).",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "d671df90b1b2e854",
"attributes" : {}},
{ "key" : "time_function",
"description" : "Values of time series initialization of Field.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "ce24533c5c7ede72",
"attributes" : {}}]
},{
"id" : "ce24533c5c7ede72",
"input_type" : "Record",
"name" : "TableFunction",
"generic_type" : "705839e94dc90e8b",
"parameters" : {"element_input_type" : "215f2c79fc5bde76"},
"attributes" : {},
"description" : "Allow set variable series initialization of Fields.",
"reducible_to_key" : "values",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "TableFunction" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "values",
"description" : "Initizaliation values of Field.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "bc8127e23ced7f86",
"attributes" : {}}]
},{
"id" : "bc8127e23ced7f86",
"input_type" : "Array",
"name" : "array_of_IndependentValue",
"generic_type" : "ae9206c686c07f12",
"parameters" : {"element_input_type" : "215f2c79fc5bde76"},
"attributes" : {},
"range" : [2, 4294967295],
"subtype" : "29deb52d756bd91b"
},
{
"id" : "29deb52d756bd91b",
"input_type" : "Tuple",
"name" : "IndependentValue",
"generic_type" : "3bef944a2f88d9a7",
"parameters" : {"element_input_type" : "215f2c79fc5bde76"},
"attributes" : {},
"description" : "Value of Field for independent variable.",
"keys" : [
{ "key" : "t",
"description" : "Independent variable of stamp.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "6b1c4ede475775aa",
"attributes" : {}},
{ "key" : "value",
"description" : "Value of the field in given stamp.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "215f2c79fc5bde76",
"attributes" : {}}]
},{
"id" : "dc010d85f7b37df9",
"input_type" : "Record",
"name" : "NonlinearSolver",
"attributes" : {},
"description" : "Parameters to a non-linear solver.",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "NonlinearSolver" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "linear_solver",
"description" : "Linear solver for MH problem.",
"default" : { "type" : "value at declaration",
"value" : {} },
"type" : "583fa18fca632a19",
"attributes" : {}},
{ "key" : "tolerance",
"description" : "Residual tolerance.",
"default" : { "type" : "value at declaration",
"value" : 1E-6 },
"type" : "6b1c4ede475775aa",
"attributes" : {}},
{ "key" : "min_it",
"description" : "Minimum number of iterations (linear solves) to use. This is usefull if the convergence criteria does not characterize your goal well enough so it converges prematurely possibly without the single linear solve.If greater then 'max_it' the value is set to 'max_it'.",
"default" : { "type" : "value at declaration",
"value" : 1 },
"type" : "151ce92d5201d44f",
"attributes" : {}},
{ "key" : "max_it",
"description" : "Maximum number of iterations (linear solves) of the non-linear solver.",
"default" : { "type" : "value at declaration",
"value" : 100 },
"type" : "151ce92d5201d44f",
"attributes" : {}},
{ "key" : "converge_on_stagnation",
"description" : "If a stagnation of the nonlinear solver is detected the solver stops. A divergence is reported by default forcing the end of the simulation. Setting this flag to 'true', the solverends with convergence success on stagnation, but report warning about it.",
"default" : { "type" : "value at declaration",
"value" : false },
"type" : "282546d52edd4",
"attributes" : {}}]
},{
"id" : "583fa18fca632a19",
"input_type" : "Abstract",
"name" : "LinSys",
"attributes" : {},
"description" : "Linear solver setting.",
"default_descendant" : "d86836fae202309c",
"implementations" : [
"d86836fae202309c",
"3b2141ca2f7fb678"]},{
"id" : "d86836fae202309c",
"input_type" : "Record",
"name" : "Petsc",
"attributes" : {},
"description" : "Interface to PETSc solvers. Convergence criteria is:\\n```\\nnorm( res_n )  < max( norm( res_0 ) * r_tol, a_tol )\\n```\\nwhere res_i is the residuum vector after i-th iteration of the solver and res_0 is an estimate of the norm of initial residual. If the initial guess of the solution is provided (usually only for transient equations) the residual of this estimate is used, otherwise the norm of preconditioned RHS is used. The default norm is L2 norm of preconditioned residual: (($ P^{-1}(Ax-b)$)), usage of other norm may be prescribed using the 'option' key. See also PETSc documentation for KSPSetNormType.",
"implements" : [ "583fa18fca632a19" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "Petsc" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "r_tol",
"description" : "Relative residual tolerance,  (to initial error).",
"default" : { "type" : "value at read time",
"value" : "Defalut value set by nonlinear solver or equation. If not we use value 1.0e-7." },
"type" : "ab1c4ede475775a9",
"attributes" : {}},
{ "key" : "a_tol",
"description" : "Absolute residual tolerance.",
"default" : { "type" : "value at read time",
"value" : "Defalut value set by nonlinear solver or equation. If not we use value 1.0e-11." },
"type" : "6b1c4ede475775aa",
"attributes" : {}},
{ "key" : "max_it",
"description" : "Maximum number of outer iterations of the linear solver.",
"default" : { "type" : "value at read time",
"value" : "Defalut value set by nonlinear solver or equation. If not we use value 1000." },
"type" : "151ce92d5201d44f",
"attributes" : {}},
{ "key" : "options",
"description" : "Options passed to PETSC before creating KSP instead of default setting.",
"default" : { "type" : "value at declaration",
"value" : "" },
"type" : "29b5533100b6f60f",
"attributes" : {}}]
},{
"id" : "ab1c4ede475775a9",
"input_type" : "Double",
"name" : "Double",
"attributes" : {},
"range" : [0, 1]
},{
"id" : "3b2141ca2f7fb678",
"input_type" : "Record",
"name" : "Bddc",
"attributes" : {},
"description" : "Solver setting.",
"implements" : [ "583fa18fca632a19" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "Bddc" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "r_tol",
"description" : "Relative residual tolerance,  (to initial error).",
"default" : { "type" : "value at read time",
"value" : "Defalut value set by nonlinear solver or equation. If not we use value 1.0e-7." },
"type" : "ab1c4ede475775a9",
"attributes" : {}},
{ "key" : "max_it",
"description" : "Maximum number of outer iterations of the linear solver.",
"default" : { "type" : "value at read time",
"value" : "Defalut value set by nonlinear solver or equation. If not we use value 1000." },
"type" : "151ce92d5201d44f",
"attributes" : {}},
{ "key" : "max_nondecr_it",
"description" : "Maximum number of iterations of the linear solver with non-decreasing residual.",
"default" : { "type" : "value at declaration",
"value" : 30 },
"type" : "151ce92d5201d44f",
"attributes" : {}},
{ "key" : "number_of_levels",
"description" : "Number of levels in the multilevel method (=2 for the standard BDDC).",
"default" : { "type" : "value at declaration",
"value" : 2 },
"type" : "151ce92d5201d44f",
"attributes" : {}},
{ "key" : "use_adaptive_bddc",
"description" : "Use adaptive selection of constraints in BDDCML.",
"default" : { "type" : "value at declaration",
"value" : false },
"type" : "282546d52edd4",
"attributes" : {}},
{ "key" : "bddcml_verbosity_level",
"description" : "Level of verbosity of the BDDCML library:\\n\\n - 0 - no output\\n - 1 - mild output\\n - 2 - detailed output.",
"default" : { "type" : "value at declaration",
"value" : 0 },
"type" : "151ce92dd201d44a",
"attributes" : {}}]
},{
"id" : "151ce92dd201d44a",
"input_type" : "Integer",
"name" : "Integer",
"attributes" : {},
"range" : [0, 2]
},{
"id" : "f648258f2b1360cd",
"input_type" : "Record",
"name" : "OutputStream",
"attributes" : {},
"description" : "Configuration of the spatial output of a single balance equation.",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "OutputStream" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "file",
"description" : "File path to the connected output file.",
"default" : { "type" : "value at read time",
"value" : "Name of the equation associated with the output stream." },
"type" : "5c42d5b72cb92ff",
"attributes" : {}},
{ "key" : "format",
"description" : "Format of output stream and possible parameters.",
"default" : { "type" : "value at declaration",
"value" : {} },
"type" : "29a074436156cdc1",
"attributes" : {}},
{ "key" : "times",
"description" : "Output times used for equations without is own output times key.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "f8d103d0d2e14ac5",
"attributes" : {}},
{ "key" : "output_mesh",
"description" : "Output mesh record enables output on a refined mesh.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "2727dc811cee3b01",
"attributes" : {}},
{ "key" : "precision",
"description" : "The number of decimal digits used in output of floating point values.\\\\ Default is about 17 decimal digits which is enough to keep double values exect after write-read cycle.",
"default" : { "type" : "value at declaration",
"value" : 17 },
"type" : "151ce92d5201d44f",
"attributes" : {}},
{ "key" : "observe_points",
"description" : "Array of observe points.",
"default" : { "type" : "value at declaration",
"value" : [] },
"type" : "f614a62834736b24",
"attributes" : {}}]
},{
"id" : "5c42d5b72cb92ff",
"input_type" : "FileName",
"name" : "FileName_output",
"attributes" : {},
"file_mode" : "output"
},{
"id" : "29a074436156cdc1",
"input_type" : "Abstract",
"name" : "OutputTime",
"attributes" : {},
"description" : "Format of output stream and possible parameters.",
"default_descendant" : "5a21cd9e18baa72a",
"implementations" : [
"5a21cd9e18baa72a",
"16dc0497b993cc8"]},{
"id" : "5a21cd9e18baa72a",
"input_type" : "Record",
"name" : "vtk",
"attributes" : {},
"description" : "Parameters of vtk output format.",
"implements" : [ "29a074436156cdc1" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "vtk" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "variant",
"description" : "Variant of output stream file format.",
"default" : { "type" : "value at declaration",
"value" : "ascii" },
"type" : "1e29557a6cdd8c9e",
"attributes" : {}}]
},{
"id" : "1e29557a6cdd8c9e",
"input_type" : "Selection",
"name" : "VTK variant (ascii or binary)",
"attributes" : {},
"description" : "",
"values" : [
{ "name" : "ascii",
"description" : "ASCII variant of VTK file format",
"attributes" : {}
},
{ "name" : "binary",
"description" : "Uncompressed appended binary XML VTK format without usage of base64 encoding of appended data.",
"attributes" : {}
},
{ "name" : "binary_zlib",
"description" : "Appended binary XML VTK format without usage of base64 encoding of appended data. Compressed with ZLib.",
"attributes" : {}
}]
},{
"id" : "16dc0497b993cc8",
"input_type" : "Record",
"name" : "gmsh",
"attributes" : {},
"description" : "Parameters of gmsh output format.",
"implements" : [ "29a074436156cdc1" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "gmsh" },
"type" : "29b5533100b6f60f",
"attributes" : {}}]
},{
"id" : "f8d103d0d2e14ac5",
"input_type" : "Array",
"name" : "array_of_TimeGrid",
"attributes" : {},
"range" : [0, 4294967295],
"subtype" : "fb5eeb0352c5925f"
},
{
"id" : "fb5eeb0352c5925f",
"input_type" : "Record",
"name" : "TimeGrid",
"attributes" : {},
"description" : "Equally spaced grid of time points.",
"reducible_to_key" : "begin",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "TimeGrid" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "begin",
"description" : "The start time of the grid.",
"default" : { "type" : "value at read time",
"value" : "The initial time of the associated equation." },
"type" : "6b1c4ede475775aa",
"attributes" : {}},
{ "key" : "step",
"description" : "The step of the grid. If not specified, the grid consists only of the start time.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "6b1c4ede475775aa",
"attributes" : {}},
{ "key" : "end",
"description" : "The time greater or equal to the last time in the grid.",
"default" : { "type" : "value at read time",
"value" : "The end time of the simulation." },
"type" : "6b1c4ede475775aa",
"attributes" : {}}]
},{
"id" : "2727dc811cee3b01",
"input_type" : "Record",
"name" : "OutputMesh",
"attributes" : {},
"description" : "Parameters of the refined output mesh.",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "OutputMesh" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "max_level",
"description" : "Maximal level of refinement of the output mesh.",
"default" : { "type" : "value at declaration",
"value" : 3 },
"type" : "151ce92dd201d419",
"attributes" : {}},
{ "key" : "refine_by_error",
"description" : "Set true for using error_control_field. Set false for global uniform refinement to max_level.",
"default" : { "type" : "value at declaration",
"value" : false },
"type" : "282546d52edd4",
"attributes" : {}},
{ "key" : "error_control_field",
"description" : "Name of an output field, according to which the output mesh will be refined. The field must be a SCALAR one.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "29b5533100b6f60f",
"attributes" : {}}]
},{
"id" : "151ce92dd201d419",
"input_type" : "Integer",
"name" : "Integer",
"attributes" : {},
"range" : [1, 20]
},{
"id" : "f614a62834736b24",
"input_type" : "Array",
"name" : "array_of_ObservePoint",
"attributes" : {},
"range" : [0, 4294967295],
"subtype" : "14c77ea0aeb58c18"
},
{
"id" : "14c77ea0aeb58c18",
"input_type" : "Record",
"name" : "ObservePoint",
"attributes" : {},
"description" : "Specification of the observation point. The actual observe element and the observe point on it is determined as follows:\\n\\n1. Find an initial element containing the initial point. If no such element exists we report the error.\\n2. Use BFS starting from the inital element to find the 'observe element'. The observe element is the closest element 3. Find the closest projection of the inital point on the observe element and snap this projection according to the 'snap_dim'.\\n",
"reducible_to_key" : "point",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "ObservePoint" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "name",
"description" : "Optional point name. Has to be unique. Any string that is valid YAML key in record without any quoting can be used howeverusing just alpha-numerical characters and underscore instead of the space is recommended. ",
"default" : { "type" : "value at read time",
"value" : "Default name have the form 'obs_<id>', where 'id' is the rank of the point on the input." },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "point",
"description" : "Initial point for the observe point search.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "cba11500fe114d7b",
"attributes" : {}},
{ "key" : "snap_dim",
"description" : "The dimension of the sub-element to which center we snap. For value 4 no snapping is done. For values 0 up to 3 the element containing the initial point is found and then the observepoint is snapped to the nearest center of the sub-element of the given dimension. E.g. for dimension 2 we snap to the nearest center of the face of the initial element.",
"default" : { "type" : "value at declaration",
"value" : 4 },
"type" : "151ce92dd201d448",
"attributes" : {}},
{ "key" : "snap_region",
"description" : "The region of the initial element for snapping. Without snapping we make a projection to the initial element.",
"default" : { "type" : "value at declaration",
"value" : "ALL" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "n_search_levels",
"description" : "Maximum number of levels of the breadth first search used to find the observe element from the initial element. Value zero means to search only the initial element itself.",
"default" : { "type" : "value at declaration",
"value" : 1 },
"type" : "151ce92d5201d44f",
"attributes" : {}}]
},{
"id" : "151ce92dd201d448",
"input_type" : "Integer",
"name" : "Integer",
"attributes" : {},
"range" : [0, 4]
},{
"id" : "d26f5c9651fbe82",
"input_type" : "Record",
"name" : "EquationOutput",
"attributes" : {
"_generic_parameters" : [ "output_field_selection" ],
"_root_of_generic_subtree" : true
},
"description" : "Output of the equation's fields.The output is done through the output stream of the associated balance law equation.The stream defines output format for the full space information in selected times and observe points for the full time information. The key 'fields' select the fields for the full spatial output.The set of output times may be specified  per field otherwise common time set 'times' is used. If even this is not providedthe time set of the output_stream is used. The initial time of the equation is automatically added to the time set of every selected field. The end time of the equation is automatically added to the common output time set.",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "EquationOutput" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "times",
"description" : "Output times used for the output fields without is own time series specification.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "f8d103d0d2e14ac5",
"attributes" : {}},
{ "key" : "add_input_times",
"description" : "Add all input time points of the equation, mentioned in the 'input_fields' list, also as the output points.",
"default" : { "type" : "value at declaration",
"value" : false },
"type" : "282546d52edd4",
"attributes" : {}},
{ "key" : "fields",
"description" : "Array of output fields and their individual output settings.",
"default" : { "type" : "value at declaration",
"value" : [] },
"type" : "dc44bb2d9b30af35",
"attributes" : {}},
{ "key" : "observe_fields",
"description" : "Array of the fields evaluated in the observe points of the associated output stream.",
"default" : { "type" : "value at declaration",
"value" : [] },
"type" : "28bfad7f05e39c9a",
"attributes" : {}}]
},{
"id" : "dc44bb2d9b30af35",
"input_type" : "Array",
"name" : "array_of_FieldOutputSetting",
"attributes" : {},
"range" : [0, 4294967295],
"subtype" : "b5340646484e31da"
},
{
"id" : "b5340646484e31da",
"input_type" : "Record",
"name" : "FieldOutputSetting",
"attributes" : {
"_generic_parameters" : [ "output_field_selection" ]
},
"description" : "Setting of the field output. The field name, output times, output interpolation (future).",
"reducible_to_key" : "field",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldOutputSetting" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "field",
"description" : "The field name (from selection).",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "5349fff6fa0b9271",
"attributes" : {}},
{ "key" : "times",
"description" : "Output times specific to particular field.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "f8d103d0d2e14ac5",
"attributes" : {}}]
},{
"id" : "5349fff6fa0b9271",
"input_type" : "Parameter",
"name" : "output_field_selection",
"attributes" : {}
},{
"id" : "28bfad7f05e39c9a",
"input_type" : "Array",
"name" : "array_of_output_field_selection",
"attributes" : {},
"range" : [0, 4294967295],
"subtype" : "5349fff6fa0b9271"
},
{
"id" : "eb9b95497642ce25",
"input_type" : "Record",
"name" : "EquationOutput",
"generic_type" : "d26f5c9651fbe82",
"parameters" : {"output_field_selection" : "85c6b5787a8edd73"},
"attributes" : {},
"description" : "Output of the equation's fields.The output is done through the output stream of the associated balance law equation.The stream defines output format for the full space information in selected times and observe points for the full time information. The key 'fields' select the fields for the full spatial output.The set of output times may be specified  per field otherwise common time set 'times' is used. If even this is not providedthe time set of the output_stream is used. The initial time of the equation is automatically added to the time set of every selected field. The end time of the equation is automatically added to the common output time set.",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "EquationOutput" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "times",
"description" : "Output times used for the output fields without is own time series specification.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "f8d103d0d2e14ac5",
"attributes" : {}},
{ "key" : "add_input_times",
"description" : "Add all input time points of the equation, mentioned in the 'input_fields' list, also as the output points.",
"default" : { "type" : "value at declaration",
"value" : false },
"type" : "282546d52edd4",
"attributes" : {}},
{ "key" : "fields",
"description" : "Array of output fields and their individual output settings.",
"default" : { "type" : "value at declaration",
"value" : [] },
"type" : "aa35b3f79fcdd2e8",
"attributes" : {}},
{ "key" : "observe_fields",
"description" : "Array of the fields evaluated in the observe points of the associated output stream.",
"default" : { "type" : "value at declaration",
"value" : [] },
"type" : "f8bd3bc6b5a9b741",
"attributes" : {}}]
},{
"id" : "aa35b3f79fcdd2e8",
"input_type" : "Array",
"name" : "array_of_FieldOutputSetting",
"generic_type" : "dc44bb2d9b30af35",
"parameters" : {"output_field_selection" : "85c6b5787a8edd73"},
"attributes" : {},
"range" : [0, 4294967295],
"subtype" : "a2e50eec43e9ad7d"
},
{
"id" : "a2e50eec43e9ad7d",
"input_type" : "Record",
"name" : "FieldOutputSetting",
"generic_type" : "b5340646484e31da",
"parameters" : {"output_field_selection" : "85c6b5787a8edd73"},
"attributes" : {},
"description" : "Setting of the field output. The field name, output times, output interpolation (future).",
"reducible_to_key" : "field",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldOutputSetting" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "field",
"description" : "The field name (from selection).",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "85c6b5787a8edd73",
"attributes" : {}},
{ "key" : "times",
"description" : "Output times specific to particular field.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "f8d103d0d2e14ac5",
"attributes" : {}}]
},{
"id" : "85c6b5787a8edd73",
"input_type" : "Selection",
"name" : "Flow_Darcy_MH:OutputFields",
"attributes" : {},
"description" : "Selection of output fields for the Flow_Darcy_MH model.\\n",
"values" : [
{ "name" : "pressure_p0",
"description" : "(($[m]$)) Input field: ",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "pressure_p1",
"description" : "(($[m]$)) Input field: ",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "piezo_head_p0",
"description" : "(($[m]$)) Input field: ",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "velocity_p0",
"description" : "(($[ms^{-1}]$)) Input field: ",
"attributes" : {
"field_value_shape" : { "shape": [ 3, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "subdomain",
"description" : "(($[-]$)) Input field: ",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Integer", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "region_id",
"description" : "(($[-]$)) Input field: ",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Integer", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "anisotropy",
"description" : "(($[-]$)) Input field: Anisotropy of the conductivity tensor.",
"attributes" : {
"field_value_shape" : { "shape": [ 3, 3 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "cross_section",
"description" : "(($[m^{3-d}]$)) Input field: Complement dimension parameter (cross section for 1D, thickness for 2D).",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "conductivity",
"description" : "(($[ms^{-1}]$)) Input field: Isotropic conductivity scalar.",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ 0, 1.79769e+308 ] }
}
},
{ "name" : "sigma",
"description" : "(($[-]$)) Input field: Transition coefficient between dimensions.",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "water_source_density",
"description" : "(($[s^{-1}]$)) Input field: Water source density.",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "init_pressure",
"description" : "(($[m]$)) Input field: Initial condition for pressure",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "storativity",
"description" : "(($[m^{-1}]$)) Input field: Storativity.",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "pressure_diff",
"description" : "(($[m]$)) Input field: ",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "velocity_diff",
"description" : "(($[ms^{-1}]$)) Input field: ",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "div_diff",
"description" : "(($[s^{-1}]$)) Input field: ",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
}]
},{
"id" : "f8bd3bc6b5a9b741",
"input_type" : "Array",
"name" : "array_of_Flow_Darcy_MH:OutputFields",
"generic_type" : "28bfad7f05e39c9a",
"parameters" : {"output_field_selection" : "85c6b5787a8edd73"},
"attributes" : {},
"range" : [0, 4294967295],
"subtype" : "85c6b5787a8edd73"
},
{
"id" : "71be09811bee6708",
"input_type" : "Record",
"name" : "Output_DarcyMHSpecific",
"attributes" : {},
"description" : "Specific Darcy flow MH output.",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "Output_DarcyMHSpecific" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "compute_errors",
"description" : "SPECIAL PURPOSE. Computing errors pro non-compatible coupling.",
"default" : { "type" : "value at declaration",
"value" : false },
"type" : "282546d52edd4",
"attributes" : {}},
{ "key" : "raw_flow_output",
"description" : "Output file with raw data form MH module.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "5c42d5b72cb92ff",
"attributes" : {}}]
},{
"id" : "bc0c26d77c6c7f11",
"input_type" : "Record",
"name" : "Balance",
"attributes" : {},
"description" : "Balance of a conservative quantity, boundary fluxes and sources.",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "Balance" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "times",
"description" : "",
"default" : { "type" : "value at declaration",
"value" : [] },
"type" : "f8d103d0d2e14ac5",
"attributes" : {}},
{ "key" : "add_output_times",
"description" : "Add all output times of the balanced equation to the balance output times set. Note that this is not the time set of the output stream.",
"default" : { "type" : "value at declaration",
"value" : true },
"type" : "282546d52edd4",
"attributes" : {}},
{ "key" : "format",
"description" : "Format of output file.",
"default" : { "type" : "value at declaration",
"value" : "txt" },
"type" : "c4f9fd44881c5c15",
"attributes" : {}},
{ "key" : "cumulative",
"description" : "Compute cumulative balance over time. If true, then balance is calculated at each computational time step, which can slow down the program.",
"default" : { "type" : "value at declaration",
"value" : false },
"type" : "282546d52edd4",
"attributes" : {}},
{ "key" : "file",
"description" : "File name for output of balance.",
"default" : { "type" : "value at read time",
"value" : "File name generated from the balanced quantity: <quantity_name>_balance.*" },
"type" : "5c42d5b72cb92ff",
"attributes" : {}}]
},{
"id" : "c4f9fd44881c5c15",
"input_type" : "Selection",
"name" : "Balance_output_format",
"attributes" : {},
"description" : "Format of output file for balance.",
"values" : [
{ "name" : "legacy",
"description" : "Legacy format used by previous program versions.",
"attributes" : {}
},
{ "name" : "txt",
"description" : "Excel format with tab delimiter.",
"attributes" : {}
},
{ "name" : "gnuplot",
"description" : "Format compatible with GnuPlot datafile with fixed column width.",
"attributes" : {}
}]
},{
"id" : "77e8d459d5c35386",
"input_type" : "Selection",
"name" : "MH_MortarMethod",
"attributes" : {},
"description" : "",
"values" : [
{ "name" : "None",
"description" : "Mortar space: P0 on elements of lower dimension.",
"attributes" : {}
},
{ "name" : "P0",
"description" : "Mortar space: P0 on elements of lower dimension.",
"attributes" : {}
},
{ "name" : "P1",
"description" : "Mortar space: P1 on intersections, using non-conforming pressures.",
"attributes" : {}
}]
},{
"id" : "8021a1683e985348",
"input_type" : "Record",
"name" : "Flow_Richards_LMH",
"attributes" : {},
"description" : "Lumped Mixed-Hybrid solver for unsteady saturated Darcy flow.",
"implements" : [ "2c79393a1a5c26ac" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "Flow_Richards_LMH" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "gravity",
"description" : "Vector of the gravity force. Dimensionless.",
"default" : { "type" : "value at declaration",
"value" : [ 0, 0, -1] },
"type" : "cba11500fe114d7b",
"attributes" : {}},
{ "key" : "input_fields",
"description" : "Input data for Darcy flow model.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "9e73d3e30e4cdb18",
"attributes" : {}},
{ "key" : "nonlinear_solver",
"description" : "Non-linear solver for MH problem.",
"default" : { "type" : "value at declaration",
"value" : {} },
"type" : "dc010d85f7b37df9",
"attributes" : {}},
{ "key" : "output_stream",
"description" : "Parameters of output stream.",
"default" : { "type" : "value at declaration",
"value" : {} },
"type" : "f648258f2b1360cd",
"attributes" : {}},
{ "key" : "output",
"description" : "Parameters of output from MH module.",
"default" : { "type" : "value at declaration",
"value" : { "fields": [ "pressure_p0", "velocity_p0" ] } },
"type" : "eb9b95497642ce25",
"attributes" : {}},
{ "key" : "output_specific",
"description" : "Parameters of output form MH module.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "71be09811bee6708",
"attributes" : {}},
{ "key" : "balance",
"description" : "Settings for computing mass balance.",
"default" : { "type" : "value at declaration",
"value" : {} },
"type" : "bc0c26d77c6c7f11",
"attributes" : {}},
{ "key" : "time",
"description" : "Time governor setting for the unsteady Darcy flow model.",
"default" : { "type" : "value at declaration",
"value" : {} },
"type" : "eb2dcf155e12a83b",
"attributes" : {}},
{ "key" : "n_schurs",
"description" : "Number of Schur complements to perform when solving MH system.",
"default" : { "type" : "value at declaration",
"value" : 2 },
"type" : "151ce92dd201d44a",
"attributes" : {}},
{ "key" : "mortar_method",
"description" : "Method for coupling Darcy flow between dimensions.",
"default" : { "type" : "value at declaration",
"value" : "None" },
"type" : "77e8d459d5c35386",
"attributes" : {}},
{ "key" : "soil_model",
"description" : "Setting for the soil model.",
"default" : { "type" : "value at declaration",
"value" : "van_genuchten" },
"type" : "8ca24b4d21bd216d",
"attributes" : {}}]
},{
"id" : "9e73d3e30e4cdb18",
"input_type" : "Array",
"name" : "array_of_RichardsLMH_Data",
"attributes" : {},
"range" : [0, 4294967295],
"subtype" : "7a4a3edfeb6e51a3"
},
{
"id" : "7a4a3edfeb6e51a3",
"input_type" : "Record",
"name" : "RichardsLMH_Data",
"attributes" : {},
"description" : "Record to set fields of the equation.\\nThe fields are set only on the domain specified by one of the keys: 'region', 'rid'\\nand after the time given by the key 'time'. The field setting can be overridden by\\n any RichardsLMH_Data record that comes later in the boundary data array.",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "RichardsLMH_Data" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "region",
"description" : "Labels of the regions where to set fields. ",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "eee303f526b992fd",
"attributes" : {}},
{ "key" : "rid",
"description" : "ID of the region where to set fields.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "151ce92d5201d44f",
"attributes" : {
"obsolete" : "Specification of the region by its ID is obsolete, will be removed in release 3.0.\nUse region label declared in the Mesh record or default label 'region_<ID>'."
}},
{ "key" : "time",
"description" : "Apply field setting in this record after this time.\\nThese times have to form an increasing sequence.",
"default" : { "type" : "value at declaration",
"value" : 0.0 },
"type" : "6b1c4ede475775aa",
"attributes" : {}},
{ "key" : "anisotropy",
"description" : "Anisotropy of the conductivity tensor. (($[-]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "2165beae2a9dffc8",
"attributes" : {
"field_value_shape" : { "shape": [ 3, 3 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : 0, "md" : 0, "kg" : 0, "s" : 0, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}},
{ "key" : "cross_section",
"description" : "Complement dimension parameter (cross section for 1D, thickness for 2D). (($[m^{3-d}]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "15b28e4bc4f2e83",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : 3, "md" : -1, "kg" : 0, "s" : 0, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}},
{ "key" : "conductivity",
"description" : "Isotropic conductivity scalar. (($[ms^{-1}]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "15b28e4bc4f2e83",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ 0, 1.79769e+308 ] },
"key_field_unit" : { "m" : 1, "md" : 0, "kg" : 0, "s" : -1, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}},
{ "key" : "sigma",
"description" : "Transition coefficient between dimensions. (($[-]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "15b28e4bc4f2e83",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : 0, "md" : 0, "kg" : 0, "s" : 0, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}},
{ "key" : "water_source_density",
"description" : "Water source density. (($[s^{-1}]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "15b28e4bc4f2e83",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : 0, "md" : 0, "kg" : 0, "s" : -1, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}},
{ "key" : "bc_type",
"description" : "Boundary condition type, possible values: (($[-]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "96725cc59b9badef",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Integer", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : 0, "md" : 0, "kg" : 0, "s" : 0, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}},
{ "key" : "bc_pressure",
"description" : "Prescribed pressure value on the boundary. Used for all values of 'bc_type' except for 'none' and 'seepage'. See documentation of 'bc_type' for exact meaning of 'bc_pressure' in individual boundary condition types. (($[m]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "15b28e4bc4f2e83",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : 1, "md" : 0, "kg" : 0, "s" : 0, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}},
{ "key" : "bc_flux",
"description" : "Incoming water boundary flux. Used for bc_types : 'total_flux', 'seepage', 'river'. (($[m^{4-d}s^{-1}]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "15b28e4bc4f2e83",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : 4, "md" : -1, "kg" : 0, "s" : -1, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}},
{ "key" : "bc_robin_sigma",
"description" : "Conductivity coefficient in the 'total_flux' or the 'river' boundary condition type. (($[m^{3-d}s^{-1}]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "15b28e4bc4f2e83",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : 3, "md" : -1, "kg" : 0, "s" : -1, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}},
{ "key" : "bc_switch_pressure",
"description" : "Critical switch pressure for 'seepage' and 'river' boundary conditions. (($[m]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "15b28e4bc4f2e83",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : 1, "md" : 0, "kg" : 0, "s" : 0, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}},
{ "key" : "init_pressure",
"description" : "Initial condition for pressure (($[m]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "15b28e4bc4f2e83",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : 1, "md" : 0, "kg" : 0, "s" : 0, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}},
{ "key" : "storativity",
"description" : "Storativity. (($[m^{-1}]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "15b28e4bc4f2e83",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : -1, "md" : 0, "kg" : 0, "s" : 0, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}},
{ "key" : "water_content_saturated",
"description" : "\\nSaturated water content (($ \\\\theta_s $)).\\nrelative volume of the water in a reference volume of a saturated porous media.\\n (($[-]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "15b28e4bc4f2e83",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : 0, "md" : 0, "kg" : 0, "s" : 0, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}},
{ "key" : "water_content_residual",
"description" : "\\nResidual water content (($ \\\\theta_r $)).\\nRelative volume of the water in a reference volume of an ideally dry porous media.\\n (($[-]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "15b28e4bc4f2e83",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : 0, "md" : 0, "kg" : 0, "s" : 0, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}},
{ "key" : "genuchten_p_head_scale",
"description" : "\\nThe van Genuchten pressure head scaling parameter (($ \\\\alpha $)).\\nThe parameter of the van Genuchten's model to scale the pressure head.\\nRelated to the inverse of the air entry pressure, i.e. the pressure where the relative water content starts to decrease below 1.\\n (($[m^{-1}]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "15b28e4bc4f2e83",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : -1, "md" : 0, "kg" : 0, "s" : 0, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}},
{ "key" : "genuchten_n_exponent",
"description" : "The van Genuchten exponent parameter (($ n $)). (($[-]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "15b28e4bc4f2e83",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : 0, "md" : 0, "kg" : 0, "s" : 0, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}},
{ "key" : "bc_piezo_head",
"description" : "Boundary piezometric head for BC types: dirichlet, robin, and river.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "15b28e4bc4f2e83",
"attributes" : {}},
{ "key" : "bc_switch_piezo_head",
"description" : "Boundary switch piezometric head for BC types: seepage, river.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "15b28e4bc4f2e83",
"attributes" : {}},
{ "key" : "init_piezo_head",
"description" : "Initial condition for the pressure given as the piezometric head.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "15b28e4bc4f2e83",
"attributes" : {}}]
},{
"id" : "8ca24b4d21bd216d",
"input_type" : "Record",
"name" : "SoilModel",
"attributes" : {},
"description" : "Setting for the soil model.",
"reducible_to_key" : "model_type",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "SoilModel" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "model_type",
"description" : "Selection of the globally applied soil model. In future we replace this key by a field for selection of the model.That will allow usage of different soil model in a single simulation.",
"default" : { "type" : "value at declaration",
"value" : "van_genuchten" },
"type" : "8c55ec25405cb959",
"attributes" : {}},
{ "key" : "cut_fraction",
"description" : "Fraction of the water content where we cut  and rescale the curve.",
"default" : { "type" : "value at declaration",
"value" : 0.999 },
"type" : "ab1c4ede475775a9",
"attributes" : {}}]
},{
"id" : "8c55ec25405cb959",
"input_type" : "Selection",
"name" : "Soil_Model_Type",
"attributes" : {},
"description" : "",
"values" : [
{ "name" : "van_genuchten",
"description" : "Van Genuchten soil model with cutting near zero.",
"attributes" : {}
},
{ "name" : "irmay",
"description" : "Irmay model for conductivity, Van Genuchten model for the water content. Suitable for bentonite.",
"attributes" : {}
}]
},{
"id" : "c20b6cad3d254b33",
"input_type" : "Abstract",
"name" : "AdvectionProcess",
"attributes" : {},
"description" : "Abstract advection process. In particular: transport of substances or heat transfer.",
"implementations" : [
"9d3112932bd268cb",
"cae038099549c6c9"]},{
"id" : "9d3112932bd268cb",
"input_type" : "Record",
"name" : "Coupling_OperatorSplitting",
"attributes" : {
"subfields_address" : "/problem/solute_equation/substances/*/name"
},
"description" : "Transport by convection and/or diffusion\\ncoupled with reaction and adsorption model (ODE per element)\\n via operator splitting.",
"implements" : [ "c20b6cad3d254b33" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "Coupling_OperatorSplitting" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "time",
"description" : "Time governor setting for the secondary equation.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "eb2dcf155e12a83b",
"attributes" : {}},
{ "key" : "balance",
"description" : "Settings for computing balance.",
"default" : { "type" : "value at declaration",
"value" : {} },
"type" : "bc0c26d77c6c7f11",
"attributes" : {}},
{ "key" : "output_stream",
"description" : "Parameters of output stream.",
"default" : { "type" : "value at declaration",
"value" : {} },
"type" : "f648258f2b1360cd",
"attributes" : {}},
{ "key" : "substances",
"description" : "Specification of transported substances.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "57a7a5e1a86f46b8",
"attributes" : {}},
{ "key" : "transport",
"description" : "Type of numerical method for solute transport.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "91385f46bee67ca8",
"attributes" : {}},
{ "key" : "reaction_term",
"description" : "Reaction model involved in transport.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "fbb7afea5f047780",
"attributes" : {}}]
},{
"id" : "57a7a5e1a86f46b8",
"input_type" : "Array",
"name" : "array_of_Substance",
"attributes" : {},
"range" : [1, 4294967295],
"subtype" : "bb8ed616e3e5a7f6"
},
{
"id" : "bb8ed616e3e5a7f6",
"input_type" : "Record",
"name" : "Substance",
"attributes" : {},
"description" : "Chemical substance.",
"reducible_to_key" : "name",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "Substance" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "name",
"description" : "Name of the substance.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "molar_mass",
"description" : "Molar mass of the substance [kg/mol].",
"default" : { "type" : "value at declaration",
"value" : 1 },
"type" : "6b1c4ede475775aa",
"attributes" : {}}]
},{
"id" : "91385f46bee67ca8",
"input_type" : "Abstract",
"name" : "Solute",
"attributes" : {},
"description" : "Transport of soluted  substances.",
"implementations" : [
"4661226d99c5b14",
"f1f0fe9f8517b374"]},{
"id" : "4661226d99c5b14",
"input_type" : "Record",
"name" : "Solute_Advection_FV",
"attributes" : {},
"description" : "Explicit in time finite volume method for advection only solute transport.",
"implements" : [ "91385f46bee67ca8" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "Solute_Advection_FV" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "input_fields",
"description" : "",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "3fa546d31f9742be",
"attributes" : {}},
{ "key" : "output",
"description" : "Setting of the fields output.",
"default" : { "type" : "value at declaration",
"value" : { "fields": [ "conc" ] } },
"type" : "e953b7895866e238",
"attributes" : {}}]
},{
"id" : "3fa546d31f9742be",
"input_type" : "Array",
"name" : "array_of_Solute_Advection_FV:Data",
"attributes" : {},
"range" : [0, 4294967295],
"subtype" : "c1208fa8e7de79f1"
},
{
"id" : "c1208fa8e7de79f1",
"input_type" : "Record",
"name" : "Solute_Advection_FV:Data",
"attributes" : {},
"description" : "Record to set fields of the equation.\\nThe fields are set only on the domain specified by one of the keys: 'region', 'rid'\\nand after the time given by the key 'time'. The field setting can be overridden by\\n any Solute_Advection_FV:Data record that comes later in the boundary data array.",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "Solute_Advection_FV:Data" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "region",
"description" : "Labels of the regions where to set fields. ",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "eee303f526b992fd",
"attributes" : {}},
{ "key" : "rid",
"description" : "ID of the region where to set fields.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "151ce92d5201d44f",
"attributes" : {
"obsolete" : "Specification of the region by its ID is obsolete, will be removed in release 3.0.\nUse region label declared in the Mesh record or default label 'region_<ID>'."
}},
{ "key" : "time",
"description" : "Apply field setting in this record after this time.\\nThese times have to form an increasing sequence.",
"default" : { "type" : "value at declaration",
"value" : 0.0 },
"type" : "6b1c4ede475775aa",
"attributes" : {}},
{ "key" : "porosity",
"description" : "Mobile porosity (($[-]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "15b28e4bc4f2e83",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : 0, "md" : 0, "kg" : 0, "s" : 0, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}},
{ "key" : "sources_density",
"description" : "Density of concentration sources. (($[m^{-3}kgs^{-1}]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "371fd639aa5a1b4c",
"attributes" : {
"field_value_shape" : { "subfields": true, "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : -3, "md" : 0, "kg" : 1, "s" : -1, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}},
{ "key" : "sources_sigma",
"description" : "Concentration flux. (($[s^{-1}]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "371fd639aa5a1b4c",
"attributes" : {
"field_value_shape" : { "subfields": true, "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : 0, "md" : 0, "kg" : 0, "s" : -1, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}},
{ "key" : "sources_conc",
"description" : "Concentration sources threshold. (($[m^{-3}kg]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "371fd639aa5a1b4c",
"attributes" : {
"field_value_shape" : { "subfields": true, "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : -3, "md" : 0, "kg" : 1, "s" : 0, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}},
{ "key" : "bc_conc",
"description" : "Boundary conditions for concentrations. (($[m^{-3}kg]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "371fd639aa5a1b4c",
"attributes" : {
"field_value_shape" : { "subfields": true, "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : -3, "md" : 0, "kg" : 1, "s" : 0, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}},
{ "key" : "init_conc",
"description" : "Initial concentrations. (($[m^{-3}kg]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "371fd639aa5a1b4c",
"attributes" : {
"field_value_shape" : { "subfields": true, "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : -3, "md" : 0, "kg" : 1, "s" : 0, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}}]
},{
"id" : "371fd639aa5a1b4c",
"input_type" : "Array",
"name" : "array_of_Field_R3_to_R",
"attributes" : {},
"range" : [1, 4294967295],
"subtype" : "15b28e4bc4f2e83"
},
{
"id" : "e953b7895866e238",
"input_type" : "Record",
"name" : "EquationOutput",
"generic_type" : "d26f5c9651fbe82",
"parameters" : {"output_field_selection" : "db22fda47c542c43"},
"attributes" : {},
"description" : "Output of the equation's fields.The output is done through the output stream of the associated balance law equation.The stream defines output format for the full space information in selected times and observe points for the full time information. The key 'fields' select the fields for the full spatial output.The set of output times may be specified  per field otherwise common time set 'times' is used. If even this is not providedthe time set of the output_stream is used. The initial time of the equation is automatically added to the time set of every selected field. The end time of the equation is automatically added to the common output time set.",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "EquationOutput" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "times",
"description" : "Output times used for the output fields without is own time series specification.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "f8d103d0d2e14ac5",
"attributes" : {}},
{ "key" : "add_input_times",
"description" : "Add all input time points of the equation, mentioned in the 'input_fields' list, also as the output points.",
"default" : { "type" : "value at declaration",
"value" : false },
"type" : "282546d52edd4",
"attributes" : {}},
{ "key" : "fields",
"description" : "Array of output fields and their individual output settings.",
"default" : { "type" : "value at declaration",
"value" : [] },
"type" : "a108c116f87f3bb5",
"attributes" : {}},
{ "key" : "observe_fields",
"description" : "Array of the fields evaluated in the observe points of the associated output stream.",
"default" : { "type" : "value at declaration",
"value" : [] },
"type" : "4e91a832772a83fe",
"attributes" : {}}]
},{
"id" : "a108c116f87f3bb5",
"input_type" : "Array",
"name" : "array_of_FieldOutputSetting",
"generic_type" : "dc44bb2d9b30af35",
"parameters" : {"output_field_selection" : "db22fda47c542c43"},
"attributes" : {},
"range" : [0, 4294967295],
"subtype" : "aa001c4dab9ac65a"
},
{
"id" : "aa001c4dab9ac65a",
"input_type" : "Record",
"name" : "FieldOutputSetting",
"generic_type" : "b5340646484e31da",
"parameters" : {"output_field_selection" : "db22fda47c542c43"},
"attributes" : {},
"description" : "Setting of the field output. The field name, output times, output interpolation (future).",
"reducible_to_key" : "field",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldOutputSetting" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "field",
"description" : "The field name (from selection).",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "db22fda47c542c43",
"attributes" : {}},
{ "key" : "times",
"description" : "Output times specific to particular field.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "f8d103d0d2e14ac5",
"attributes" : {}}]
},{
"id" : "db22fda47c542c43",
"input_type" : "Selection",
"name" : "Solute_Advection_FV:OutputFields",
"attributes" : {},
"description" : "Selection of output fields for the Solute_Advection_FV model.\\n",
"values" : [
{ "name" : "porosity",
"description" : "(($[-]$)) Input field: Mobile porosity",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "water_content",
"description" : "(($[-]$)) Input field: INTERNAL - water content passed from unsaturated Darcy",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "sources_density",
"description" : "(($[m^{-3}kgs^{-1}]$)) Input field: Density of concentration sources.",
"attributes" : {
"field_value_shape" : { "subfields": true, "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "sources_sigma",
"description" : "(($[s^{-1}]$)) Input field: Concentration flux.",
"attributes" : {
"field_value_shape" : { "subfields": true, "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "sources_conc",
"description" : "(($[m^{-3}kg]$)) Input field: Concentration sources threshold.",
"attributes" : {
"field_value_shape" : { "subfields": true, "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "init_conc",
"description" : "(($[m^{-3}kg]$)) Input field: Initial concentrations.",
"attributes" : {
"field_value_shape" : { "subfields": true, "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "conc",
"description" : "(($[m^{-3}kg]$)) ",
"attributes" : {
"field_value_shape" : { "subfields": true, "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "region_id",
"description" : "(($[-]$)) Input field: ",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Integer", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "subdomain",
"description" : "(($[-]$)) Input field: ",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Integer", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
}]
},{
"id" : "4e91a832772a83fe",
"input_type" : "Array",
"name" : "array_of_Solute_Advection_FV:OutputFields",
"generic_type" : "28bfad7f05e39c9a",
"parameters" : {"output_field_selection" : "db22fda47c542c43"},
"attributes" : {},
"range" : [0, 4294967295],
"subtype" : "db22fda47c542c43"
},
{
"id" : "f1f0fe9f8517b374",
"input_type" : "Record",
"name" : "Solute_AdvectionDiffusion_DG",
"attributes" : {},
"description" : "DG solver for solute transport.",
"implements" : [ "91385f46bee67ca8" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "Solute_AdvectionDiffusion_DG" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "solvent_density",
"description" : "Density of the solvent [ (($kg.m^(-3)$)) ].",
"default" : { "type" : "value at declaration",
"value" : 1.0 },
"type" : "6b1c4ede475775aa",
"attributes" : {}},
{ "key" : "solver",
"description" : "Linear solver for MH problem.",
"default" : { "type" : "value at declaration",
"value" : {} },
"type" : "d86836fae202309c",
"attributes" : {}},
{ "key" : "input_fields",
"description" : "Input fields of the equation.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "4b2883ef039dad1c",
"attributes" : {}},
{ "key" : "dg_variant",
"description" : "Variant of interior penalty discontinuous Galerkin method.",
"default" : { "type" : "value at declaration",
"value" : "non-symmetric" },
"type" : "63d5c736bdd40bf1",
"attributes" : {}},
{ "key" : "dg_order",
"description" : "Polynomial order for finite element in DG method (order 0 is suitable if there is no diffusion/dispersion).",
"default" : { "type" : "value at declaration",
"value" : 1 },
"type" : "151ce92dd201d44b",
"attributes" : {}},
{ "key" : "output",
"description" : "Setting of the field output.",
"default" : { "type" : "value at declaration",
"value" : { "fields": [ "conc"] } },
"type" : "b27542ecbeb2ba8a",
"attributes" : {}}]
},{
"id" : "4b2883ef039dad1c",
"input_type" : "Array",
"name" : "array_of_Solute_AdvectionDiffusion_DG:Data",
"attributes" : {},
"range" : [0, 4294967295],
"subtype" : "3299c2e8b0f54d67"
},
{
"id" : "3299c2e8b0f54d67",
"input_type" : "Record",
"name" : "Solute_AdvectionDiffusion_DG:Data",
"attributes" : {},
"description" : "Record to set fields of the equation.\\nThe fields are set only on the domain specified by one of the keys: 'region', 'rid'\\nand after the time given by the key 'time'. The field setting can be overridden by\\n any Solute_AdvectionDiffusion_DG:Data record that comes later in the boundary data array.",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "Solute_AdvectionDiffusion_DG:Data" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "region",
"description" : "Labels of the regions where to set fields. ",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "eee303f526b992fd",
"attributes" : {}},
{ "key" : "rid",
"description" : "ID of the region where to set fields.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "151ce92d5201d44f",
"attributes" : {
"obsolete" : "Specification of the region by its ID is obsolete, will be removed in release 3.0.\nUse region label declared in the Mesh record or default label 'region_<ID>'."
}},
{ "key" : "time",
"description" : "Apply field setting in this record after this time.\\nThese times have to form an increasing sequence.",
"default" : { "type" : "value at declaration",
"value" : 0.0 },
"type" : "6b1c4ede475775aa",
"attributes" : {}},
{ "key" : "porosity",
"description" : "Mobile porosity (($[-]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "15b28e4bc4f2e83",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : 0, "md" : 0, "kg" : 0, "s" : 0, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}},
{ "key" : "sources_density",
"description" : "Density of concentration sources. (($[m^{-3}kgs^{-1}]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "371fd639aa5a1b4c",
"attributes" : {
"field_value_shape" : { "subfields": true, "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : -3, "md" : 0, "kg" : 1, "s" : -1, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}},
{ "key" : "sources_sigma",
"description" : "Concentration flux. (($[s^{-1}]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "371fd639aa5a1b4c",
"attributes" : {
"field_value_shape" : { "subfields": true, "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : 0, "md" : 0, "kg" : 0, "s" : -1, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}},
{ "key" : "sources_conc",
"description" : "Concentration sources threshold. (($[m^{-3}kg]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "371fd639aa5a1b4c",
"attributes" : {
"field_value_shape" : { "subfields": true, "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : -3, "md" : 0, "kg" : 1, "s" : 0, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}},
{ "key" : "bc_type",
"description" : "Type of boundary condition. (($[-]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "265d478c43e4cf46",
"attributes" : {
"field_value_shape" : { "subfields": true, "shape": [ 1, 1 ], "type": "Integer", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : 0, "md" : 0, "kg" : 0, "s" : 0, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}},
{ "key" : "bc_conc",
"description" : "Dirichlet boundary condition (for each substance). (($[m^{-3}kg]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "371fd639aa5a1b4c",
"attributes" : {
"field_value_shape" : { "subfields": true, "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : -3, "md" : 0, "kg" : 1, "s" : 0, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}},
{ "key" : "bc_flux",
"description" : "Flux in Neumann boundary condition. (($[m^{1-d}kgs^{-1}]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "371fd639aa5a1b4c",
"attributes" : {
"field_value_shape" : { "subfields": true, "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : 1, "md" : -1, "kg" : 1, "s" : -1, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}},
{ "key" : "bc_robin_sigma",
"description" : "Conductivity coefficient in Robin boundary condition. (($[m^{4-d}s^{-1}]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "371fd639aa5a1b4c",
"attributes" : {
"field_value_shape" : { "subfields": true, "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : 4, "md" : -1, "kg" : 0, "s" : -1, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}},
{ "key" : "init_conc",
"description" : "Initial concentrations. (($[m^{-3}kg]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "371fd639aa5a1b4c",
"attributes" : {
"field_value_shape" : { "subfields": true, "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : -3, "md" : 0, "kg" : 1, "s" : 0, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}},
{ "key" : "disp_l",
"description" : "Longitudal dispersivity in the liquid (for each substance). (($[m]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "371fd639aa5a1b4c",
"attributes" : {
"field_value_shape" : { "subfields": true, "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : 1, "md" : 0, "kg" : 0, "s" : 0, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}},
{ "key" : "disp_t",
"description" : "Transversal dispersivity in the liquid (for each substance). (($[m]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "371fd639aa5a1b4c",
"attributes" : {
"field_value_shape" : { "subfields": true, "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : 1, "md" : 0, "kg" : 0, "s" : 0, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}},
{ "key" : "diff_m",
"description" : "Molecular diffusivity in the liquid (for each substance). (($[m^{2}s^{-1}]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "371cb5fda93c3985",
"attributes" : {
"field_value_shape" : { "subfields": true, "shape": [ 3, 3 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : 2, "md" : 0, "kg" : 0, "s" : -1, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}},
{ "key" : "rock_density",
"description" : "Rock matrix density. (($[m^{-3}kg]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "15b28e4bc4f2e83",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : -3, "md" : 0, "kg" : 1, "s" : 0, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}},
{ "key" : "sorption_coefficient",
"description" : "Coefficient of linear sorption. (($[m^{3}kg^{-1}]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "371fd639aa5a1b4c",
"attributes" : {
"field_value_shape" : { "subfields": true, "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : 3, "md" : 0, "kg" : -1, "s" : 0, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}},
{ "key" : "fracture_sigma",
"description" : "Coefficient of diffusive transfer through fractures (for each substance). (($[-]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "371fd639aa5a1b4c",
"attributes" : {
"field_value_shape" : { "subfields": true, "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : 0, "md" : 0, "kg" : 0, "s" : 0, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}},
{ "key" : "dg_penalty",
"description" : "Penalty parameter influencing the discontinuity of the solution (for each substance). Its default value 1 is sufficient in most cases. Higher value diminishes the inter-element jumps. (($[-]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "371fd639aa5a1b4c",
"attributes" : {
"field_value_shape" : { "subfields": true, "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : 0, "md" : 0, "kg" : 0, "s" : 0, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}}]
},{
"id" : "265d478c43e4cf46",
"input_type" : "Array",
"name" : "array_of_Field_R3_to_R",
"attributes" : {},
"range" : [1, 4294967295],
"subtype" : "f01c9a57d2b05a7d"
},
{
"id" : "f01c9a57d2b05a7d",
"input_type" : "Abstract",
"name" : "Field_R3_to_R",
"generic_type" : "68a8bfbc6ae41b96",
"parameters" : {"element_input_type" : "56ce622e9b548413"},
"attributes" : {
"field_value_shape" : [1, 1]
},
"description" : "Abstract for all time-space functions.",
"default_descendant" : "7dde2f422439614b",
"implementations" : [
"a41a63ef82d50ffa",
"7dde2f422439614b",
"d7b32ac8b94b5e16",
"f736389bcffe985d",
"1dc273e002c60620",
"800de724541f7a6d"]},{
"id" : "7dde2f422439614b",
"input_type" : "Record",
"name" : "FieldConstant",
"generic_type" : "1763d8bad2619ea5",
"parameters" : {"element_input_type" : "56ce622e9b548413"},
"attributes" : {},
"description" : "R3_to_R Field constant in space.",
"implements" : [ "68a8bfbc6ae41b96" ],
"reducible_to_key" : "value",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldConstant" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "unit",
"description" : "Unit of the field values provided in the main input file, in the external file, or by a function (FieldPython).",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "d671df90b1b2e854",
"attributes" : {}},
{ "key" : "value",
"description" : "Value of the constant field. For vector values, you can use scalar value to enter constant vector. For square (($N\\\\times N$))-matrix values, you can use:  - vector of size (($N$)) to enter diagonal matrix\\n\\n - vector of size (($\\\\frac12N(N+1)$)) to enter symmetric matrix (upper triangle, row by row)\\n - scalar to enter multiple of the unit matrix.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "56ce622e9b548413",
"attributes" : {}}]
},{
"id" : "56ce622e9b548413",
"input_type" : "Selection",
"name" : "Solute_AdvectionDiffusion_BC_Type",
"attributes" : {},
"description" : "Types of boundary conditions for advection-diffusion solute transport model.",
"values" : [
{ "name" : "inflow",
"description" : "Default transport boundary condition.\\nOn water inflow (($(q_w \\\\le 0)$)), total flux is given by the reference concentration 'bc_conc'. On water outflow we prescribe zero diffusive flux, i.e. the mass flows out only due to advection.",
"attributes" : {}
},
{ "name" : "dirichlet",
"description" : "Dirichlet boundary condition (($ c = c_D $)).\\nThe prescribed concentration (($c_D$)) is specified by the field 'bc_conc'.",
"attributes" : {}
},
{ "name" : "total_flux",
"description" : "Total mass flux boundary condition.\\nThe prescribed total incoming flux can have the general form (($\\\\delta(f_N+\\\\sigma_R(c_R-c) )$)), where the absolute flux (($f_N$)) is specified by the field 'bc_flux', the transition parameter (($\\\\sigma_R$)) by 'bc_robin_sigma', and the reference concentration (($c_R$)) by 'bc_conc'.",
"attributes" : {}
},
{ "name" : "diffusive_flux",
"description" : "Diffusive flux boundary condition.\\nThe prescribed incoming mass flux due to diffusion can have the general form (($\\\\delta(f_N+\\\\sigma_R(c_R-c) )$)), where the absolute flux (($f_N$)) is specified by the field 'bc_flux', the transition parameter (($\\\\sigma_R$)) by 'bc_robin_sigma', and the reference concentration (($c_R$)) by 'bc_conc'.",
"attributes" : {}
}]
},{
"id" : "800de724541f7a6d",
"input_type" : "Record",
"name" : "FieldTimeFunction",
"generic_type" : "9a64a1247454c937",
"parameters" : {"element_input_type" : "56ce622e9b548413"},
"attributes" : {},
"description" : "R3_to_R Field time-dependent function in space.",
"implements" : [ "68a8bfbc6ae41b96" ],
"reducible_to_key" : "time_function",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldTimeFunction" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "unit",
"description" : "Unit of the field values provided in the main input file, in the external file, or by a function (FieldPython).",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "d671df90b1b2e854",
"attributes" : {}},
{ "key" : "time_function",
"description" : "Values of time series initialization of Field.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "e760be752575fb6",
"attributes" : {}}]
},{
"id" : "e760be752575fb6",
"input_type" : "Record",
"name" : "TableFunction",
"generic_type" : "705839e94dc90e8b",
"parameters" : {"element_input_type" : "56ce622e9b548413"},
"attributes" : {},
"description" : "Allow set variable series initialization of Fields.",
"reducible_to_key" : "values",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "TableFunction" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "values",
"description" : "Initizaliation values of Field.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "8f2f5f38e81c22b0",
"attributes" : {}}]
},{
"id" : "8f2f5f38e81c22b0",
"input_type" : "Array",
"name" : "array_of_IndependentValue",
"generic_type" : "ae9206c686c07f12",
"parameters" : {"element_input_type" : "56ce622e9b548413"},
"attributes" : {},
"range" : [2, 4294967295],
"subtype" : "1b3c6cd8493cfe49"
},
{
"id" : "1b3c6cd8493cfe49",
"input_type" : "Tuple",
"name" : "IndependentValue",
"generic_type" : "3bef944a2f88d9a7",
"parameters" : {"element_input_type" : "56ce622e9b548413"},
"attributes" : {},
"description" : "Value of Field for independent variable.",
"keys" : [
{ "key" : "t",
"description" : "Independent variable of stamp.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "6b1c4ede475775aa",
"attributes" : {}},
{ "key" : "value",
"description" : "Value of the field in given stamp.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "56ce622e9b548413",
"attributes" : {}}]
},{
"id" : "371cb5fda93c3985",
"input_type" : "Array",
"name" : "array_of_Field_R3_to_R[3,3]",
"attributes" : {},
"range" : [1, 4294967295],
"subtype" : "2165beae2a9dffc8"
},
{
"id" : "63d5c736bdd40bf1",
"input_type" : "Selection",
"name" : "DG_variant",
"attributes" : {},
"description" : "Type of penalty term.",
"values" : [
{ "name" : "non-symmetric",
"description" : "non-symmetric weighted interior penalty DG method",
"attributes" : {}
},
{ "name" : "incomplete",
"description" : "incomplete weighted interior penalty DG method",
"attributes" : {}
},
{ "name" : "symmetric",
"description" : "symmetric weighted interior penalty DG method",
"attributes" : {}
}]
},{
"id" : "151ce92dd201d44b",
"input_type" : "Integer",
"name" : "Integer",
"attributes" : {},
"range" : [0, 3]
},{
"id" : "b27542ecbeb2ba8a",
"input_type" : "Record",
"name" : "EquationOutput",
"generic_type" : "d26f5c9651fbe82",
"parameters" : {"output_field_selection" : "f968e210a17c1006"},
"attributes" : {},
"description" : "Output of the equation's fields.The output is done through the output stream of the associated balance law equation.The stream defines output format for the full space information in selected times and observe points for the full time information. The key 'fields' select the fields for the full spatial output.The set of output times may be specified  per field otherwise common time set 'times' is used. If even this is not providedthe time set of the output_stream is used. The initial time of the equation is automatically added to the time set of every selected field. The end time of the equation is automatically added to the common output time set.",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "EquationOutput" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "times",
"description" : "Output times used for the output fields without is own time series specification.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "f8d103d0d2e14ac5",
"attributes" : {}},
{ "key" : "add_input_times",
"description" : "Add all input time points of the equation, mentioned in the 'input_fields' list, also as the output points.",
"default" : { "type" : "value at declaration",
"value" : false },
"type" : "282546d52edd4",
"attributes" : {}},
{ "key" : "fields",
"description" : "Array of output fields and their individual output settings.",
"default" : { "type" : "value at declaration",
"value" : [] },
"type" : "f84b47c7d3eb6f24",
"attributes" : {}},
{ "key" : "observe_fields",
"description" : "Array of the fields evaluated in the observe points of the associated output stream.",
"default" : { "type" : "value at declaration",
"value" : [] },
"type" : "3d6372fefe254090",
"attributes" : {}}]
},{
"id" : "f84b47c7d3eb6f24",
"input_type" : "Array",
"name" : "array_of_FieldOutputSetting",
"generic_type" : "dc44bb2d9b30af35",
"parameters" : {"output_field_selection" : "f968e210a17c1006"},
"attributes" : {},
"range" : [0, 4294967295],
"subtype" : "d1439b1c8006f1c9"
},
{
"id" : "d1439b1c8006f1c9",
"input_type" : "Record",
"name" : "FieldOutputSetting",
"generic_type" : "b5340646484e31da",
"parameters" : {"output_field_selection" : "f968e210a17c1006"},
"attributes" : {},
"description" : "Setting of the field output. The field name, output times, output interpolation (future).",
"reducible_to_key" : "field",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldOutputSetting" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "field",
"description" : "The field name (from selection).",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "f968e210a17c1006",
"attributes" : {}},
{ "key" : "times",
"description" : "Output times specific to particular field.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "f8d103d0d2e14ac5",
"attributes" : {}}]
},{
"id" : "f968e210a17c1006",
"input_type" : "Selection",
"name" : "Solute_AdvectionDiffusion_DG:OutputFields",
"attributes" : {},
"description" : "Selection of output fields for the Solute_AdvectionDiffusion_DG model.\\n",
"values" : [
{ "name" : "porosity",
"description" : "(($[-]$)) Input field: Mobile porosity",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "water_content",
"description" : "(($[-]$)) Input field: INTERNAL - water content passed from unsaturated Darcy",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "sources_density",
"description" : "(($[m^{-3}kgs^{-1}]$)) Input field: Density of concentration sources.",
"attributes" : {
"field_value_shape" : { "subfields": true, "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "sources_sigma",
"description" : "(($[s^{-1}]$)) Input field: Concentration flux.",
"attributes" : {
"field_value_shape" : { "subfields": true, "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "sources_conc",
"description" : "(($[m^{-3}kg]$)) Input field: Concentration sources threshold.",
"attributes" : {
"field_value_shape" : { "subfields": true, "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "init_conc",
"description" : "(($[m^{-3}kg]$)) Input field: Initial concentrations.",
"attributes" : {
"field_value_shape" : { "subfields": true, "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "disp_l",
"description" : "(($[m]$)) Input field: Longitudal dispersivity in the liquid (for each substance).",
"attributes" : {
"field_value_shape" : { "subfields": true, "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "disp_t",
"description" : "(($[m]$)) Input field: Transversal dispersivity in the liquid (for each substance).",
"attributes" : {
"field_value_shape" : { "subfields": true, "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "diff_m",
"description" : "(($[m^{2}s^{-1}]$)) Input field: Molecular diffusivity in the liquid (for each substance).",
"attributes" : {
"field_value_shape" : { "subfields": true, "shape": [ 3, 3 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "rock_density",
"description" : "(($[m^{-3}kg]$)) Input field: Rock matrix density.",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "sorption_coefficient",
"description" : "(($[m^{3}kg^{-1}]$)) Input field: Coefficient of linear sorption.",
"attributes" : {
"field_value_shape" : { "subfields": true, "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "conc",
"description" : "(($[m^{-3}kg]$)) ",
"attributes" : {
"field_value_shape" : { "subfields": true, "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "fracture_sigma",
"description" : "(($[-]$)) Input field: Coefficient of diffusive transfer through fractures (for each substance).",
"attributes" : {
"field_value_shape" : { "subfields": true, "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "dg_penalty",
"description" : "(($[-]$)) Input field: Penalty parameter influencing the discontinuity of the solution (for each substance). Its default value 1 is sufficient in most cases. Higher value diminishes the inter-element jumps.",
"attributes" : {
"field_value_shape" : { "subfields": true, "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "region_id",
"description" : "(($[-]$)) Input field: ",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Integer", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "subdomain",
"description" : "(($[-]$)) Input field: ",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Integer", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
}]
},{
"id" : "3d6372fefe254090",
"input_type" : "Array",
"name" : "array_of_Solute_AdvectionDiffusion_DG:OutputFields",
"generic_type" : "28bfad7f05e39c9a",
"parameters" : {"output_field_selection" : "f968e210a17c1006"},
"attributes" : {},
"range" : [0, 4294967295],
"subtype" : "f968e210a17c1006"
},
{
"id" : "fbb7afea5f047780",
"input_type" : "Abstract",
"name" : "ReactionTerm",
"attributes" : {},
"description" : "Abstract equation for a reaction term (dual porosity, sorption, reactions). Can be part of coupling with a transport equation via. operator splitting.",
"implementations" : [
"63b41d5b67ed5950",
"68f927d49b5fbba2",
"765cb1d2858b56fd",
"e006951d4cd4730a"]},{
"id" : "63b41d5b67ed5950",
"input_type" : "Record",
"name" : "FirstOrderReaction",
"attributes" : {},
"description" : "A model of first order chemical reactions (decompositions of a reactant into products).",
"implements" : [ "fbb7afea5f047780", "b1ca4e99aa76476e", "8e5129fda3dad86e", "454cd110deeb0e1e" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FirstOrderReaction" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "reactions",
"description" : "An array of first order chemical reactions.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "d58a5e2406c40720",
"attributes" : {}},
{ "key" : "ode_solver",
"description" : "Numerical solver for the system of first order ordinary differential equations coming from the model.",
"default" : { "type" : "value at declaration",
"value" : {} },
"type" : "34219e1ad21f74b7",
"attributes" : {}}]
},{
"id" : "d58a5e2406c40720",
"input_type" : "Array",
"name" : "array_of_Reaction",
"attributes" : {},
"range" : [0, 4294967295],
"subtype" : "6bf77257be7e7f51"
},
{
"id" : "6bf77257be7e7f51",
"input_type" : "Record",
"name" : "Reaction",
"attributes" : {},
"description" : "Describes a single first order chemical reaction.",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "Reaction" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "reactants",
"description" : "An array of reactants. Do not use array, reactions with only one reactant (decays) are implemented at the moment!",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "de6fc6e6e4ae1572",
"attributes" : {}},
{ "key" : "reaction_rate",
"description" : "The reaction rate coefficient of the first order reaction.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "6b1c4ede475775aa",
"attributes" : {}},
{ "key" : "products",
"description" : "An array of products.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "7c6b91701222b97b",
"attributes" : {}}]
},{
"id" : "de6fc6e6e4ae1572",
"input_type" : "Array",
"name" : "array_of_FirstOrderReactionReactant",
"attributes" : {},
"range" : [1, 4294967295],
"subtype" : "b6874fe828cdc89a"
},
{
"id" : "b6874fe828cdc89a",
"input_type" : "Record",
"name" : "FirstOrderReactionReactant",
"attributes" : {},
"description" : "A record describing a reactant of a reaction.",
"reducible_to_key" : "name",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FirstOrderReactionReactant" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "name",
"description" : "The name of the reactant.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f",
"attributes" : {}}]
},{
"id" : "7c6b91701222b97b",
"input_type" : "Array",
"name" : "array_of_FirstOrderReactionProduct",
"attributes" : {},
"range" : [1, 4294967295],
"subtype" : "d8ee3f89fd5f6db"
},
{
"id" : "d8ee3f89fd5f6db",
"input_type" : "Record",
"name" : "FirstOrderReactionProduct",
"attributes" : {},
"description" : "A record describing a product of a reaction.",
"reducible_to_key" : "name",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FirstOrderReactionProduct" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "name",
"description" : "The name of the product.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "branching_ratio",
"description" : "The branching ratio of the product when there are more products.\\nThe value must be positive. Further, the branching ratios of all products are normalized in order to sum to one.\\nThe default value 1.0, should only be used in the case of single product.",
"default" : { "type" : "value at declaration",
"value" : 1.0 },
"type" : "6b1c4ede475775aa",
"attributes" : {}}]
},{
"id" : "34219e1ad21f74b7",
"input_type" : "Record",
"name" : "PadeApproximant",
"attributes" : {},
"description" : "Record with an information about pade approximant parameters.Note that stable method is guaranteed only if d-n=1 or d-n=2, where d=degree of denominator and n=degree of nominator. In those cases the Pade approximant corresponds to an implicit Runge-Kutta method which is both A- and L-stable. The default values n=2, d=3 yield relatively good precision while keeping the order moderately low.",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "PadeApproximant" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "pade_nominator_degree",
"description" : "Polynomial degree of the nominator of Pade approximant.",
"default" : { "type" : "value at declaration",
"value" : 1 },
"type" : "151ce92d5201d40e",
"attributes" : {}},
{ "key" : "pade_denominator_degree",
"description" : "Polynomial degree of the denominator of Pade approximant",
"default" : { "type" : "value at declaration",
"value" : 3 },
"type" : "151ce92d5201d40e",
"attributes" : {}}]
},{
"id" : "151ce92d5201d40e",
"input_type" : "Integer",
"name" : "Integer",
"attributes" : {},
"range" : [1, 2147483647]
},{
"id" : "68f927d49b5fbba2",
"input_type" : "Record",
"name" : "RadioactiveDecay",
"attributes" : {},
"description" : "A model of a radioactive decay and possibly of a decay chain.",
"implements" : [ "fbb7afea5f047780", "b1ca4e99aa76476e", "8e5129fda3dad86e", "454cd110deeb0e1e" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "RadioactiveDecay" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "decays",
"description" : "An array of radioactive decays.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "be36e19ca6ac9b1f",
"attributes" : {}},
{ "key" : "ode_solver",
"description" : "Numerical solver for the system of first order ordinary differential equations coming from the model.",
"default" : { "type" : "value at declaration",
"value" : {} },
"type" : "34219e1ad21f74b7",
"attributes" : {}}]
},{
"id" : "be36e19ca6ac9b1f",
"input_type" : "Array",
"name" : "array_of_Decay",
"attributes" : {},
"range" : [1, 4294967295],
"subtype" : "3cf35a4e737f77ef"
},
{
"id" : "3cf35a4e737f77ef",
"input_type" : "Record",
"name" : "Decay",
"attributes" : {},
"description" : "A model of a radioactive decay.",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "Decay" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "radionuclide",
"description" : "The name of the parent radionuclide.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "half_life",
"description" : "The half life of the parent radionuclide in seconds.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "6b1c4ede475775aa",
"attributes" : {}},
{ "key" : "products",
"description" : "An array of the decay products (daughters).",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "5d66558290abdd3e",
"attributes" : {}}]
},{
"id" : "5d66558290abdd3e",
"input_type" : "Array",
"name" : "array_of_RadioactiveDecayProduct",
"attributes" : {},
"range" : [1, 4294967295],
"subtype" : "1758ff64a5e09a45"
},
{
"id" : "1758ff64a5e09a45",
"input_type" : "Record",
"name" : "RadioactiveDecayProduct",
"attributes" : {},
"description" : "A record describing a product of a radioactive decay.",
"reducible_to_key" : "name",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "RadioactiveDecayProduct" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "name",
"description" : "The name of the product.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "energy",
"description" : "Not used at the moment! The released energy in MeV from the decay of the radionuclide into the product.",
"default" : { "type" : "value at declaration",
"value" : 0.0 },
"type" : "6b1c4ede475775aa",
"attributes" : {}},
{ "key" : "branching_ratio",
"description" : "The branching ratio of the product when there is more than one.Considering only one product, the default ratio 1.0 is used.Its value must be positive. Further, the branching ratios of all products are normalizedby their sum, so the sum then gives 1.0 (this also resolves possible rounding errors).",
"default" : { "type" : "value at declaration",
"value" : 1.0 },
"type" : "6b1c4ede475775aa",
"attributes" : {}}]
},{
"id" : "765cb1d2858b56fd",
"input_type" : "Record",
"name" : "Sorption",
"attributes" : {},
"description" : "Sorption model in the reaction term of transport.",
"implements" : [ "fbb7afea5f047780" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "Sorption" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "substances",
"description" : "Names of the substances that take part in the sorption model.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "eee303f526b992fd",
"attributes" : {}},
{ "key" : "solvent_density",
"description" : "Density of the solvent.",
"default" : { "type" : "value at declaration",
"value" : 1.0 },
"type" : "6b1c4ede475775aa",
"attributes" : {}},
{ "key" : "substeps",
"description" : "Number of equidistant substeps, molar mass and isotherm intersections",
"default" : { "type" : "value at declaration",
"value" : 1000 },
"type" : "151ce92d5201d40e",
"attributes" : {}},
{ "key" : "solubility",
"description" : "Specifies solubility limits of all the sorbing species.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "ae4d15413e119e57",
"attributes" : {}},
{ "key" : "table_limits",
"description" : "Specifies highest aqueous concentration in interpolation table.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "ae4d15413e119e57",
"attributes" : {}},
{ "key" : "input_fields",
"description" : "Containes region specific data necessary to construct isotherms.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "8e89e1984712724a",
"attributes" : {}},
{ "key" : "reaction_liquid",
"description" : "Reaction model following the sorption in the liquid.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "454cd110deeb0e1e",
"attributes" : {}},
{ "key" : "reaction_solid",
"description" : "Reaction model following the sorption in the solid.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "454cd110deeb0e1e",
"attributes" : {}},
{ "key" : "output",
"description" : "Setting of the fields output.",
"default" : { "type" : "value at declaration",
"value" : { "fields": [ "conc_solid" ] } },
"type" : "fb2ae7e76ecbb8f5",
"attributes" : {}}]
},{
"id" : "ae4d15413e119e57",
"input_type" : "Array",
"name" : "array_of_Double",
"attributes" : {},
"range" : [0, 4294967295],
"subtype" : "6b1c4ede475775aa"
},
{
"id" : "8e89e1984712724a",
"input_type" : "Array",
"name" : "array_of_Sorption:Data",
"attributes" : {},
"range" : [0, 4294967295],
"subtype" : "bb0657d25299c93e"
},
{
"id" : "bb0657d25299c93e",
"input_type" : "Record",
"name" : "Sorption:Data",
"attributes" : {},
"description" : "Record to set fields of the equation.\\nThe fields are set only on the domain specified by one of the keys: 'region', 'rid'\\nand after the time given by the key 'time'. The field setting can be overridden by\\n any Sorption:Data record that comes later in the boundary data array.",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "Sorption:Data" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "region",
"description" : "Labels of the regions where to set fields. ",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "eee303f526b992fd",
"attributes" : {}},
{ "key" : "rid",
"description" : "ID of the region where to set fields.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "151ce92d5201d44f",
"attributes" : {
"obsolete" : "Specification of the region by its ID is obsolete, will be removed in release 3.0.\nUse region label declared in the Mesh record or default label 'region_<ID>'."
}},
{ "key" : "time",
"description" : "Apply field setting in this record after this time.\\nThese times have to form an increasing sequence.",
"default" : { "type" : "value at declaration",
"value" : 0.0 },
"type" : "6b1c4ede475775aa",
"attributes" : {}},
{ "key" : "rock_density",
"description" : "Rock matrix density. (($[m^{-3}kg]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "15b28e4bc4f2e83",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : -3, "md" : 0, "kg" : 1, "s" : 0, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}},
{ "key" : "sorption_type",
"description" : "Considered sorption is described by selected isotherm. If porosity on an element is equal or even higher than 1.0 (meaning no sorbing surface), then type 'none' will be selected automatically. (($[-]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "a32eb4733571f68b",
"attributes" : {
"field_value_shape" : { "subfields": true, "shape": [ 1, 1 ], "type": "Integer", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : 0, "md" : 0, "kg" : 0, "s" : 0, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}},
{ "key" : "distribution_coefficient",
"description" : "Multiplication parameters (k, omega) in either Langmuir c_s = omega * (alpha*c_a)/(1- alpha*c_a) or in linear c_s = k * c_a isothermal description. (($[m^{3}kg^{-1}]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "371fd639aa5a1b4c",
"attributes" : {
"field_value_shape" : { "subfields": true, "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : 3, "md" : 0, "kg" : -1, "s" : 0, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}},
{ "key" : "isotherm_other",
"description" : "Second parameters (alpha, ...) defining isotherm  c_s = omega * (alpha*c_a)/(1- alpha*c_a). (($[-]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "371fd639aa5a1b4c",
"attributes" : {
"field_value_shape" : { "subfields": true, "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : 0, "md" : 0, "kg" : 0, "s" : 0, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}},
{ "key" : "init_conc_solid",
"description" : "Initial solid concentration of substances. Vector, one value for every substance. (($[kg^{-1}mol]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "371fd639aa5a1b4c",
"attributes" : {
"field_value_shape" : { "subfields": true, "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : 0, "md" : 0, "kg" : -1, "s" : 0, "A" : 0, "K" : 0, "mol" : 1, "cd" : 0 }
}}]
},{
"id" : "a32eb4733571f68b",
"input_type" : "Array",
"name" : "array_of_Field_R3_to_R",
"attributes" : {},
"range" : [1, 4294967295],
"subtype" : "754bc72f21235442"
},
{
"id" : "754bc72f21235442",
"input_type" : "Abstract",
"name" : "Field_R3_to_R",
"generic_type" : "68a8bfbc6ae41b96",
"parameters" : {"element_input_type" : "b992ede334b6d7e7"},
"attributes" : {
"field_value_shape" : [1, 1]
},
"description" : "Abstract for all time-space functions.",
"default_descendant" : "7ae5396642359d7a",
"implementations" : [
"a41a63ef82d50ffa",
"7ae5396642359d7a",
"d7b32ac8b94b5e16",
"f736389bcffe985d",
"1dc273e002c60620",
"ff69c76abf31dca1"]},{
"id" : "7ae5396642359d7a",
"input_type" : "Record",
"name" : "FieldConstant",
"generic_type" : "1763d8bad2619ea5",
"parameters" : {"element_input_type" : "b992ede334b6d7e7"},
"attributes" : {},
"description" : "R3_to_R Field constant in space.",
"implements" : [ "68a8bfbc6ae41b96" ],
"reducible_to_key" : "value",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldConstant" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "unit",
"description" : "Unit of the field values provided in the main input file, in the external file, or by a function (FieldPython).",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "d671df90b1b2e854",
"attributes" : {}},
{ "key" : "value",
"description" : "Value of the constant field. For vector values, you can use scalar value to enter constant vector. For square (($N\\\\times N$))-matrix values, you can use:  - vector of size (($N$)) to enter diagonal matrix\\n\\n - vector of size (($\\\\frac12N(N+1)$)) to enter symmetric matrix (upper triangle, row by row)\\n - scalar to enter multiple of the unit matrix.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "b992ede334b6d7e7",
"attributes" : {}}]
},{
"id" : "b992ede334b6d7e7",
"input_type" : "Selection",
"name" : "SorptionType",
"attributes" : {},
"description" : "",
"values" : [
{ "name" : "none",
"description" : "No sorption considered.",
"attributes" : {}
},
{ "name" : "linear",
"description" : "Linear isotherm runs the concentration exchange between liquid and solid.",
"attributes" : {}
},
{ "name" : "langmuir",
"description" : "Langmuir isotherm runs the concentration exchange between liquid and solid.",
"attributes" : {}
},
{ "name" : "freundlich",
"description" : "Freundlich isotherm runs the concentration exchange between liquid and solid.",
"attributes" : {}
}]
},{
"id" : "ff69c76abf31dca1",
"input_type" : "Record",
"name" : "FieldTimeFunction",
"generic_type" : "9a64a1247454c937",
"parameters" : {"element_input_type" : "b992ede334b6d7e7"},
"attributes" : {},
"description" : "R3_to_R Field time-dependent function in space.",
"implements" : [ "68a8bfbc6ae41b96" ],
"reducible_to_key" : "time_function",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldTimeFunction" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "unit",
"description" : "Unit of the field values provided in the main input file, in the external file, or by a function (FieldPython).",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "d671df90b1b2e854",
"attributes" : {}},
{ "key" : "time_function",
"description" : "Values of time series initialization of Field.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "55ee4338e986664c",
"attributes" : {}}]
},{
"id" : "55ee4338e986664c",
"input_type" : "Record",
"name" : "TableFunction",
"generic_type" : "705839e94dc90e8b",
"parameters" : {"element_input_type" : "b992ede334b6d7e7"},
"attributes" : {},
"description" : "Allow set variable series initialization of Fields.",
"reducible_to_key" : "values",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "TableFunction" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "values",
"description" : "Initizaliation values of Field.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "4cb6e8c74e684265",
"attributes" : {}}]
},{
"id" : "4cb6e8c74e684265",
"input_type" : "Array",
"name" : "array_of_IndependentValue",
"generic_type" : "ae9206c686c07f12",
"parameters" : {"element_input_type" : "b992ede334b6d7e7"},
"attributes" : {},
"range" : [2, 4294967295],
"subtype" : "d9d3fa48e6f0de7e"
},
{
"id" : "d9d3fa48e6f0de7e",
"input_type" : "Tuple",
"name" : "IndependentValue",
"generic_type" : "3bef944a2f88d9a7",
"parameters" : {"element_input_type" : "b992ede334b6d7e7"},
"attributes" : {},
"description" : "Value of Field for independent variable.",
"keys" : [
{ "key" : "t",
"description" : "Independent variable of stamp.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "6b1c4ede475775aa",
"attributes" : {}},
{ "key" : "value",
"description" : "Value of the field in given stamp.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "b992ede334b6d7e7",
"attributes" : {}}]
},{
"id" : "454cd110deeb0e1e",
"input_type" : "Abstract",
"name" : "GenericReaction",
"attributes" : {},
"description" : "Abstract equation for a reaction of species in single compartment (e.g. mobile solid).It can be part of: direct operator splitting coupling, dual porosity model, any sorption.",
"implementations" : [
"63b41d5b67ed5950",
"68f927d49b5fbba2"]},{
"id" : "fb2ae7e76ecbb8f5",
"input_type" : "Record",
"name" : "EquationOutput",
"generic_type" : "d26f5c9651fbe82",
"parameters" : {"output_field_selection" : "ba07e45a96edcbdc"},
"attributes" : {},
"description" : "Output of the equation's fields.The output is done through the output stream of the associated balance law equation.The stream defines output format for the full space information in selected times and observe points for the full time information. The key 'fields' select the fields for the full spatial output.The set of output times may be specified  per field otherwise common time set 'times' is used. If even this is not providedthe time set of the output_stream is used. The initial time of the equation is automatically added to the time set of every selected field. The end time of the equation is automatically added to the common output time set.",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "EquationOutput" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "times",
"description" : "Output times used for the output fields without is own time series specification.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "f8d103d0d2e14ac5",
"attributes" : {}},
{ "key" : "add_input_times",
"description" : "Add all input time points of the equation, mentioned in the 'input_fields' list, also as the output points.",
"default" : { "type" : "value at declaration",
"value" : false },
"type" : "282546d52edd4",
"attributes" : {}},
{ "key" : "fields",
"description" : "Array of output fields and their individual output settings.",
"default" : { "type" : "value at declaration",
"value" : [] },
"type" : "775ef7154671fff9",
"attributes" : {}},
{ "key" : "observe_fields",
"description" : "Array of the fields evaluated in the observe points of the associated output stream.",
"default" : { "type" : "value at declaration",
"value" : [] },
"type" : "62936a332ceaa71d",
"attributes" : {}}]
},{
"id" : "775ef7154671fff9",
"input_type" : "Array",
"name" : "array_of_FieldOutputSetting",
"generic_type" : "dc44bb2d9b30af35",
"parameters" : {"output_field_selection" : "ba07e45a96edcbdc"},
"attributes" : {},
"range" : [0, 4294967295],
"subtype" : "604e4a4e0d8d828e"
},
{
"id" : "604e4a4e0d8d828e",
"input_type" : "Record",
"name" : "FieldOutputSetting",
"generic_type" : "b5340646484e31da",
"parameters" : {"output_field_selection" : "ba07e45a96edcbdc"},
"attributes" : {},
"description" : "Setting of the field output. The field name, output times, output interpolation (future).",
"reducible_to_key" : "field",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldOutputSetting" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "field",
"description" : "The field name (from selection).",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "ba07e45a96edcbdc",
"attributes" : {}},
{ "key" : "times",
"description" : "Output times specific to particular field.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "f8d103d0d2e14ac5",
"attributes" : {}}]
},{
"id" : "ba07e45a96edcbdc",
"input_type" : "Selection",
"name" : "Sorption:OutputFields",
"attributes" : {},
"description" : "Selection of output fields for the Sorption model.\\n",
"values" : [
{ "name" : "rock_density",
"description" : "(($[m^{-3}kg]$)) Input field: Rock matrix density.",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "sorption_type",
"description" : "(($[-]$)) Input field: Considered sorption is described by selected isotherm. If porosity on an element is equal or even higher than 1.0 (meaning no sorbing surface), then type 'none' will be selected automatically.",
"attributes" : {
"field_value_shape" : { "subfields": true, "shape": [ 1, 1 ], "type": "Integer", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "distribution_coefficient",
"description" : "(($[m^{3}kg^{-1}]$)) Input field: Multiplication parameters (k, omega) in either Langmuir c_s = omega * (alpha*c_a)/(1- alpha*c_a) or in linear c_s = k * c_a isothermal description.",
"attributes" : {
"field_value_shape" : { "subfields": true, "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "isotherm_other",
"description" : "(($[-]$)) Input field: Second parameters (alpha, ...) defining isotherm  c_s = omega * (alpha*c_a)/(1- alpha*c_a).",
"attributes" : {
"field_value_shape" : { "subfields": true, "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "init_conc_solid",
"description" : "(($[kg^{-1}mol]$)) Input field: Initial solid concentration of substances. Vector, one value for every substance.",
"attributes" : {
"field_value_shape" : { "subfields": true, "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "conc_solid",
"description" : "(($[-]$)) ",
"attributes" : {
"field_value_shape" : { "subfields": true, "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
}]
},{
"id" : "62936a332ceaa71d",
"input_type" : "Array",
"name" : "array_of_Sorption:OutputFields",
"generic_type" : "28bfad7f05e39c9a",
"parameters" : {"output_field_selection" : "ba07e45a96edcbdc"},
"attributes" : {},
"range" : [0, 4294967295],
"subtype" : "ba07e45a96edcbdc"
},
{
"id" : "e006951d4cd4730a",
"input_type" : "Record",
"name" : "DualPorosity",
"attributes" : {},
"description" : "Dual porosity model in transport problems.\\nProvides computing the concentration of substances in mobile and immobile zone.\\n",
"implements" : [ "fbb7afea5f047780" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "DualPorosity" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "input_fields",
"description" : "Containes region specific data necessary to construct dual porosity model.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "41bde94ac5880d0b",
"attributes" : {}},
{ "key" : "scheme_tolerance",
"description" : "Tolerance according to which the explicit Euler scheme is used or not.Set 0.0 to use analytic formula only (can be slower).",
"default" : { "type" : "value at declaration",
"value" : 1e-3 },
"type" : "6b1c4ede475775aa",
"attributes" : {}},
{ "key" : "reaction_mobile",
"description" : "Reaction model in mobile zone.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "b1ca4e99aa76476e",
"attributes" : {}},
{ "key" : "reaction_immobile",
"description" : "Reaction model in immobile zone.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "8e5129fda3dad86e",
"attributes" : {}},
{ "key" : "output",
"description" : "Setting of the fields output.",
"default" : { "type" : "value at declaration",
"value" : { "fields": [ "conc_immobile" ] } },
"type" : "81414d6f50c1913d",
"attributes" : {}}]
},{
"id" : "41bde94ac5880d0b",
"input_type" : "Array",
"name" : "array_of_DualPorosity:Data",
"attributes" : {},
"range" : [0, 4294967295],
"subtype" : "55b7df6f1561f372"
},
{
"id" : "55b7df6f1561f372",
"input_type" : "Record",
"name" : "DualPorosity:Data",
"attributes" : {},
"description" : "Record to set fields of the equation.\\nThe fields are set only on the domain specified by one of the keys: 'region', 'rid'\\nand after the time given by the key 'time'. The field setting can be overridden by\\n any DualPorosity:Data record that comes later in the boundary data array.",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "DualPorosity:Data" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "region",
"description" : "Labels of the regions where to set fields. ",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "eee303f526b992fd",
"attributes" : {}},
{ "key" : "rid",
"description" : "ID of the region where to set fields.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "151ce92d5201d44f",
"attributes" : {
"obsolete" : "Specification of the region by its ID is obsolete, will be removed in release 3.0.\nUse region label declared in the Mesh record or default label 'region_<ID>'."
}},
{ "key" : "time",
"description" : "Apply field setting in this record after this time.\\nThese times have to form an increasing sequence.",
"default" : { "type" : "value at declaration",
"value" : 0.0 },
"type" : "6b1c4ede475775aa",
"attributes" : {}},
{ "key" : "diffusion_rate_immobile",
"description" : "Diffusion coefficient of non-equilibrium linear exchange between mobile and immobile zone. (($[s^{-1}]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "371fd639aa5a1b4c",
"attributes" : {
"field_value_shape" : { "subfields": true, "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : 0, "md" : 0, "kg" : 0, "s" : -1, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}},
{ "key" : "porosity_immobile",
"description" : "Porosity of the immobile zone. (($[-]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "15b28e4bc4f2e83",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ 0, 1.79769e+308 ] },
"key_field_unit" : { "m" : 0, "md" : 0, "kg" : 0, "s" : 0, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}},
{ "key" : "init_conc_immobile",
"description" : "Initial concentration of substances in the immobile zone. (($[m^{-3}kg]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "371fd639aa5a1b4c",
"attributes" : {
"field_value_shape" : { "subfields": true, "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : -3, "md" : 0, "kg" : 1, "s" : 0, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}}]
},{
"id" : "b1ca4e99aa76476e",
"input_type" : "Abstract",
"name" : "ReactionTermMobile",
"attributes" : {},
"description" : "Abstract equation for a reaction term of the MOBILE pores (sorption, reactions). Is part of dual porosity model.",
"implementations" : [
"63b41d5b67ed5950",
"68f927d49b5fbba2",
"54fd12b5170d0ac5"]},{
"id" : "54fd12b5170d0ac5",
"input_type" : "Record",
"name" : "SorptionMobile",
"attributes" : {},
"description" : "Sorption model in the mobile zone, following the dual porosity model.",
"implements" : [ "b1ca4e99aa76476e" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "SorptionMobile" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "substances",
"description" : "Names of the substances that take part in the sorption model.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "eee303f526b992fd",
"attributes" : {}},
{ "key" : "solvent_density",
"description" : "Density of the solvent.",
"default" : { "type" : "value at declaration",
"value" : 1.0 },
"type" : "6b1c4ede475775aa",
"attributes" : {}},
{ "key" : "substeps",
"description" : "Number of equidistant substeps, molar mass and isotherm intersections",
"default" : { "type" : "value at declaration",
"value" : 1000 },
"type" : "151ce92d5201d40e",
"attributes" : {}},
{ "key" : "solubility",
"description" : "Specifies solubility limits of all the sorbing species.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "ae4d15413e119e57",
"attributes" : {}},
{ "key" : "table_limits",
"description" : "Specifies highest aqueous concentration in interpolation table.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "ae4d15413e119e57",
"attributes" : {}},
{ "key" : "input_fields",
"description" : "Containes region specific data necessary to construct isotherms.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "8e89e1984712724a",
"attributes" : {}},
{ "key" : "reaction_liquid",
"description" : "Reaction model following the sorption in the liquid.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "454cd110deeb0e1e",
"attributes" : {}},
{ "key" : "reaction_solid",
"description" : "Reaction model following the sorption in the solid.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "454cd110deeb0e1e",
"attributes" : {}},
{ "key" : "output",
"description" : "Setting of the fields output.",
"default" : { "type" : "value at declaration",
"value" : { "fields": [ "conc_solid" ] } },
"type" : "2204f5adc891ca65",
"attributes" : {}}]
},{
"id" : "2204f5adc891ca65",
"input_type" : "Record",
"name" : "EquationOutput",
"generic_type" : "d26f5c9651fbe82",
"parameters" : {"output_field_selection" : "fe3acdeed867fe08"},
"attributes" : {},
"description" : "Output of the equation's fields.The output is done through the output stream of the associated balance law equation.The stream defines output format for the full space information in selected times and observe points for the full time information. The key 'fields' select the fields for the full spatial output.The set of output times may be specified  per field otherwise common time set 'times' is used. If even this is not providedthe time set of the output_stream is used. The initial time of the equation is automatically added to the time set of every selected field. The end time of the equation is automatically added to the common output time set.",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "EquationOutput" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "times",
"description" : "Output times used for the output fields without is own time series specification.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "f8d103d0d2e14ac5",
"attributes" : {}},
{ "key" : "add_input_times",
"description" : "Add all input time points of the equation, mentioned in the 'input_fields' list, also as the output points.",
"default" : { "type" : "value at declaration",
"value" : false },
"type" : "282546d52edd4",
"attributes" : {}},
{ "key" : "fields",
"description" : "Array of output fields and their individual output settings.",
"default" : { "type" : "value at declaration",
"value" : [] },
"type" : "4434619041dd6996",
"attributes" : {}},
{ "key" : "observe_fields",
"description" : "Array of the fields evaluated in the observe points of the associated output stream.",
"default" : { "type" : "value at declaration",
"value" : [] },
"type" : "5d1e9603f0fc3aab",
"attributes" : {}}]
},{
"id" : "4434619041dd6996",
"input_type" : "Array",
"name" : "array_of_FieldOutputSetting",
"generic_type" : "dc44bb2d9b30af35",
"parameters" : {"output_field_selection" : "fe3acdeed867fe08"},
"attributes" : {},
"range" : [0, 4294967295],
"subtype" : "4ce4bcd311f8f87b"
},
{
"id" : "4ce4bcd311f8f87b",
"input_type" : "Record",
"name" : "FieldOutputSetting",
"generic_type" : "b5340646484e31da",
"parameters" : {"output_field_selection" : "fe3acdeed867fe08"},
"attributes" : {},
"description" : "Setting of the field output. The field name, output times, output interpolation (future).",
"reducible_to_key" : "field",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldOutputSetting" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "field",
"description" : "The field name (from selection).",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "fe3acdeed867fe08",
"attributes" : {}},
{ "key" : "times",
"description" : "Output times specific to particular field.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "f8d103d0d2e14ac5",
"attributes" : {}}]
},{
"id" : "fe3acdeed867fe08",
"input_type" : "Selection",
"name" : "SorptionMobile:OutputFields",
"attributes" : {},
"description" : "Selection of output fields for the SorptionMobile model.\\n",
"values" : [
{ "name" : "rock_density",
"description" : "(($[m^{-3}kg]$)) Input field: Rock matrix density.",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "sorption_type",
"description" : "(($[-]$)) Input field: Considered sorption is described by selected isotherm. If porosity on an element is equal or even higher than 1.0 (meaning no sorbing surface), then type 'none' will be selected automatically.",
"attributes" : {
"field_value_shape" : { "subfields": true, "shape": [ 1, 1 ], "type": "Integer", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "distribution_coefficient",
"description" : "(($[m^{3}kg^{-1}]$)) Input field: Multiplication parameters (k, omega) in either Langmuir c_s = omega * (alpha*c_a)/(1- alpha*c_a) or in linear c_s = k * c_a isothermal description.",
"attributes" : {
"field_value_shape" : { "subfields": true, "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "isotherm_other",
"description" : "(($[-]$)) Input field: Second parameters (alpha, ...) defining isotherm  c_s = omega * (alpha*c_a)/(1- alpha*c_a).",
"attributes" : {
"field_value_shape" : { "subfields": true, "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "init_conc_solid",
"description" : "(($[kg^{-1}mol]$)) Input field: Initial solid concentration of substances. Vector, one value for every substance.",
"attributes" : {
"field_value_shape" : { "subfields": true, "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "conc_solid",
"description" : "(($[-]$)) ",
"attributes" : {
"field_value_shape" : { "subfields": true, "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
}]
},{
"id" : "5d1e9603f0fc3aab",
"input_type" : "Array",
"name" : "array_of_SorptionMobile:OutputFields",
"generic_type" : "28bfad7f05e39c9a",
"parameters" : {"output_field_selection" : "fe3acdeed867fe08"},
"attributes" : {},
"range" : [0, 4294967295],
"subtype" : "fe3acdeed867fe08"
},
{
"id" : "8e5129fda3dad86e",
"input_type" : "Abstract",
"name" : "ReactionTermImmobile",
"attributes" : {},
"description" : "Abstract equation for a reaction term of the IMMOBILE pores (sorption, reactions). Is part of dual porosity model.",
"implementations" : [
"63b41d5b67ed5950",
"68f927d49b5fbba2",
"c0ff45b334534131"]},{
"id" : "c0ff45b334534131",
"input_type" : "Record",
"name" : "SorptionImmobile",
"attributes" : {},
"description" : "Sorption model in the immobile zone, following the dual porosity model.",
"implements" : [ "8e5129fda3dad86e" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "SorptionImmobile" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "substances",
"description" : "Names of the substances that take part in the sorption model.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "eee303f526b992fd",
"attributes" : {}},
{ "key" : "solvent_density",
"description" : "Density of the solvent.",
"default" : { "type" : "value at declaration",
"value" : 1.0 },
"type" : "6b1c4ede475775aa",
"attributes" : {}},
{ "key" : "substeps",
"description" : "Number of equidistant substeps, molar mass and isotherm intersections",
"default" : { "type" : "value at declaration",
"value" : 1000 },
"type" : "151ce92d5201d40e",
"attributes" : {}},
{ "key" : "solubility",
"description" : "Specifies solubility limits of all the sorbing species.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "ae4d15413e119e57",
"attributes" : {}},
{ "key" : "table_limits",
"description" : "Specifies highest aqueous concentration in interpolation table.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "ae4d15413e119e57",
"attributes" : {}},
{ "key" : "input_fields",
"description" : "Containes region specific data necessary to construct isotherms.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "8e89e1984712724a",
"attributes" : {}},
{ "key" : "reaction_liquid",
"description" : "Reaction model following the sorption in the liquid.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "454cd110deeb0e1e",
"attributes" : {}},
{ "key" : "reaction_solid",
"description" : "Reaction model following the sorption in the solid.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "454cd110deeb0e1e",
"attributes" : {}},
{ "key" : "output",
"description" : "Setting of the fields output.",
"default" : { "type" : "value at declaration",
"value" : { "fields": [ "conc_immobile_solid" ] } },
"type" : "cb41e3dffb01385e",
"attributes" : {}}]
},{
"id" : "cb41e3dffb01385e",
"input_type" : "Record",
"name" : "EquationOutput",
"generic_type" : "d26f5c9651fbe82",
"parameters" : {"output_field_selection" : "2f4fd816ffb0ef90"},
"attributes" : {},
"description" : "Output of the equation's fields.The output is done through the output stream of the associated balance law equation.The stream defines output format for the full space information in selected times and observe points for the full time information. The key 'fields' select the fields for the full spatial output.The set of output times may be specified  per field otherwise common time set 'times' is used. If even this is not providedthe time set of the output_stream is used. The initial time of the equation is automatically added to the time set of every selected field. The end time of the equation is automatically added to the common output time set.",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "EquationOutput" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "times",
"description" : "Output times used for the output fields without is own time series specification.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "f8d103d0d2e14ac5",
"attributes" : {}},
{ "key" : "add_input_times",
"description" : "Add all input time points of the equation, mentioned in the 'input_fields' list, also as the output points.",
"default" : { "type" : "value at declaration",
"value" : false },
"type" : "282546d52edd4",
"attributes" : {}},
{ "key" : "fields",
"description" : "Array of output fields and their individual output settings.",
"default" : { "type" : "value at declaration",
"value" : [] },
"type" : "220f1b7071edd8a8",
"attributes" : {}},
{ "key" : "observe_fields",
"description" : "Array of the fields evaluated in the observe points of the associated output stream.",
"default" : { "type" : "value at declaration",
"value" : [] },
"type" : "77d41be301b30f1a",
"attributes" : {}}]
},{
"id" : "220f1b7071edd8a8",
"input_type" : "Array",
"name" : "array_of_FieldOutputSetting",
"generic_type" : "dc44bb2d9b30af35",
"parameters" : {"output_field_selection" : "2f4fd816ffb0ef90"},
"attributes" : {},
"range" : [0, 4294967295],
"subtype" : "2aff66732209a73d"
},
{
"id" : "2aff66732209a73d",
"input_type" : "Record",
"name" : "FieldOutputSetting",
"generic_type" : "b5340646484e31da",
"parameters" : {"output_field_selection" : "2f4fd816ffb0ef90"},
"attributes" : {},
"description" : "Setting of the field output. The field name, output times, output interpolation (future).",
"reducible_to_key" : "field",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldOutputSetting" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "field",
"description" : "The field name (from selection).",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "2f4fd816ffb0ef90",
"attributes" : {}},
{ "key" : "times",
"description" : "Output times specific to particular field.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "f8d103d0d2e14ac5",
"attributes" : {}}]
},{
"id" : "2f4fd816ffb0ef90",
"input_type" : "Selection",
"name" : "SorptionImmobile:OutputFields",
"attributes" : {},
"description" : "Selection of output fields for the SorptionImmobile model.\\n",
"values" : [
{ "name" : "rock_density",
"description" : "(($[m^{-3}kg]$)) Input field: Rock matrix density.",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "sorption_type",
"description" : "(($[-]$)) Input field: Considered sorption is described by selected isotherm. If porosity on an element is equal or even higher than 1.0 (meaning no sorbing surface), then type 'none' will be selected automatically.",
"attributes" : {
"field_value_shape" : { "subfields": true, "shape": [ 1, 1 ], "type": "Integer", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "distribution_coefficient",
"description" : "(($[m^{3}kg^{-1}]$)) Input field: Multiplication parameters (k, omega) in either Langmuir c_s = omega * (alpha*c_a)/(1- alpha*c_a) or in linear c_s = k * c_a isothermal description.",
"attributes" : {
"field_value_shape" : { "subfields": true, "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "isotherm_other",
"description" : "(($[-]$)) Input field: Second parameters (alpha, ...) defining isotherm  c_s = omega * (alpha*c_a)/(1- alpha*c_a).",
"attributes" : {
"field_value_shape" : { "subfields": true, "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "init_conc_solid",
"description" : "(($[kg^{-1}mol]$)) Input field: Initial solid concentration of substances. Vector, one value for every substance.",
"attributes" : {
"field_value_shape" : { "subfields": true, "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "conc_immobile_solid",
"description" : "(($[-]$)) ",
"attributes" : {
"field_value_shape" : { "subfields": true, "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
}]
},{
"id" : "77d41be301b30f1a",
"input_type" : "Array",
"name" : "array_of_SorptionImmobile:OutputFields",
"generic_type" : "28bfad7f05e39c9a",
"parameters" : {"output_field_selection" : "2f4fd816ffb0ef90"},
"attributes" : {},
"range" : [0, 4294967295],
"subtype" : "2f4fd816ffb0ef90"
},
{
"id" : "81414d6f50c1913d",
"input_type" : "Record",
"name" : "EquationOutput",
"generic_type" : "d26f5c9651fbe82",
"parameters" : {"output_field_selection" : "48378f4c4d06fbc8"},
"attributes" : {},
"description" : "Output of the equation's fields.The output is done through the output stream of the associated balance law equation.The stream defines output format for the full space information in selected times and observe points for the full time information. The key 'fields' select the fields for the full spatial output.The set of output times may be specified  per field otherwise common time set 'times' is used. If even this is not providedthe time set of the output_stream is used. The initial time of the equation is automatically added to the time set of every selected field. The end time of the equation is automatically added to the common output time set.",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "EquationOutput" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "times",
"description" : "Output times used for the output fields without is own time series specification.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "f8d103d0d2e14ac5",
"attributes" : {}},
{ "key" : "add_input_times",
"description" : "Add all input time points of the equation, mentioned in the 'input_fields' list, also as the output points.",
"default" : { "type" : "value at declaration",
"value" : false },
"type" : "282546d52edd4",
"attributes" : {}},
{ "key" : "fields",
"description" : "Array of output fields and their individual output settings.",
"default" : { "type" : "value at declaration",
"value" : [] },
"type" : "649a0a1c0eb967cf",
"attributes" : {}},
{ "key" : "observe_fields",
"description" : "Array of the fields evaluated in the observe points of the associated output stream.",
"default" : { "type" : "value at declaration",
"value" : [] },
"type" : "3147e2a8df5c447e",
"attributes" : {}}]
},{
"id" : "649a0a1c0eb967cf",
"input_type" : "Array",
"name" : "array_of_FieldOutputSetting",
"generic_type" : "dc44bb2d9b30af35",
"parameters" : {"output_field_selection" : "48378f4c4d06fbc8"},
"attributes" : {},
"range" : [0, 4294967295],
"subtype" : "6d925556d4d4faa4"
},
{
"id" : "6d925556d4d4faa4",
"input_type" : "Record",
"name" : "FieldOutputSetting",
"generic_type" : "b5340646484e31da",
"parameters" : {"output_field_selection" : "48378f4c4d06fbc8"},
"attributes" : {},
"description" : "Setting of the field output. The field name, output times, output interpolation (future).",
"reducible_to_key" : "field",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldOutputSetting" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "field",
"description" : "The field name (from selection).",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "48378f4c4d06fbc8",
"attributes" : {}},
{ "key" : "times",
"description" : "Output times specific to particular field.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "f8d103d0d2e14ac5",
"attributes" : {}}]
},{
"id" : "48378f4c4d06fbc8",
"input_type" : "Selection",
"name" : "DualPorosity:OutputFields",
"attributes" : {},
"description" : "Selection of output fields for the DualPorosity model.\\n",
"values" : [
{ "name" : "diffusion_rate_immobile",
"description" : "(($[s^{-1}]$)) Input field: Diffusion coefficient of non-equilibrium linear exchange between mobile and immobile zone.",
"attributes" : {
"field_value_shape" : { "subfields": true, "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "porosity_immobile",
"description" : "(($[-]$)) Input field: Porosity of the immobile zone.",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ 0, 1.79769e+308 ] }
}
},
{ "name" : "init_conc_immobile",
"description" : "(($[m^{-3}kg]$)) Input field: Initial concentration of substances in the immobile zone.",
"attributes" : {
"field_value_shape" : { "subfields": true, "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "conc_immobile",
"description" : "(($[m^{-3}kg]$)) ",
"attributes" : {
"field_value_shape" : { "subfields": true, "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
}]
},{
"id" : "3147e2a8df5c447e",
"input_type" : "Array",
"name" : "array_of_DualPorosity:OutputFields",
"generic_type" : "28bfad7f05e39c9a",
"parameters" : {"output_field_selection" : "48378f4c4d06fbc8"},
"attributes" : {},
"range" : [0, 4294967295],
"subtype" : "48378f4c4d06fbc8"
},
{
"id" : "cae038099549c6c9",
"input_type" : "Record",
"name" : "Heat_AdvectionDiffusion_DG",
"attributes" : {},
"description" : "DG solver for heat transfer.",
"implements" : [ "c20b6cad3d254b33" ],
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "Heat_AdvectionDiffusion_DG" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "time",
"description" : "Time governor setting for the secondary equation.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "eb2dcf155e12a83b",
"attributes" : {}},
{ "key" : "balance",
"description" : "Settings for computing balance.",
"default" : { "type" : "value at declaration",
"value" : {} },
"type" : "bc0c26d77c6c7f11",
"attributes" : {}},
{ "key" : "output_stream",
"description" : "Parameters of output stream.",
"default" : { "type" : "value at declaration",
"value" : {} },
"type" : "f648258f2b1360cd",
"attributes" : {}},
{ "key" : "solver",
"description" : "Linear solver for MH problem.",
"default" : { "type" : "value at declaration",
"value" : {} },
"type" : "d86836fae202309c",
"attributes" : {}},
{ "key" : "input_fields",
"description" : "Input fields of the equation.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "d962fb21add0fd77",
"attributes" : {}},
{ "key" : "dg_variant",
"description" : "Variant of interior penalty discontinuous Galerkin method.",
"default" : { "type" : "value at declaration",
"value" : "non-symmetric" },
"type" : "63d5c736bdd40bf1",
"attributes" : {}},
{ "key" : "dg_order",
"description" : "Polynomial order for finite element in DG method (order 0 is suitable if there is no diffusion/dispersion).",
"default" : { "type" : "value at declaration",
"value" : 1 },
"type" : "151ce92dd201d44b",
"attributes" : {}},
{ "key" : "output",
"description" : "Setting of the field output.",
"default" : { "type" : "value at declaration",
"value" : { "fields": [ "temperature"] } },
"type" : "741ca2dec6742e75",
"attributes" : {}}]
},{
"id" : "d962fb21add0fd77",
"input_type" : "Array",
"name" : "array_of_Heat_AdvectionDiffusion_DG:Data",
"attributes" : {},
"range" : [0, 4294967295],
"subtype" : "c4d5d6ba30387882"
},
{
"id" : "c4d5d6ba30387882",
"input_type" : "Record",
"name" : "Heat_AdvectionDiffusion_DG:Data",
"attributes" : {},
"description" : "Record to set fields of the equation.\\nThe fields are set only on the domain specified by one of the keys: 'region', 'rid'\\nand after the time given by the key 'time'. The field setting can be overridden by\\n any Heat_AdvectionDiffusion_DG:Data record that comes later in the boundary data array.",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "Heat_AdvectionDiffusion_DG:Data" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "region",
"description" : "Labels of the regions where to set fields. ",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "eee303f526b992fd",
"attributes" : {}},
{ "key" : "rid",
"description" : "ID of the region where to set fields.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "151ce92d5201d44f",
"attributes" : {
"obsolete" : "Specification of the region by its ID is obsolete, will be removed in release 3.0.\nUse region label declared in the Mesh record or default label 'region_<ID>'."
}},
{ "key" : "time",
"description" : "Apply field setting in this record after this time.\\nThese times have to form an increasing sequence.",
"default" : { "type" : "value at declaration",
"value" : 0.0 },
"type" : "6b1c4ede475775aa",
"attributes" : {}},
{ "key" : "bc_type",
"description" : "Type of boundary condition. (($[-]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "83cdbdd21ad66555",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Integer", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : 0, "md" : 0, "kg" : 0, "s" : 0, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}},
{ "key" : "bc_temperature",
"description" : "Boundary value of temperature. (($[K]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "371fd639aa5a1b4c",
"attributes" : {
"field_value_shape" : { "subfields": true, "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : 0, "md" : 0, "kg" : 0, "s" : 0, "A" : 0, "K" : 1, "mol" : 0, "cd" : 0 }
}},
{ "key" : "bc_flux",
"description" : "Flux in Neumann boundary condition. (($[m^{1-d}kgs^{-1}]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "15b28e4bc4f2e83",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : 1, "md" : -1, "kg" : 1, "s" : -1, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}},
{ "key" : "bc_robin_sigma",
"description" : "Conductivity coefficient in Robin boundary condition. (($[m^{4-d}s^{-1}]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "15b28e4bc4f2e83",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : 4, "md" : -1, "kg" : 0, "s" : -1, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}},
{ "key" : "init_temperature",
"description" : "Initial temperature. (($[K]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "15b28e4bc4f2e83",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : 0, "md" : 0, "kg" : 0, "s" : 0, "A" : 0, "K" : 1, "mol" : 0, "cd" : 0 }
}},
{ "key" : "porosity",
"description" : "Porosity. (($[-]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "15b28e4bc4f2e83",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ 0, 1.79769e+308 ] },
"key_field_unit" : { "m" : 0, "md" : 0, "kg" : 0, "s" : 0, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}},
{ "key" : "fluid_density",
"description" : "Density of fluid. (($[m^{-3}kg]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "15b28e4bc4f2e83",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : -3, "md" : 0, "kg" : 1, "s" : 0, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}},
{ "key" : "fluid_heat_capacity",
"description" : "Heat capacity of fluid. (($[m^{2}s^{-2}K^{-1}]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "15b28e4bc4f2e83",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : 2, "md" : 0, "kg" : 0, "s" : -2, "A" : 0, "K" : -1, "mol" : 0, "cd" : 0 }
}},
{ "key" : "fluid_heat_conductivity",
"description" : "Heat conductivity of fluid. (($[mkgs^{-3}K^{-1}]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "15b28e4bc4f2e83",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ 0, 1.79769e+308 ] },
"key_field_unit" : { "m" : 1, "md" : 0, "kg" : 1, "s" : -3, "A" : 0, "K" : -1, "mol" : 0, "cd" : 0 }
}},
{ "key" : "solid_density",
"description" : "Density of solid (rock). (($[m^{-3}kg]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "15b28e4bc4f2e83",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : -3, "md" : 0, "kg" : 1, "s" : 0, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}},
{ "key" : "solid_heat_capacity",
"description" : "Heat capacity of solid (rock). (($[m^{2}s^{-2}K^{-1}]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "15b28e4bc4f2e83",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : 2, "md" : 0, "kg" : 0, "s" : -2, "A" : 0, "K" : -1, "mol" : 0, "cd" : 0 }
}},
{ "key" : "solid_heat_conductivity",
"description" : "Heat conductivity of solid (rock). (($[mkgs^{-3}K^{-1}]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "15b28e4bc4f2e83",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ 0, 1.79769e+308 ] },
"key_field_unit" : { "m" : 1, "md" : 0, "kg" : 1, "s" : -3, "A" : 0, "K" : -1, "mol" : 0, "cd" : 0 }
}},
{ "key" : "disp_l",
"description" : "Longitudal heat dispersivity in fluid. (($[m]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "15b28e4bc4f2e83",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : 1, "md" : 0, "kg" : 0, "s" : 0, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}},
{ "key" : "disp_t",
"description" : "Transversal heat dispersivity in fluid. (($[m]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "15b28e4bc4f2e83",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : 1, "md" : 0, "kg" : 0, "s" : 0, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}},
{ "key" : "fluid_thermal_source",
"description" : "Density of thermal source in fluid. (($[m^{-1}kgs^{-3}]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "15b28e4bc4f2e83",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : -1, "md" : 0, "kg" : 1, "s" : -3, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}},
{ "key" : "solid_thermal_source",
"description" : "Density of thermal source in solid. (($[m^{-1}kgs^{-3}]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "15b28e4bc4f2e83",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : -1, "md" : 0, "kg" : 1, "s" : -3, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}},
{ "key" : "fluid_heat_exchange_rate",
"description" : "Heat exchange rate of source in fluid. (($[s^{-1}]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "15b28e4bc4f2e83",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : 0, "md" : 0, "kg" : 0, "s" : -1, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}},
{ "key" : "solid_heat_exchange_rate",
"description" : "Heat exchange rate of source in solid. (($[s^{-1}]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "15b28e4bc4f2e83",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : 0, "md" : 0, "kg" : 0, "s" : -1, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}},
{ "key" : "fluid_ref_temperature",
"description" : "Reference temperature of source in fluid. (($[K]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "15b28e4bc4f2e83",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : 0, "md" : 0, "kg" : 0, "s" : 0, "A" : 0, "K" : 1, "mol" : 0, "cd" : 0 }
}},
{ "key" : "solid_ref_temperature",
"description" : "Reference temperature in solid. (($[K]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "15b28e4bc4f2e83",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : 0, "md" : 0, "kg" : 0, "s" : 0, "A" : 0, "K" : 1, "mol" : 0, "cd" : 0 }
}},
{ "key" : "fracture_sigma",
"description" : "Coefficient of diffusive transfer through fractures (for each substance). (($[-]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "371fd639aa5a1b4c",
"attributes" : {
"field_value_shape" : { "subfields": true, "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : 0, "md" : 0, "kg" : 0, "s" : 0, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}},
{ "key" : "dg_penalty",
"description" : "Penalty parameter influencing the discontinuity of the solution (for each substance). Its default value 1 is sufficient in most cases. Higher value diminishes the inter-element jumps. (($[-]$))",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "371fd639aa5a1b4c",
"attributes" : {
"field_value_shape" : { "subfields": true, "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] },
"key_field_unit" : { "m" : 0, "md" : 0, "kg" : 0, "s" : 0, "A" : 0, "K" : 0, "mol" : 0, "cd" : 0 }
}}]
},{
"id" : "83cdbdd21ad66555",
"input_type" : "Abstract",
"name" : "Field_R3_to_R",
"generic_type" : "68a8bfbc6ae41b96",
"parameters" : {"element_input_type" : "c6bfb432dafafff3"},
"attributes" : {
"field_value_shape" : [1, 1]
},
"description" : "Abstract for all time-space functions.",
"default_descendant" : "d52f0ab267dc1e53",
"implementations" : [
"a41a63ef82d50ffa",
"d52f0ab267dc1e53",
"d7b32ac8b94b5e16",
"f736389bcffe985d",
"1dc273e002c60620",
"a9b78d212261a85d"]},{
"id" : "d52f0ab267dc1e53",
"input_type" : "Record",
"name" : "FieldConstant",
"generic_type" : "1763d8bad2619ea5",
"parameters" : {"element_input_type" : "c6bfb432dafafff3"},
"attributes" : {},
"description" : "R3_to_R Field constant in space.",
"implements" : [ "68a8bfbc6ae41b96" ],
"reducible_to_key" : "value",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldConstant" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "unit",
"description" : "Unit of the field values provided in the main input file, in the external file, or by a function (FieldPython).",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "d671df90b1b2e854",
"attributes" : {}},
{ "key" : "value",
"description" : "Value of the constant field. For vector values, you can use scalar value to enter constant vector. For square (($N\\\\times N$))-matrix values, you can use:  - vector of size (($N$)) to enter diagonal matrix\\n\\n - vector of size (($\\\\frac12N(N+1)$)) to enter symmetric matrix (upper triangle, row by row)\\n - scalar to enter multiple of the unit matrix.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "c6bfb432dafafff3",
"attributes" : {}}]
},{
"id" : "c6bfb432dafafff3",
"input_type" : "Selection",
"name" : "Heat_BC_Type",
"attributes" : {},
"description" : "Types of boundary conditions for heat transfer model.",
"values" : [
{ "name" : "inflow",
"description" : "Default heat transfer boundary condition.\\nOn water inflow (($(q_w \\\\le 0)$)), total energy flux is given by the reference temperature 'bc_temperature'. On water outflow we prescribe zero diffusive flux, i.e. the energy flows out only due to advection.",
"attributes" : {}
},
{ "name" : "dirichlet",
"description" : "Dirichlet boundary condition (($T = T_D $)).\\nThe prescribed temperature (($T_D$)) is specified by the field 'bc_temperature'.",
"attributes" : {}
},
{ "name" : "total_flux",
"description" : "Total energy flux boundary condition.\\nThe prescribed incoming total flux can have the general form (($\\\\delta(f_N+\\\\sigma_R(T_R-T) )$)), where the absolute flux (($f_N$)) is specified by the field 'bc_flux', the transition parameter (($\\\\sigma_R$)) by 'bc_robin_sigma', and the reference temperature (($T_R$)) by 'bc_temperature'.",
"attributes" : {}
},
{ "name" : "diffusive_flux",
"description" : "Diffusive flux boundary condition.\\nThe prescribed incoming energy flux due to diffusion can have the general form (($\\\\delta(f_N+\\\\sigma_R(T_R-T) )$)), where the absolute flux (($f_N$)) is specified by the field 'bc_flux', the transition parameter (($\\\\sigma_R$)) by 'bc_robin_sigma', and the reference temperature (($T_R$)) by 'bc_temperature'.",
"attributes" : {}
}]
},{
"id" : "a9b78d212261a85d",
"input_type" : "Record",
"name" : "FieldTimeFunction",
"generic_type" : "9a64a1247454c937",
"parameters" : {"element_input_type" : "c6bfb432dafafff3"},
"attributes" : {},
"description" : "R3_to_R Field time-dependent function in space.",
"implements" : [ "68a8bfbc6ae41b96" ],
"reducible_to_key" : "time_function",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldTimeFunction" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "unit",
"description" : "Unit of the field values provided in the main input file, in the external file, or by a function (FieldPython).",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "d671df90b1b2e854",
"attributes" : {}},
{ "key" : "time_function",
"description" : "Values of time series initialization of Field.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "1ba16c7623d4a6dc",
"attributes" : {}}]
},{
"id" : "1ba16c7623d4a6dc",
"input_type" : "Record",
"name" : "TableFunction",
"generic_type" : "705839e94dc90e8b",
"parameters" : {"element_input_type" : "c6bfb432dafafff3"},
"attributes" : {},
"description" : "Allow set variable series initialization of Fields.",
"reducible_to_key" : "values",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "TableFunction" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "values",
"description" : "Initizaliation values of Field.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "c73a72a34f504358",
"attributes" : {}}]
},{
"id" : "c73a72a34f504358",
"input_type" : "Array",
"name" : "array_of_IndependentValue",
"generic_type" : "ae9206c686c07f12",
"parameters" : {"element_input_type" : "c6bfb432dafafff3"},
"attributes" : {},
"range" : [2, 4294967295],
"subtype" : "5347806ce7f8dd71"
},
{
"id" : "5347806ce7f8dd71",
"input_type" : "Tuple",
"name" : "IndependentValue",
"generic_type" : "3bef944a2f88d9a7",
"parameters" : {"element_input_type" : "c6bfb432dafafff3"},
"attributes" : {},
"description" : "Value of Field for independent variable.",
"keys" : [
{ "key" : "t",
"description" : "Independent variable of stamp.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "6b1c4ede475775aa",
"attributes" : {}},
{ "key" : "value",
"description" : "Value of the field in given stamp.",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "c6bfb432dafafff3",
"attributes" : {}}]
},{
"id" : "741ca2dec6742e75",
"input_type" : "Record",
"name" : "EquationOutput",
"generic_type" : "d26f5c9651fbe82",
"parameters" : {"output_field_selection" : "5226c1fd79330f8d"},
"attributes" : {},
"description" : "Output of the equation's fields.The output is done through the output stream of the associated balance law equation.The stream defines output format for the full space information in selected times and observe points for the full time information. The key 'fields' select the fields for the full spatial output.The set of output times may be specified  per field otherwise common time set 'times' is used. If even this is not providedthe time set of the output_stream is used. The initial time of the equation is automatically added to the time set of every selected field. The end time of the equation is automatically added to the common output time set.",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "EquationOutput" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "times",
"description" : "Output times used for the output fields without is own time series specification.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "f8d103d0d2e14ac5",
"attributes" : {}},
{ "key" : "add_input_times",
"description" : "Add all input time points of the equation, mentioned in the 'input_fields' list, also as the output points.",
"default" : { "type" : "value at declaration",
"value" : false },
"type" : "282546d52edd4",
"attributes" : {}},
{ "key" : "fields",
"description" : "Array of output fields and their individual output settings.",
"default" : { "type" : "value at declaration",
"value" : [] },
"type" : "35ed6b21ccb02d0a",
"attributes" : {}},
{ "key" : "observe_fields",
"description" : "Array of the fields evaluated in the observe points of the associated output stream.",
"default" : { "type" : "value at declaration",
"value" : [] },
"type" : "aba17373ba980972",
"attributes" : {}}]
},{
"id" : "35ed6b21ccb02d0a",
"input_type" : "Array",
"name" : "array_of_FieldOutputSetting",
"generic_type" : "dc44bb2d9b30af35",
"parameters" : {"output_field_selection" : "5226c1fd79330f8d"},
"attributes" : {},
"range" : [0, 4294967295],
"subtype" : "1e9db64296cdb3df"
},
{
"id" : "1e9db64296cdb3df",
"input_type" : "Record",
"name" : "FieldOutputSetting",
"generic_type" : "b5340646484e31da",
"parameters" : {"output_field_selection" : "5226c1fd79330f8d"},
"attributes" : {},
"description" : "Setting of the field output. The field name, output times, output interpolation (future).",
"reducible_to_key" : "field",
"keys" : [
{ "key" : "TYPE",
"description" : "Sub-record Selection.",
"default" : { "type" : "value at declaration",
"value" : "FieldOutputSetting" },
"type" : "29b5533100b6f60f",
"attributes" : {}},
{ "key" : "field",
"description" : "The field name (from selection).",
"default" : { "type" : "obligatory",
"value" : "OBLIGATORY" },
"type" : "5226c1fd79330f8d",
"attributes" : {}},
{ "key" : "times",
"description" : "Output times specific to particular field.",
"default" : { "type" : "optional",
"value" : "OPTIONAL" },
"type" : "f8d103d0d2e14ac5",
"attributes" : {}}]
},{
"id" : "5226c1fd79330f8d",
"input_type" : "Selection",
"name" : "Heat_AdvectionDiffusion_DG:OutputFields",
"attributes" : {},
"description" : "Selection of output fields for the Heat_AdvectionDiffusion_DG model.\\n",
"values" : [
{ "name" : "init_temperature",
"description" : "(($[K]$)) Input field: Initial temperature.",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "porosity",
"description" : "(($[-]$)) Input field: Porosity.",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ 0, 1.79769e+308 ] }
}
},
{ "name" : "water_content",
"description" : "(($[-]$)) Input field: ",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "fluid_density",
"description" : "(($[m^{-3}kg]$)) Input field: Density of fluid.",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "fluid_heat_capacity",
"description" : "(($[m^{2}s^{-2}K^{-1}]$)) Input field: Heat capacity of fluid.",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "fluid_heat_conductivity",
"description" : "(($[mkgs^{-3}K^{-1}]$)) Input field: Heat conductivity of fluid.",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ 0, 1.79769e+308 ] }
}
},
{ "name" : "solid_density",
"description" : "(($[m^{-3}kg]$)) Input field: Density of solid (rock).",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "solid_heat_capacity",
"description" : "(($[m^{2}s^{-2}K^{-1}]$)) Input field: Heat capacity of solid (rock).",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "solid_heat_conductivity",
"description" : "(($[mkgs^{-3}K^{-1}]$)) Input field: Heat conductivity of solid (rock).",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ 0, 1.79769e+308 ] }
}
},
{ "name" : "disp_l",
"description" : "(($[m]$)) Input field: Longitudal heat dispersivity in fluid.",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "disp_t",
"description" : "(($[m]$)) Input field: Transversal heat dispersivity in fluid.",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "fluid_thermal_source",
"description" : "(($[m^{-1}kgs^{-3}]$)) Input field: Density of thermal source in fluid.",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "solid_thermal_source",
"description" : "(($[m^{-1}kgs^{-3}]$)) Input field: Density of thermal source in solid.",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "fluid_heat_exchange_rate",
"description" : "(($[s^{-1}]$)) Input field: Heat exchange rate of source in fluid.",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "solid_heat_exchange_rate",
"description" : "(($[s^{-1}]$)) Input field: Heat exchange rate of source in solid.",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "fluid_ref_temperature",
"description" : "(($[K]$)) Input field: Reference temperature of source in fluid.",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "solid_ref_temperature",
"description" : "(($[K]$)) Input field: Reference temperature in solid.",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "temperature",
"description" : "(($[K]$)) ",
"attributes" : {
"field_value_shape" : { "subfields": true, "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "fracture_sigma",
"description" : "(($[-]$)) Input field: Coefficient of diffusive transfer through fractures (for each substance).",
"attributes" : {
"field_value_shape" : { "subfields": true, "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "dg_penalty",
"description" : "(($[-]$)) Input field: Penalty parameter influencing the discontinuity of the solution (for each substance). Its default value 1 is sufficient in most cases. Higher value diminishes the inter-element jumps.",
"attributes" : {
"field_value_shape" : { "subfields": true, "shape": [ 1, 1 ], "type": "Double", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "region_id",
"description" : "(($[-]$)) Input field: ",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Integer", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
},
{ "name" : "subdomain",
"description" : "(($[-]$)) Input field: ",
"attributes" : {
"field_value_shape" : { "shape": [ 1, 1 ], "type": "Integer", "limit": [ -1.79769e+308, 1.79769e+308 ] }
}
}]
},{
"id" : "aba17373ba980972",
"input_type" : "Array",
"name" : "array_of_Heat_AdvectionDiffusion_DG:OutputFields",
"generic_type" : "28bfad7f05e39c9a",
"parameters" : {"output_field_selection" : "5226c1fd79330f8d"},
"attributes" : {},
"range" : [0, 4294967295],
"subtype" : "5226c1fd79330f8d"
},
{}],
"IST_hash" : "ef254b9b6d3434ec"
}

